sub { 
  # code automatically generated by BiBTeXML 
  use BiBTeXML::Runtime; 
  my ($context) = @_; 
  defineEntryField($context, 'address', StyString('LITERAL', 'address', [(12, 4, 12, 11)])); 
  defineEntryField($context, 'author', StyString('LITERAL', 'author', [(13, 4, 13, 10)])); 
  defineEntryField($context, 'booktitle', StyString('LITERAL', 'booktitle', [(14, 4, 14, 13)])); 
  defineEntryField($context, 'chapter', StyString('LITERAL', 'chapter', [(15, 4, 15, 11)])); 
  defineEntryField($context, 'edition', StyString('LITERAL', 'edition', [(16, 4, 16, 11)])); 
  defineEntryField($context, 'editor', StyString('LITERAL', 'editor', [(17, 4, 17, 10)])); 
  defineEntryField($context, 'howpublished', StyString('LITERAL', 'howpublished', [(18, 4, 18, 16)])); 
  defineEntryField($context, 'institution', StyString('LITERAL', 'institution', [(19, 4, 19, 15)])); 
  defineEntryField($context, 'journal', StyString('LITERAL', 'journal', [(20, 4, 20, 11)])); 
  defineEntryField($context, 'key', StyString('LITERAL', 'key', [(21, 4, 21, 7)])); 
  defineEntryField($context, 'month', StyString('LITERAL', 'month', [(22, 4, 22, 9)])); 
  defineEntryField($context, 'note', StyString('LITERAL', 'note', [(23, 4, 23, 8)])); 
  defineEntryField($context, 'number', StyString('LITERAL', 'number', [(24, 4, 24, 10)])); 
  defineEntryField($context, 'organization', StyString('LITERAL', 'organization', [(25, 4, 25, 16)])); 
  defineEntryField($context, 'pages', StyString('LITERAL', 'pages', [(26, 4, 26, 9)])); 
  defineEntryField($context, 'publisher', StyString('LITERAL', 'publisher', [(27, 4, 27, 13)])); 
  defineEntryField($context, 'school', StyString('LITERAL', 'school', [(28, 4, 28, 10)])); 
  defineEntryField($context, 'series', StyString('LITERAL', 'series', [(29, 4, 29, 10)])); 
  defineEntryField($context, 'title', StyString('LITERAL', 'title', [(30, 4, 30, 9)])); 
  defineEntryField($context, 'type', StyString('LITERAL', 'type', [(31, 4, 31, 8)])); 
  defineEntryField($context, 'volume', StyString('LITERAL', 'volume', [(32, 4, 32, 10)])); 
  defineEntryField($context, 'year', StyString('LITERAL', 'year', [(33, 4, 33, 8)])); 
  defineEntryString($context, 'label', StyString('LITERAL', 'label', [(36, 4, 36, 9)])); 
  defineGlobalInteger($context, 'output.state', StyString('LITERAL', 'output.state', [(38, 11, 38, 23)])); 
  defineGlobalInteger($context, 'before.all', StyString('LITERAL', 'before.all', [(38, 24, 38, 34)])); 
  defineGlobalInteger($context, 'mid.sentence', StyString('LITERAL', 'mid.sentence', [(38, 35, 38, 47)])); 
  defineGlobalInteger($context, 'after.sentence', StyString('LITERAL', 'after.sentence', [(38, 48, 38, 62)])); 
  defineGlobalInteger($context, 'after.block', StyString('LITERAL', 'after.block', [(38, 63, 38, 74)])); 
  sub bst__initZostateZoconsts { 
    my ($context) = @_; 
    pushInteger($context, 0, StyString('NUMBER', 0, [(41, 2, 41, 4)])); 
    lookupGlobalInteger($context, 'before.all', StyString('REFERENCE', 'before.all', [(41, 5, 41, 16)])); 
    builtin__ZcZe($context, StyString('LITERAL', ':=', [(41, 17, 41, 19)])); 
    pushInteger($context, 1, StyString('NUMBER', 1, [(42, 2, 42, 4)])); 
    lookupGlobalInteger($context, 'mid.sentence', StyString('REFERENCE', 'mid.sentence', [(42, 5, 42, 18)])); 
    builtin__ZcZe($context, StyString('LITERAL', ':=', [(42, 19, 42, 21)])); 
    pushInteger($context, 2, StyString('NUMBER', 2, [(43, 2, 43, 4)])); 
    lookupGlobalInteger($context, 'after.sentence', StyString('REFERENCE', 'after.sentence', [(43, 5, 43, 20)])); 
    builtin__ZcZe($context, StyString('LITERAL', ':=', [(43, 21, 43, 23)])); 
    pushInteger($context, 3, StyString('NUMBER', 3, [(44, 2, 44, 4)])); 
    lookupGlobalInteger($context, 'after.block', StyString('REFERENCE', 'after.block', [(44, 5, 44, 17)])); 
    builtin__ZcZe($context, StyString('LITERAL', ':=', [(44, 18, 44, 20)])); 
  }
  defineGlobalString($context, 's', StyString('LITERAL', 's', [(47, 10, 47, 11)])); 
  defineGlobalString($context, 't', StyString('LITERAL', 't', [(47, 12, 47, 13)])); 
  sub bst__outputZononnull { 
    my ($context) = @_; 
    lookupGlobalString($context, 's', StyString('REFERENCE', 's', [(50, 2, 50, 4)])); 
    builtin__ZcZe($context, StyString('LITERAL', ':=', [(50, 5, 50, 7)])); 
    pushGlobalInteger($context, 'output.state', StyString('LITERAL', 'output.state', [(51, 2, 51, 14)])); 
    pushGlobalInteger($context, 'mid.sentence', StyString('LITERAL', 'mid.sentence', [(51, 15, 51, 27)])); 
    builtin__Ze($context, StyString('LITERAL', '=', [(51, 28, 51, 29)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushString($context, ', ', StyString('QUOTE', ', ', [(52, 6, 52, 10)])); 
      builtin__Za($context, StyString('LITERAL', '*', [(52, 11, 52, 12)])); 
      builtin__writeZs($context, StyString('LITERAL', 'write$', [(52, 13, 52, 19)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', ', ', [(52, 6, 52, 10)]), StyString('LITERAL', '*', [(52, 11, 52, 12)]), StyString('LITERAL', 'write$', [(52, 13, 52, 19)]))], [(52, 4, 52, 21)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushGlobalInteger($context, 'output.state', StyString('LITERAL', 'output.state', [(53, 6, 53, 18)])); 
      pushGlobalInteger($context, 'after.block', StyString('LITERAL', 'after.block', [(53, 19, 53, 30)])); 
      builtin__Ze($context, StyString('LITERAL', '=', [(53, 31, 53, 32)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        builtin__addZoperiodZs($context, StyString('LITERAL', 'add.period$', [(54, 10, 54, 21)])); 
        builtin__writeZs($context, StyString('LITERAL', 'write$', [(54, 22, 54, 28)])); 
        builtin__newlineZs($context, StyString('LITERAL', 'newline$', [(55, 10, 55, 18)])); 
        pushString($context, '\\newblock ', StyString('QUOTE', '\\newblock ', [(56, 10, 56, 22)])); 
        builtin__writeZs($context, StyString('LITERAL', 'write$', [(56, 23, 56, 29)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'add.period$', [(54, 10, 54, 21)]), StyString('LITERAL', 'write$', [(54, 22, 54, 28)]), StyString('LITERAL', 'newline$', [(55, 10, 55, 18)]), StyString('QUOTE', '\\newblock ', [(56, 10, 56, 22)]), StyString('LITERAL', 'write$', [(56, 23, 56, 29)]))], [(54, 8, 57, 9)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushGlobalInteger($context, 'output.state', StyString('LITERAL', 'output.state', [(58, 10, 58, 22)])); 
        pushGlobalInteger($context, 'before.all', StyString('LITERAL', 'before.all', [(58, 23, 58, 33)])); 
        builtin__Ze($context, StyString('LITERAL', '=', [(58, 34, 58, 35)])); 
        lookupFunction($context, \&builtin__writeZs, StyString('REFERENCE', 'write$', [(59, 12, 59, 19)])); 
        pushFunction($context, sub { 
          my ($context) = @_; 
          builtin__addZoperiodZs($context, StyString('LITERAL', 'add.period$', [(60, 14, 60, 25)])); 
          pushString($context, ' ', StyString('QUOTE', ' ', [(60, 26, 60, 29)])); 
          builtin__Za($context, StyString('LITERAL', '*', [(60, 30, 60, 31)])); 
          builtin__writeZs($context, StyString('LITERAL', 'write$', [(60, 32, 60, 38)])); 
        }, StyString('BLOCK', [(StyString('LITERAL', 'add.period$', [(60, 14, 60, 25)]), StyString('QUOTE', ' ', [(60, 26, 60, 29)]), StyString('LITERAL', '*', [(60, 30, 60, 31)]), StyString('LITERAL', 'write$', [(60, 32, 60, 38)]))], [(60, 12, 60, 40)])); 
        builtin__ifZs($context, StyString('LITERAL', 'if$', [(61, 10, 61, 13)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'output.state', [(58, 10, 58, 22)]), StyString('LITERAL', 'before.all', [(58, 23, 58, 33)]), StyString('LITERAL', '=', [(58, 34, 58, 35)]), StyString('REFERENCE', 'write$', [(59, 12, 59, 19)]), StyString('BLOCK', [(StyString('LITERAL', 'add.period$', [(60, 14, 60, 25)]), StyString('QUOTE', ' ', [(60, 26, 60, 29)]), StyString('LITERAL', '*', [(60, 30, 60, 31)]), StyString('LITERAL', 'write$', [(60, 32, 60, 38)]))], [(60, 12, 60, 40)]), StyString('LITERAL', 'if$', [(61, 10, 61, 13)]))], [(58, 8, 62, 9)])); 
      builtin__ifZs($context, StyString('LITERAL', 'if$', [(63, 6, 63, 9)])); 
      pushGlobalInteger($context, 'mid.sentence', StyString('LITERAL', 'mid.sentence', [(64, 6, 64, 18)])); 
      lookupGlobalInteger($context, 'output.state', StyString('REFERENCE', 'output.state', [(64, 19, 64, 32)])); 
      builtin__ZcZe($context, StyString('LITERAL', ':=', [(64, 33, 64, 35)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'output.state', [(53, 6, 53, 18)]), StyString('LITERAL', 'after.block', [(53, 19, 53, 30)]), StyString('LITERAL', '=', [(53, 31, 53, 32)]), StyString('BLOCK', [(StyString('LITERAL', 'add.period$', [(54, 10, 54, 21)]), StyString('LITERAL', 'write$', [(54, 22, 54, 28)]), StyString('LITERAL', 'newline$', [(55, 10, 55, 18)]), StyString('QUOTE', '\\newblock ', [(56, 10, 56, 22)]), StyString('LITERAL', 'write$', [(56, 23, 56, 29)]))], [(54, 8, 57, 9)]), StyString('BLOCK', [(StyString('LITERAL', 'output.state', [(58, 10, 58, 22)]), StyString('LITERAL', 'before.all', [(58, 23, 58, 33)]), StyString('LITERAL', '=', [(58, 34, 58, 35)]), StyString('REFERENCE', 'write$', [(59, 12, 59, 19)]), StyString('BLOCK', [(StyString('LITERAL', 'add.period$', [(60, 14, 60, 25)]), StyString('QUOTE', ' ', [(60, 26, 60, 29)]), StyString('LITERAL', '*', [(60, 30, 60, 31)]), StyString('LITERAL', 'write$', [(60, 32, 60, 38)]))], [(60, 12, 60, 40)]), StyString('LITERAL', 'if$', [(61, 10, 61, 13)]))], [(58, 8, 62, 9)]), StyString('LITERAL', 'if$', [(63, 6, 63, 9)]), StyString('LITERAL', 'mid.sentence', [(64, 6, 64, 18)]), StyString('REFERENCE', 'output.state', [(64, 19, 64, 32)]), StyString('LITERAL', ':=', [(64, 33, 64, 35)]))], [(53, 4, 65, 5)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(66, 2, 66, 5)])); 
    pushGlobalString($context, 's', StyString('LITERAL', 's', [(67, 2, 67, 3)])); 
  }
  sub bst__output { 
    my ($context) = @_; 
    builtin__duplicateZs($context, StyString('LITERAL', 'duplicate$', [(71, 2, 71, 12)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(71, 13, 71, 19)])); 
    lookupFunction($context, \&builtin__popZs, StyString('REFERENCE', 'pop$', [(72, 4, 72, 9)])); 
    lookupFunction($context, \&bst__outputZononnull, StyString('REFERENCE', 'output.nonnull', [(73, 4, 73, 19)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(74, 2, 74, 5)])); 
  }
  sub bst__outputZocheck { 
    my ($context) = @_; 
    lookupGlobalString($context, 't', StyString('REFERENCE', 't', [(78, 2, 78, 4)])); 
    builtin__ZcZe($context, StyString('LITERAL', ':=', [(78, 5, 78, 7)])); 
    builtin__duplicateZs($context, StyString('LITERAL', 'duplicate$', [(79, 2, 79, 12)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(79, 13, 79, 19)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      builtin__popZs($context, StyString('LITERAL', 'pop$', [(80, 6, 80, 10)])); 
      pushString($context, 'empty ', StyString('QUOTE', 'empty ', [(80, 11, 80, 19)])); 
      pushGlobalString($context, 't', StyString('LITERAL', 't', [(80, 20, 80, 21)])); 
      builtin__Za($context, StyString('LITERAL', '*', [(80, 22, 80, 23)])); 
      pushString($context, ' in ', StyString('QUOTE', ' in ', [(80, 24, 80, 30)])); 
      builtin__Za($context, StyString('LITERAL', '*', [(80, 31, 80, 32)])); 
      builtin__citeZs($context, StyString('LITERAL', 'cite$', [(80, 33, 80, 38)])); 
      builtin__Za($context, StyString('LITERAL', '*', [(80, 39, 80, 40)])); 
      builtin__warningZs($context, StyString('LITERAL', 'warning$', [(80, 41, 80, 49)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'pop$', [(80, 6, 80, 10)]), StyString('QUOTE', 'empty ', [(80, 11, 80, 19)]), StyString('LITERAL', 't', [(80, 20, 80, 21)]), StyString('LITERAL', '*', [(80, 22, 80, 23)]), StyString('QUOTE', ' in ', [(80, 24, 80, 30)]), StyString('LITERAL', '*', [(80, 31, 80, 32)]), StyString('LITERAL', 'cite$', [(80, 33, 80, 38)]), StyString('LITERAL', '*', [(80, 39, 80, 40)]), StyString('LITERAL', 'warning$', [(80, 41, 80, 49)]))], [(80, 4, 80, 51)])); 
    lookupFunction($context, \&bst__outputZononnull, StyString('REFERENCE', 'output.nonnull', [(81, 4, 81, 19)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(82, 2, 82, 5)])); 
  }
  sub bst__outputZobibitem { 
    my ($context) = @_; 
    builtin__newlineZs($context, StyString('LITERAL', 'newline$', [(86, 2, 86, 10)])); 
    pushString($context, '\\bibitem{', StyString('QUOTE', '\\bibitem{', [(87, 2, 87, 13)])); 
    builtin__writeZs($context, StyString('LITERAL', 'write$', [(87, 14, 87, 20)])); 
    builtin__citeZs($context, StyString('LITERAL', 'cite$', [(88, 2, 88, 7)])); 
    builtin__writeZs($context, StyString('LITERAL', 'write$', [(88, 8, 88, 14)])); 
    pushString($context, '}', StyString('QUOTE', '}', [(89, 2, 89, 5)])); 
    builtin__writeZs($context, StyString('LITERAL', 'write$', [(89, 6, 89, 12)])); 
    builtin__newlineZs($context, StyString('LITERAL', 'newline$', [(90, 2, 90, 10)])); 
    pushString($context, '', StyString('QUOTE', '', [(91, 2, 91, 4)])); 
    pushGlobalInteger($context, 'before.all', StyString('LITERAL', 'before.all', [(92, 2, 92, 12)])); 
    lookupGlobalInteger($context, 'output.state', StyString('REFERENCE', 'output.state', [(92, 13, 92, 26)])); 
    builtin__ZcZe($context, StyString('LITERAL', ':=', [(92, 27, 92, 29)])); 
  }
  sub bst__finZoentry { 
    my ($context) = @_; 
    builtin__addZoperiodZs($context, StyString('LITERAL', 'add.period$', [(96, 2, 96, 13)])); 
    builtin__writeZs($context, StyString('LITERAL', 'write$', [(97, 2, 97, 8)])); 
    builtin__newlineZs($context, StyString('LITERAL', 'newline$', [(98, 2, 98, 10)])); 
  }
  sub bst__newZoblock { 
    my ($context) = @_; 
    pushGlobalInteger($context, 'output.state', StyString('LITERAL', 'output.state', [(102, 2, 102, 14)])); 
    pushGlobalInteger($context, 'before.all', StyString('LITERAL', 'before.all', [(102, 15, 102, 25)])); 
    builtin__Ze($context, StyString('LITERAL', '=', [(102, 26, 102, 27)])); 
    lookupFunction($context, \&builtin__skipZs, StyString('REFERENCE', 'skip$', [(103, 4, 103, 10)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushGlobalInteger($context, 'after.block', StyString('LITERAL', 'after.block', [(104, 6, 104, 17)])); 
      lookupGlobalInteger($context, 'output.state', StyString('REFERENCE', 'output.state', [(104, 18, 104, 31)])); 
      builtin__ZcZe($context, StyString('LITERAL', ':=', [(104, 32, 104, 34)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'after.block', [(104, 6, 104, 17)]), StyString('REFERENCE', 'output.state', [(104, 18, 104, 31)]), StyString('LITERAL', ':=', [(104, 32, 104, 34)]))], [(104, 4, 104, 36)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(105, 2, 105, 5)])); 
  }
  sub bst__newZosentence { 
    my ($context) = @_; 
    pushGlobalInteger($context, 'output.state', StyString('LITERAL', 'output.state', [(109, 2, 109, 14)])); 
    pushGlobalInteger($context, 'after.block', StyString('LITERAL', 'after.block', [(109, 15, 109, 26)])); 
    builtin__Ze($context, StyString('LITERAL', '=', [(109, 27, 109, 28)])); 
    lookupFunction($context, \&builtin__skipZs, StyString('REFERENCE', 'skip$', [(110, 4, 110, 10)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushGlobalInteger($context, 'output.state', StyString('LITERAL', 'output.state', [(111, 6, 111, 18)])); 
      pushGlobalInteger($context, 'before.all', StyString('LITERAL', 'before.all', [(111, 19, 111, 29)])); 
      builtin__Ze($context, StyString('LITERAL', '=', [(111, 30, 111, 31)])); 
      lookupFunction($context, \&builtin__skipZs, StyString('REFERENCE', 'skip$', [(112, 8, 112, 14)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushGlobalInteger($context, 'after.sentence', StyString('LITERAL', 'after.sentence', [(113, 10, 113, 24)])); 
        lookupGlobalInteger($context, 'output.state', StyString('REFERENCE', 'output.state', [(113, 25, 113, 38)])); 
        builtin__ZcZe($context, StyString('LITERAL', ':=', [(113, 39, 113, 41)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'after.sentence', [(113, 10, 113, 24)]), StyString('REFERENCE', 'output.state', [(113, 25, 113, 38)]), StyString('LITERAL', ':=', [(113, 39, 113, 41)]))], [(113, 8, 113, 43)])); 
      builtin__ifZs($context, StyString('LITERAL', 'if$', [(114, 6, 114, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'output.state', [(111, 6, 111, 18)]), StyString('LITERAL', 'before.all', [(111, 19, 111, 29)]), StyString('LITERAL', '=', [(111, 30, 111, 31)]), StyString('REFERENCE', 'skip$', [(112, 8, 112, 14)]), StyString('BLOCK', [(StyString('LITERAL', 'after.sentence', [(113, 10, 113, 24)]), StyString('REFERENCE', 'output.state', [(113, 25, 113, 38)]), StyString('LITERAL', ':=', [(113, 39, 113, 41)]))], [(113, 8, 113, 43)]), StyString('LITERAL', 'if$', [(114, 6, 114, 9)]))], [(111, 4, 115, 5)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(116, 2, 116, 5)])); 
  }
  sub bst__not { 
    my ($context) = @_; 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushInteger($context, 0, StyString('NUMBER', 0, [(120, 6, 120, 8)])); 
    }, StyString('BLOCK', [(StyString('NUMBER', 0, [(120, 6, 120, 8)]))], [(120, 4, 120, 10)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushInteger($context, 1, StyString('NUMBER', 1, [(121, 6, 121, 8)])); 
    }, StyString('BLOCK', [(StyString('NUMBER', 1, [(121, 6, 121, 8)]))], [(121, 4, 121, 10)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(122, 2, 122, 5)])); 
  }
  sub bst__and { 
    my ($context) = @_; 
    lookupFunction($context, \&builtin__skipZs, StyString('REFERENCE', 'skip$', [(126, 4, 126, 10)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      builtin__popZs($context, StyString('LITERAL', 'pop$', [(127, 6, 127, 10)])); 
      pushInteger($context, 0, StyString('NUMBER', 0, [(127, 11, 127, 13)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'pop$', [(127, 6, 127, 10)]), StyString('NUMBER', 0, [(127, 11, 127, 13)]))], [(127, 4, 127, 15)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(128, 2, 128, 5)])); 
  }
  sub bst__or { 
    my ($context) = @_; 
    pushFunction($context, sub { 
      my ($context) = @_; 
      builtin__popZs($context, StyString('LITERAL', 'pop$', [(132, 6, 132, 10)])); 
      pushInteger($context, 1, StyString('NUMBER', 1, [(132, 11, 132, 13)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'pop$', [(132, 6, 132, 10)]), StyString('NUMBER', 1, [(132, 11, 132, 13)]))], [(132, 4, 132, 15)])); 
    lookupFunction($context, \&builtin__skipZs, StyString('REFERENCE', 'skip$', [(133, 4, 133, 10)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(134, 2, 134, 5)])); 
  }
  sub bst__newZoblockZochecka { 
    my ($context) = @_; 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(138, 2, 138, 8)])); 
    lookupFunction($context, \&builtin__skipZs, StyString('REFERENCE', 'skip$', [(139, 4, 139, 10)])); 
    lookupFunction($context, \&bst__newZoblock, StyString('REFERENCE', 'new.block', [(140, 4, 140, 14)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(141, 2, 141, 5)])); 
  }
  sub bst__newZoblockZocheckb { 
    my ($context) = @_; 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(145, 2, 145, 8)])); 
    builtin__swapZs($context, StyString('LITERAL', 'swap$', [(146, 2, 146, 7)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(146, 8, 146, 14)])); 
    bst__and($context, StyString('LITERAL', 'and', [(147, 2, 147, 5)])); 
    lookupFunction($context, \&builtin__skipZs, StyString('REFERENCE', 'skip$', [(148, 4, 148, 10)])); 
    lookupFunction($context, \&bst__newZoblock, StyString('REFERENCE', 'new.block', [(149, 4, 149, 14)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(150, 2, 150, 5)])); 
  }
  sub bst__newZosentenceZochecka { 
    my ($context) = @_; 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(154, 2, 154, 8)])); 
    lookupFunction($context, \&builtin__skipZs, StyString('REFERENCE', 'skip$', [(155, 4, 155, 10)])); 
    lookupFunction($context, \&bst__newZosentence, StyString('REFERENCE', 'new.sentence', [(156, 4, 156, 17)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(157, 2, 157, 5)])); 
  }
  sub bst__newZosentenceZocheckb { 
    my ($context) = @_; 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(161, 2, 161, 8)])); 
    builtin__swapZs($context, StyString('LITERAL', 'swap$', [(162, 2, 162, 7)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(162, 8, 162, 14)])); 
    bst__and($context, StyString('LITERAL', 'and', [(163, 2, 163, 5)])); 
    lookupFunction($context, \&builtin__skipZs, StyString('REFERENCE', 'skip$', [(164, 4, 164, 10)])); 
    lookupFunction($context, \&bst__newZosentence, StyString('REFERENCE', 'new.sentence', [(165, 4, 165, 17)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(166, 2, 166, 5)])); 
  }
  sub bst__fieldZoorZonull { 
    my ($context) = @_; 
    builtin__duplicateZs($context, StyString('LITERAL', 'duplicate$', [(170, 2, 170, 12)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(170, 13, 170, 19)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      builtin__popZs($context, StyString('LITERAL', 'pop$', [(171, 6, 171, 10)])); 
      pushString($context, '', StyString('QUOTE', '', [(171, 11, 171, 13)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'pop$', [(171, 6, 171, 10)]), StyString('QUOTE', '', [(171, 11, 171, 13)]))], [(171, 4, 171, 15)])); 
    lookupFunction($context, \&builtin__skipZs, StyString('REFERENCE', 'skip$', [(172, 4, 172, 10)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(173, 2, 173, 5)])); 
  }
  sub bst__emphasizze { 
    my ($context) = @_; 
    builtin__duplicateZs($context, StyString('LITERAL', 'duplicate$', [(177, 2, 177, 12)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(177, 13, 177, 19)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      builtin__popZs($context, StyString('LITERAL', 'pop$', [(178, 6, 178, 10)])); 
      pushString($context, '', StyString('QUOTE', '', [(178, 11, 178, 13)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'pop$', [(178, 6, 178, 10)]), StyString('QUOTE', '', [(178, 11, 178, 13)]))], [(178, 4, 178, 15)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushString($context, '{\\em ', StyString('QUOTE', '{\\em ', [(179, 6, 179, 13)])); 
      builtin__swapZs($context, StyString('LITERAL', 'swap$', [(179, 14, 179, 19)])); 
      builtin__Za($context, StyString('LITERAL', '*', [(179, 20, 179, 21)])); 
      pushString($context, '}', StyString('QUOTE', '}', [(179, 22, 179, 25)])); 
      builtin__Za($context, StyString('LITERAL', '*', [(179, 26, 179, 27)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', '{\\em ', [(179, 6, 179, 13)]), StyString('LITERAL', 'swap$', [(179, 14, 179, 19)]), StyString('LITERAL', '*', [(179, 20, 179, 21)]), StyString('QUOTE', '}', [(179, 22, 179, 25)]), StyString('LITERAL', '*', [(179, 26, 179, 27)]))], [(179, 4, 179, 29)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(180, 2, 180, 5)])); 
  }
  defineGlobalInteger($context, 'nameptr', StyString('LITERAL', 'nameptr', [(183, 11, 183, 18)])); 
  defineGlobalInteger($context, 'namesleft', StyString('LITERAL', 'namesleft', [(183, 19, 183, 28)])); 
  defineGlobalInteger($context, 'numnames', StyString('LITERAL', 'numnames', [(183, 29, 183, 37)])); 
  sub bst__formatZonames { 
    my ($context) = @_; 
    lookupGlobalString($context, 's', StyString('REFERENCE', 's', [(186, 2, 186, 4)])); 
    builtin__ZcZe($context, StyString('LITERAL', ':=', [(186, 5, 186, 7)])); 
    pushInteger($context, 1, StyString('NUMBER', 1, [(187, 2, 187, 4)])); 
    lookupGlobalInteger($context, 'nameptr', StyString('REFERENCE', 'nameptr', [(187, 5, 187, 13)])); 
    builtin__ZcZe($context, StyString('LITERAL', ':=', [(187, 14, 187, 16)])); 
    pushGlobalString($context, 's', StyString('LITERAL', 's', [(188, 2, 188, 3)])); 
    builtin__numZonamesZs($context, StyString('LITERAL', 'num.names$', [(188, 4, 188, 14)])); 
    lookupGlobalInteger($context, 'numnames', StyString('REFERENCE', 'numnames', [(188, 15, 188, 24)])); 
    builtin__ZcZe($context, StyString('LITERAL', ':=', [(188, 25, 188, 27)])); 
    pushGlobalInteger($context, 'numnames', StyString('LITERAL', 'numnames', [(189, 2, 189, 10)])); 
    lookupGlobalInteger($context, 'namesleft', StyString('REFERENCE', 'namesleft', [(189, 11, 189, 21)])); 
    builtin__ZcZe($context, StyString('LITERAL', ':=', [(189, 22, 189, 24)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushGlobalInteger($context, 'namesleft', StyString('LITERAL', 'namesleft', [(190, 6, 190, 15)])); 
      pushInteger($context, 0, StyString('NUMBER', 0, [(190, 16, 190, 18)])); 
      builtin__Zg($context, StyString('LITERAL', '>', [(190, 19, 190, 20)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'namesleft', [(190, 6, 190, 15)]), StyString('NUMBER', 0, [(190, 16, 190, 18)]), StyString('LITERAL', '>', [(190, 19, 190, 20)]))], [(190, 4, 190, 22)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushGlobalString($context, 's', StyString('LITERAL', 's', [(191, 6, 191, 7)])); 
      pushGlobalInteger($context, 'nameptr', StyString('LITERAL', 'nameptr', [(191, 8, 191, 15)])); 
      pushString($context, '{ff~}{vv~}{ll}{, jj}', StyString('QUOTE', '{ff~}{vv~}{ll}{, jj}', [(191, 16, 191, 38)])); 
      builtin__formatZonameZs($context, StyString('LITERAL', 'format.name$', [(191, 39, 191, 51)])); 
      lookupGlobalString($context, 't', StyString('REFERENCE', 't', [(191, 52, 191, 54)])); 
      builtin__ZcZe($context, StyString('LITERAL', ':=', [(191, 55, 191, 57)])); 
      pushGlobalInteger($context, 'nameptr', StyString('LITERAL', 'nameptr', [(192, 6, 192, 13)])); 
      pushInteger($context, 1, StyString('NUMBER', 1, [(192, 14, 192, 16)])); 
      builtin__Zg($context, StyString('LITERAL', '>', [(192, 17, 192, 18)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushGlobalInteger($context, 'namesleft', StyString('LITERAL', 'namesleft', [(193, 10, 193, 19)])); 
        pushInteger($context, 1, StyString('NUMBER', 1, [(193, 20, 193, 22)])); 
        builtin__Zg($context, StyString('LITERAL', '>', [(193, 23, 193, 24)])); 
        pushFunction($context, sub { 
          my ($context) = @_; 
          pushString($context, ', ', StyString('QUOTE', ', ', [(194, 14, 194, 18)])); 
          builtin__Za($context, StyString('LITERAL', '*', [(194, 19, 194, 20)])); 
          pushGlobalString($context, 't', StyString('LITERAL', 't', [(194, 21, 194, 22)])); 
          builtin__Za($context, StyString('LITERAL', '*', [(194, 23, 194, 24)])); 
        }, StyString('BLOCK', [(StyString('QUOTE', ', ', [(194, 14, 194, 18)]), StyString('LITERAL', '*', [(194, 19, 194, 20)]), StyString('LITERAL', 't', [(194, 21, 194, 22)]), StyString('LITERAL', '*', [(194, 23, 194, 24)]))], [(194, 12, 194, 26)])); 
        pushFunction($context, sub { 
          my ($context) = @_; 
          pushGlobalInteger($context, 'numnames', StyString('LITERAL', 'numnames', [(195, 14, 195, 22)])); 
          pushInteger($context, 2, StyString('NUMBER', 2, [(195, 23, 195, 25)])); 
          builtin__Zg($context, StyString('LITERAL', '>', [(195, 26, 195, 27)])); 
          pushFunction($context, sub { 
            my ($context) = @_; 
            pushString($context, ',', StyString('QUOTE', ',', [(196, 18, 196, 21)])); 
            builtin__Za($context, StyString('LITERAL', '*', [(196, 22, 196, 23)])); 
          }, StyString('BLOCK', [(StyString('QUOTE', ',', [(196, 18, 196, 21)]), StyString('LITERAL', '*', [(196, 22, 196, 23)]))], [(196, 16, 196, 25)])); 
          lookupFunction($context, \&builtin__skipZs, StyString('REFERENCE', 'skip$', [(197, 16, 197, 22)])); 
          builtin__ifZs($context, StyString('LITERAL', 'if$', [(198, 14, 198, 17)])); 
          pushGlobalString($context, 't', StyString('LITERAL', 't', [(199, 14, 199, 15)])); 
          pushString($context, 'others', StyString('QUOTE', 'others', [(199, 16, 199, 24)])); 
          builtin__Ze($context, StyString('LITERAL', '=', [(199, 25, 199, 26)])); 
          pushFunction($context, sub { 
            my ($context) = @_; 
            pushString($context, ' et~al.', StyString('QUOTE', ' et~al.', [(200, 18, 200, 27)])); 
            builtin__Za($context, StyString('LITERAL', '*', [(200, 28, 200, 29)])); 
          }, StyString('BLOCK', [(StyString('QUOTE', ' et~al.', [(200, 18, 200, 27)]), StyString('LITERAL', '*', [(200, 28, 200, 29)]))], [(200, 16, 200, 31)])); 
          pushFunction($context, sub { 
            my ($context) = @_; 
            pushString($context, ' and ', StyString('QUOTE', ' and ', [(201, 18, 201, 25)])); 
            builtin__Za($context, StyString('LITERAL', '*', [(201, 26, 201, 27)])); 
            pushGlobalString($context, 't', StyString('LITERAL', 't', [(201, 28, 201, 29)])); 
            builtin__Za($context, StyString('LITERAL', '*', [(201, 30, 201, 31)])); 
          }, StyString('BLOCK', [(StyString('QUOTE', ' and ', [(201, 18, 201, 25)]), StyString('LITERAL', '*', [(201, 26, 201, 27)]), StyString('LITERAL', 't', [(201, 28, 201, 29)]), StyString('LITERAL', '*', [(201, 30, 201, 31)]))], [(201, 16, 201, 33)])); 
          builtin__ifZs($context, StyString('LITERAL', 'if$', [(202, 14, 202, 17)])); 
        }, StyString('BLOCK', [(StyString('LITERAL', 'numnames', [(195, 14, 195, 22)]), StyString('NUMBER', 2, [(195, 23, 195, 25)]), StyString('LITERAL', '>', [(195, 26, 195, 27)]), StyString('BLOCK', [(StyString('QUOTE', ',', [(196, 18, 196, 21)]), StyString('LITERAL', '*', [(196, 22, 196, 23)]))], [(196, 16, 196, 25)]), StyString('REFERENCE', 'skip$', [(197, 16, 197, 22)]), StyString('LITERAL', 'if$', [(198, 14, 198, 17)]), StyString('LITERAL', 't', [(199, 14, 199, 15)]), StyString('QUOTE', 'others', [(199, 16, 199, 24)]), StyString('LITERAL', '=', [(199, 25, 199, 26)]), StyString('BLOCK', [(StyString('QUOTE', ' et~al.', [(200, 18, 200, 27)]), StyString('LITERAL', '*', [(200, 28, 200, 29)]))], [(200, 16, 200, 31)]), StyString('BLOCK', [(StyString('QUOTE', ' and ', [(201, 18, 201, 25)]), StyString('LITERAL', '*', [(201, 26, 201, 27)]), StyString('LITERAL', 't', [(201, 28, 201, 29)]), StyString('LITERAL', '*', [(201, 30, 201, 31)]))], [(201, 16, 201, 33)]), StyString('LITERAL', 'if$', [(202, 14, 202, 17)]))], [(195, 12, 203, 13)])); 
        builtin__ifZs($context, StyString('LITERAL', 'if$', [(204, 10, 204, 13)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'namesleft', [(193, 10, 193, 19)]), StyString('NUMBER', 1, [(193, 20, 193, 22)]), StyString('LITERAL', '>', [(193, 23, 193, 24)]), StyString('BLOCK', [(StyString('QUOTE', ', ', [(194, 14, 194, 18)]), StyString('LITERAL', '*', [(194, 19, 194, 20)]), StyString('LITERAL', 't', [(194, 21, 194, 22)]), StyString('LITERAL', '*', [(194, 23, 194, 24)]))], [(194, 12, 194, 26)]), StyString('BLOCK', [(StyString('LITERAL', 'numnames', [(195, 14, 195, 22)]), StyString('NUMBER', 2, [(195, 23, 195, 25)]), StyString('LITERAL', '>', [(195, 26, 195, 27)]), StyString('BLOCK', [(StyString('QUOTE', ',', [(196, 18, 196, 21)]), StyString('LITERAL', '*', [(196, 22, 196, 23)]))], [(196, 16, 196, 25)]), StyString('REFERENCE', 'skip$', [(197, 16, 197, 22)]), StyString('LITERAL', 'if$', [(198, 14, 198, 17)]), StyString('LITERAL', 't', [(199, 14, 199, 15)]), StyString('QUOTE', 'others', [(199, 16, 199, 24)]), StyString('LITERAL', '=', [(199, 25, 199, 26)]), StyString('BLOCK', [(StyString('QUOTE', ' et~al.', [(200, 18, 200, 27)]), StyString('LITERAL', '*', [(200, 28, 200, 29)]))], [(200, 16, 200, 31)]), StyString('BLOCK', [(StyString('QUOTE', ' and ', [(201, 18, 201, 25)]), StyString('LITERAL', '*', [(201, 26, 201, 27)]), StyString('LITERAL', 't', [(201, 28, 201, 29)]), StyString('LITERAL', '*', [(201, 30, 201, 31)]))], [(201, 16, 201, 33)]), StyString('LITERAL', 'if$', [(202, 14, 202, 17)]))], [(195, 12, 203, 13)]), StyString('LITERAL', 'if$', [(204, 10, 204, 13)]))], [(193, 8, 205, 9)])); 
      lookupGlobalString($context, 't', StyString('REFERENCE', 't', [(206, 8, 206, 10)])); 
      builtin__ifZs($context, StyString('LITERAL', 'if$', [(207, 6, 207, 9)])); 
      pushGlobalInteger($context, 'nameptr', StyString('LITERAL', 'nameptr', [(208, 6, 208, 13)])); 
      pushInteger($context, 1, StyString('NUMBER', 1, [(208, 14, 208, 16)])); 
      builtin__Zp($context, StyString('LITERAL', '+', [(208, 17, 208, 18)])); 
      lookupGlobalInteger($context, 'nameptr', StyString('REFERENCE', 'nameptr', [(208, 19, 208, 27)])); 
      builtin__ZcZe($context, StyString('LITERAL', ':=', [(208, 28, 208, 30)])); 
      pushGlobalInteger($context, 'namesleft', StyString('LITERAL', 'namesleft', [(209, 6, 209, 15)])); 
      pushInteger($context, 1, StyString('NUMBER', 1, [(209, 16, 209, 18)])); 
      builtin__Zm($context, StyString('LITERAL', '-', [(209, 19, 209, 20)])); 
      lookupGlobalInteger($context, 'namesleft', StyString('REFERENCE', 'namesleft', [(209, 21, 209, 31)])); 
      builtin__ZcZe($context, StyString('LITERAL', ':=', [(209, 32, 209, 34)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 's', [(191, 6, 191, 7)]), StyString('LITERAL', 'nameptr', [(191, 8, 191, 15)]), StyString('QUOTE', '{ff~}{vv~}{ll}{, jj}', [(191, 16, 191, 38)]), StyString('LITERAL', 'format.name$', [(191, 39, 191, 51)]), StyString('REFERENCE', 't', [(191, 52, 191, 54)]), StyString('LITERAL', ':=', [(191, 55, 191, 57)]), StyString('LITERAL', 'nameptr', [(192, 6, 192, 13)]), StyString('NUMBER', 1, [(192, 14, 192, 16)]), StyString('LITERAL', '>', [(192, 17, 192, 18)]), StyString('BLOCK', [(StyString('LITERAL', 'namesleft', [(193, 10, 193, 19)]), StyString('NUMBER', 1, [(193, 20, 193, 22)]), StyString('LITERAL', '>', [(193, 23, 193, 24)]), StyString('BLOCK', [(StyString('QUOTE', ', ', [(194, 14, 194, 18)]), StyString('LITERAL', '*', [(194, 19, 194, 20)]), StyString('LITERAL', 't', [(194, 21, 194, 22)]), StyString('LITERAL', '*', [(194, 23, 194, 24)]))], [(194, 12, 194, 26)]), StyString('BLOCK', [(StyString('LITERAL', 'numnames', [(195, 14, 195, 22)]), StyString('NUMBER', 2, [(195, 23, 195, 25)]), StyString('LITERAL', '>', [(195, 26, 195, 27)]), StyString('BLOCK', [(StyString('QUOTE', ',', [(196, 18, 196, 21)]), StyString('LITERAL', '*', [(196, 22, 196, 23)]))], [(196, 16, 196, 25)]), StyString('REFERENCE', 'skip$', [(197, 16, 197, 22)]), StyString('LITERAL', 'if$', [(198, 14, 198, 17)]), StyString('LITERAL', 't', [(199, 14, 199, 15)]), StyString('QUOTE', 'others', [(199, 16, 199, 24)]), StyString('LITERAL', '=', [(199, 25, 199, 26)]), StyString('BLOCK', [(StyString('QUOTE', ' et~al.', [(200, 18, 200, 27)]), StyString('LITERAL', '*', [(200, 28, 200, 29)]))], [(200, 16, 200, 31)]), StyString('BLOCK', [(StyString('QUOTE', ' and ', [(201, 18, 201, 25)]), StyString('LITERAL', '*', [(201, 26, 201, 27)]), StyString('LITERAL', 't', [(201, 28, 201, 29)]), StyString('LITERAL', '*', [(201, 30, 201, 31)]))], [(201, 16, 201, 33)]), StyString('LITERAL', 'if$', [(202, 14, 202, 17)]))], [(195, 12, 203, 13)]), StyString('LITERAL', 'if$', [(204, 10, 204, 13)]))], [(193, 8, 205, 9)]), StyString('REFERENCE', 't', [(206, 8, 206, 10)]), StyString('LITERAL', 'if$', [(207, 6, 207, 9)]), StyString('LITERAL', 'nameptr', [(208, 6, 208, 13)]), StyString('NUMBER', 1, [(208, 14, 208, 16)]), StyString('LITERAL', '+', [(208, 17, 208, 18)]), StyString('REFERENCE', 'nameptr', [(208, 19, 208, 27)]), StyString('LITERAL', ':=', [(208, 28, 208, 30)]), StyString('LITERAL', 'namesleft', [(209, 6, 209, 15)]), StyString('NUMBER', 1, [(209, 16, 209, 18)]), StyString('LITERAL', '-', [(209, 19, 209, 20)]), StyString('REFERENCE', 'namesleft', [(209, 21, 209, 31)]), StyString('LITERAL', ':=', [(209, 32, 209, 34)]))], [(191, 4, 210, 5)])); 
    builtin__whileZs($context, StyString('LITERAL', 'while$', [(211, 2, 211, 8)])); 
  }
  sub bst__formatZoauthors { 
    my ($context) = @_; 
    pushEntryField($context, 'author', StyString('LITERAL', 'author', [(215, 2, 215, 8)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(215, 9, 215, 15)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushString($context, '', StyString('QUOTE', '', [(216, 6, 216, 8)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', '', [(216, 6, 216, 8)]))], [(216, 4, 216, 10)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushEntryField($context, 'author', StyString('LITERAL', 'author', [(217, 6, 217, 12)])); 
      bst__formatZonames($context, StyString('LITERAL', 'format.names', [(217, 13, 217, 25)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'author', [(217, 6, 217, 12)]), StyString('LITERAL', 'format.names', [(217, 13, 217, 25)]))], [(217, 4, 217, 27)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(218, 2, 218, 5)])); 
  }
  sub bst__formatZoeditors { 
    my ($context) = @_; 
    pushEntryField($context, 'editor', StyString('LITERAL', 'editor', [(222, 2, 222, 8)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(222, 9, 222, 15)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushString($context, '', StyString('QUOTE', '', [(223, 6, 223, 8)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', '', [(223, 6, 223, 8)]))], [(223, 4, 223, 10)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushEntryField($context, 'editor', StyString('LITERAL', 'editor', [(224, 6, 224, 12)])); 
      bst__formatZonames($context, StyString('LITERAL', 'format.names', [(224, 13, 224, 25)])); 
      pushEntryField($context, 'editor', StyString('LITERAL', 'editor', [(225, 6, 225, 12)])); 
      builtin__numZonamesZs($context, StyString('LITERAL', 'num.names$', [(225, 13, 225, 23)])); 
      pushInteger($context, 1, StyString('NUMBER', 1, [(225, 24, 225, 26)])); 
      builtin__Zg($context, StyString('LITERAL', '>', [(225, 27, 225, 28)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushString($context, ', editors', StyString('QUOTE', ', editors', [(226, 10, 226, 21)])); 
        builtin__Za($context, StyString('LITERAL', '*', [(226, 22, 226, 23)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', ', editors', [(226, 10, 226, 21)]), StyString('LITERAL', '*', [(226, 22, 226, 23)]))], [(226, 8, 226, 25)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushString($context, ', editor', StyString('QUOTE', ', editor', [(227, 10, 227, 20)])); 
        builtin__Za($context, StyString('LITERAL', '*', [(227, 21, 227, 22)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', ', editor', [(227, 10, 227, 20)]), StyString('LITERAL', '*', [(227, 21, 227, 22)]))], [(227, 8, 227, 24)])); 
      builtin__ifZs($context, StyString('LITERAL', 'if$', [(228, 6, 228, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'editor', [(224, 6, 224, 12)]), StyString('LITERAL', 'format.names', [(224, 13, 224, 25)]), StyString('LITERAL', 'editor', [(225, 6, 225, 12)]), StyString('LITERAL', 'num.names$', [(225, 13, 225, 23)]), StyString('NUMBER', 1, [(225, 24, 225, 26)]), StyString('LITERAL', '>', [(225, 27, 225, 28)]), StyString('BLOCK', [(StyString('QUOTE', ', editors', [(226, 10, 226, 21)]), StyString('LITERAL', '*', [(226, 22, 226, 23)]))], [(226, 8, 226, 25)]), StyString('BLOCK', [(StyString('QUOTE', ', editor', [(227, 10, 227, 20)]), StyString('LITERAL', '*', [(227, 21, 227, 22)]))], [(227, 8, 227, 24)]), StyString('LITERAL', 'if$', [(228, 6, 228, 9)]))], [(224, 4, 229, 5)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(230, 2, 230, 5)])); 
  }
  sub bst__formatZotitle { 
    my ($context) = @_; 
    pushEntryField($context, 'title', StyString('LITERAL', 'title', [(234, 2, 234, 7)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(234, 8, 234, 14)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushString($context, '', StyString('QUOTE', '', [(235, 6, 235, 8)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', '', [(235, 6, 235, 8)]))], [(235, 4, 235, 10)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushEntryField($context, 'title', StyString('LITERAL', 'title', [(236, 6, 236, 11)])); 
      pushString($context, 't', StyString('QUOTE', 't', [(236, 12, 236, 15)])); 
      builtin__changeZocaseZs($context, StyString('LITERAL', 'change.case$', [(236, 16, 236, 28)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'title', [(236, 6, 236, 11)]), StyString('QUOTE', 't', [(236, 12, 236, 15)]), StyString('LITERAL', 'change.case$', [(236, 16, 236, 28)]))], [(236, 4, 236, 30)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(237, 2, 237, 5)])); 
  }
  sub bst__nZodashify { 
    my ($context) = @_; 
    lookupGlobalString($context, 't', StyString('REFERENCE', 't', [(241, 2, 241, 4)])); 
    builtin__ZcZe($context, StyString('LITERAL', ':=', [(241, 5, 241, 7)])); 
    pushString($context, '', StyString('QUOTE', '', [(242, 2, 242, 4)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushGlobalString($context, 't', StyString('LITERAL', 't', [(243, 6, 243, 7)])); 
      builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(243, 8, 243, 14)])); 
      bst__not($context, StyString('LITERAL', 'not', [(243, 15, 243, 18)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 't', [(243, 6, 243, 7)]), StyString('LITERAL', 'empty$', [(243, 8, 243, 14)]), StyString('LITERAL', 'not', [(243, 15, 243, 18)]))], [(243, 4, 243, 20)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushGlobalString($context, 't', StyString('LITERAL', 't', [(244, 6, 244, 7)])); 
      pushInteger($context, 1, StyString('NUMBER', 1, [(244, 8, 244, 10)])); 
      pushInteger($context, 1, StyString('NUMBER', 1, [(244, 11, 244, 13)])); 
      builtin__substringZs($context, StyString('LITERAL', 'substring$', [(244, 14, 244, 24)])); 
      pushString($context, '-', StyString('QUOTE', '-', [(244, 25, 244, 28)])); 
      builtin__Ze($context, StyString('LITERAL', '=', [(244, 29, 244, 30)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushGlobalString($context, 't', StyString('LITERAL', 't', [(245, 10, 245, 11)])); 
        pushInteger($context, 1, StyString('NUMBER', 1, [(245, 12, 245, 14)])); 
        pushInteger($context, 2, StyString('NUMBER', 2, [(245, 15, 245, 17)])); 
        builtin__substringZs($context, StyString('LITERAL', 'substring$', [(245, 18, 245, 28)])); 
        pushString($context, '--', StyString('QUOTE', '--', [(245, 29, 245, 33)])); 
        builtin__Ze($context, StyString('LITERAL', '=', [(245, 34, 245, 35)])); 
        bst__not($context, StyString('LITERAL', 'not', [(245, 36, 245, 39)])); 
        pushFunction($context, sub { 
          my ($context) = @_; 
          pushString($context, '--', StyString('QUOTE', '--', [(246, 14, 246, 18)])); 
          builtin__Za($context, StyString('LITERAL', '*', [(246, 19, 246, 20)])); 
          pushGlobalString($context, 't', StyString('LITERAL', 't', [(247, 14, 247, 15)])); 
          pushInteger($context, 2, StyString('NUMBER', 2, [(247, 16, 247, 18)])); 
          pushGlobalInteger($context, 'global.max$', StyString('LITERAL', 'global.max$', [(247, 19, 247, 30)])); 
          builtin__substringZs($context, StyString('LITERAL', 'substring$', [(247, 31, 247, 41)])); 
          lookupGlobalString($context, 't', StyString('REFERENCE', 't', [(247, 42, 247, 44)])); 
          builtin__ZcZe($context, StyString('LITERAL', ':=', [(247, 45, 247, 47)])); 
        }, StyString('BLOCK', [(StyString('QUOTE', '--', [(246, 14, 246, 18)]), StyString('LITERAL', '*', [(246, 19, 246, 20)]), StyString('LITERAL', 't', [(247, 14, 247, 15)]), StyString('NUMBER', 2, [(247, 16, 247, 18)]), StyString('LITERAL', 'global.max$', [(247, 19, 247, 30)]), StyString('LITERAL', 'substring$', [(247, 31, 247, 41)]), StyString('REFERENCE', 't', [(247, 42, 247, 44)]), StyString('LITERAL', ':=', [(247, 45, 247, 47)]))], [(246, 12, 248, 13)])); 
        pushFunction($context, sub { 
          my ($context) = @_; 
          pushFunction($context, sub { 
            my ($context) = @_; 
            pushGlobalString($context, 't', StyString('LITERAL', 't', [(249, 18, 249, 19)])); 
            pushInteger($context, 1, StyString('NUMBER', 1, [(249, 20, 249, 22)])); 
            pushInteger($context, 1, StyString('NUMBER', 1, [(249, 23, 249, 25)])); 
            builtin__substringZs($context, StyString('LITERAL', 'substring$', [(249, 26, 249, 36)])); 
            pushString($context, '-', StyString('QUOTE', '-', [(249, 37, 249, 40)])); 
            builtin__Ze($context, StyString('LITERAL', '=', [(249, 41, 249, 42)])); 
          }, StyString('BLOCK', [(StyString('LITERAL', 't', [(249, 18, 249, 19)]), StyString('NUMBER', 1, [(249, 20, 249, 22)]), StyString('NUMBER', 1, [(249, 23, 249, 25)]), StyString('LITERAL', 'substring$', [(249, 26, 249, 36)]), StyString('QUOTE', '-', [(249, 37, 249, 40)]), StyString('LITERAL', '=', [(249, 41, 249, 42)]))], [(249, 16, 249, 44)])); 
          pushFunction($context, sub { 
            my ($context) = @_; 
            pushString($context, '-', StyString('QUOTE', '-', [(250, 18, 250, 21)])); 
            builtin__Za($context, StyString('LITERAL', '*', [(250, 22, 250, 23)])); 
            pushGlobalString($context, 't', StyString('LITERAL', 't', [(251, 18, 251, 19)])); 
            pushInteger($context, 2, StyString('NUMBER', 2, [(251, 20, 251, 22)])); 
            pushGlobalInteger($context, 'global.max$', StyString('LITERAL', 'global.max$', [(251, 23, 251, 34)])); 
            builtin__substringZs($context, StyString('LITERAL', 'substring$', [(251, 35, 251, 45)])); 
            lookupGlobalString($context, 't', StyString('REFERENCE', 't', [(251, 46, 251, 48)])); 
            builtin__ZcZe($context, StyString('LITERAL', ':=', [(251, 49, 251, 51)])); 
          }, StyString('BLOCK', [(StyString('QUOTE', '-', [(250, 18, 250, 21)]), StyString('LITERAL', '*', [(250, 22, 250, 23)]), StyString('LITERAL', 't', [(251, 18, 251, 19)]), StyString('NUMBER', 2, [(251, 20, 251, 22)]), StyString('LITERAL', 'global.max$', [(251, 23, 251, 34)]), StyString('LITERAL', 'substring$', [(251, 35, 251, 45)]), StyString('REFERENCE', 't', [(251, 46, 251, 48)]), StyString('LITERAL', ':=', [(251, 49, 251, 51)]))], [(250, 16, 252, 17)])); 
          builtin__whileZs($context, StyString('LITERAL', 'while$', [(253, 14, 253, 20)])); 
        }, StyString('BLOCK', [(StyString('BLOCK', [(StyString('LITERAL', 't', [(249, 18, 249, 19)]), StyString('NUMBER', 1, [(249, 20, 249, 22)]), StyString('NUMBER', 1, [(249, 23, 249, 25)]), StyString('LITERAL', 'substring$', [(249, 26, 249, 36)]), StyString('QUOTE', '-', [(249, 37, 249, 40)]), StyString('LITERAL', '=', [(249, 41, 249, 42)]))], [(249, 16, 249, 44)]), StyString('BLOCK', [(StyString('QUOTE', '-', [(250, 18, 250, 21)]), StyString('LITERAL', '*', [(250, 22, 250, 23)]), StyString('LITERAL', 't', [(251, 18, 251, 19)]), StyString('NUMBER', 2, [(251, 20, 251, 22)]), StyString('LITERAL', 'global.max$', [(251, 23, 251, 34)]), StyString('LITERAL', 'substring$', [(251, 35, 251, 45)]), StyString('REFERENCE', 't', [(251, 46, 251, 48)]), StyString('LITERAL', ':=', [(251, 49, 251, 51)]))], [(250, 16, 252, 17)]), StyString('LITERAL', 'while$', [(253, 14, 253, 20)]))], [(249, 12, 254, 13)])); 
        builtin__ifZs($context, StyString('LITERAL', 'if$', [(255, 10, 255, 13)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 't', [(245, 10, 245, 11)]), StyString('NUMBER', 1, [(245, 12, 245, 14)]), StyString('NUMBER', 2, [(245, 15, 245, 17)]), StyString('LITERAL', 'substring$', [(245, 18, 245, 28)]), StyString('QUOTE', '--', [(245, 29, 245, 33)]), StyString('LITERAL', '=', [(245, 34, 245, 35)]), StyString('LITERAL', 'not', [(245, 36, 245, 39)]), StyString('BLOCK', [(StyString('QUOTE', '--', [(246, 14, 246, 18)]), StyString('LITERAL', '*', [(246, 19, 246, 20)]), StyString('LITERAL', 't', [(247, 14, 247, 15)]), StyString('NUMBER', 2, [(247, 16, 247, 18)]), StyString('LITERAL', 'global.max$', [(247, 19, 247, 30)]), StyString('LITERAL', 'substring$', [(247, 31, 247, 41)]), StyString('REFERENCE', 't', [(247, 42, 247, 44)]), StyString('LITERAL', ':=', [(247, 45, 247, 47)]))], [(246, 12, 248, 13)]), StyString('BLOCK', [(StyString('BLOCK', [(StyString('LITERAL', 't', [(249, 18, 249, 19)]), StyString('NUMBER', 1, [(249, 20, 249, 22)]), StyString('NUMBER', 1, [(249, 23, 249, 25)]), StyString('LITERAL', 'substring$', [(249, 26, 249, 36)]), StyString('QUOTE', '-', [(249, 37, 249, 40)]), StyString('LITERAL', '=', [(249, 41, 249, 42)]))], [(249, 16, 249, 44)]), StyString('BLOCK', [(StyString('QUOTE', '-', [(250, 18, 250, 21)]), StyString('LITERAL', '*', [(250, 22, 250, 23)]), StyString('LITERAL', 't', [(251, 18, 251, 19)]), StyString('NUMBER', 2, [(251, 20, 251, 22)]), StyString('LITERAL', 'global.max$', [(251, 23, 251, 34)]), StyString('LITERAL', 'substring$', [(251, 35, 251, 45)]), StyString('REFERENCE', 't', [(251, 46, 251, 48)]), StyString('LITERAL', ':=', [(251, 49, 251, 51)]))], [(250, 16, 252, 17)]), StyString('LITERAL', 'while$', [(253, 14, 253, 20)]))], [(249, 12, 254, 13)]), StyString('LITERAL', 'if$', [(255, 10, 255, 13)]))], [(245, 8, 256, 9)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushGlobalString($context, 't', StyString('LITERAL', 't', [(257, 10, 257, 11)])); 
        pushInteger($context, 1, StyString('NUMBER', 1, [(257, 12, 257, 14)])); 
        pushInteger($context, 1, StyString('NUMBER', 1, [(257, 15, 257, 17)])); 
        builtin__substringZs($context, StyString('LITERAL', 'substring$', [(257, 18, 257, 28)])); 
        builtin__Za($context, StyString('LITERAL', '*', [(257, 29, 257, 30)])); 
        pushGlobalString($context, 't', StyString('LITERAL', 't', [(258, 10, 258, 11)])); 
        pushInteger($context, 2, StyString('NUMBER', 2, [(258, 12, 258, 14)])); 
        pushGlobalInteger($context, 'global.max$', StyString('LITERAL', 'global.max$', [(258, 15, 258, 26)])); 
        builtin__substringZs($context, StyString('LITERAL', 'substring$', [(258, 27, 258, 37)])); 
        lookupGlobalString($context, 't', StyString('REFERENCE', 't', [(258, 38, 258, 40)])); 
        builtin__ZcZe($context, StyString('LITERAL', ':=', [(258, 41, 258, 43)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 't', [(257, 10, 257, 11)]), StyString('NUMBER', 1, [(257, 12, 257, 14)]), StyString('NUMBER', 1, [(257, 15, 257, 17)]), StyString('LITERAL', 'substring$', [(257, 18, 257, 28)]), StyString('LITERAL', '*', [(257, 29, 257, 30)]), StyString('LITERAL', 't', [(258, 10, 258, 11)]), StyString('NUMBER', 2, [(258, 12, 258, 14)]), StyString('LITERAL', 'global.max$', [(258, 15, 258, 26)]), StyString('LITERAL', 'substring$', [(258, 27, 258, 37)]), StyString('REFERENCE', 't', [(258, 38, 258, 40)]), StyString('LITERAL', ':=', [(258, 41, 258, 43)]))], [(257, 8, 259, 9)])); 
      builtin__ifZs($context, StyString('LITERAL', 'if$', [(260, 6, 260, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 't', [(244, 6, 244, 7)]), StyString('NUMBER', 1, [(244, 8, 244, 10)]), StyString('NUMBER', 1, [(244, 11, 244, 13)]), StyString('LITERAL', 'substring$', [(244, 14, 244, 24)]), StyString('QUOTE', '-', [(244, 25, 244, 28)]), StyString('LITERAL', '=', [(244, 29, 244, 30)]), StyString('BLOCK', [(StyString('LITERAL', 't', [(245, 10, 245, 11)]), StyString('NUMBER', 1, [(245, 12, 245, 14)]), StyString('NUMBER', 2, [(245, 15, 245, 17)]), StyString('LITERAL', 'substring$', [(245, 18, 245, 28)]), StyString('QUOTE', '--', [(245, 29, 245, 33)]), StyString('LITERAL', '=', [(245, 34, 245, 35)]), StyString('LITERAL', 'not', [(245, 36, 245, 39)]), StyString('BLOCK', [(StyString('QUOTE', '--', [(246, 14, 246, 18)]), StyString('LITERAL', '*', [(246, 19, 246, 20)]), StyString('LITERAL', 't', [(247, 14, 247, 15)]), StyString('NUMBER', 2, [(247, 16, 247, 18)]), StyString('LITERAL', 'global.max$', [(247, 19, 247, 30)]), StyString('LITERAL', 'substring$', [(247, 31, 247, 41)]), StyString('REFERENCE', 't', [(247, 42, 247, 44)]), StyString('LITERAL', ':=', [(247, 45, 247, 47)]))], [(246, 12, 248, 13)]), StyString('BLOCK', [(StyString('BLOCK', [(StyString('LITERAL', 't', [(249, 18, 249, 19)]), StyString('NUMBER', 1, [(249, 20, 249, 22)]), StyString('NUMBER', 1, [(249, 23, 249, 25)]), StyString('LITERAL', 'substring$', [(249, 26, 249, 36)]), StyString('QUOTE', '-', [(249, 37, 249, 40)]), StyString('LITERAL', '=', [(249, 41, 249, 42)]))], [(249, 16, 249, 44)]), StyString('BLOCK', [(StyString('QUOTE', '-', [(250, 18, 250, 21)]), StyString('LITERAL', '*', [(250, 22, 250, 23)]), StyString('LITERAL', 't', [(251, 18, 251, 19)]), StyString('NUMBER', 2, [(251, 20, 251, 22)]), StyString('LITERAL', 'global.max$', [(251, 23, 251, 34)]), StyString('LITERAL', 'substring$', [(251, 35, 251, 45)]), StyString('REFERENCE', 't', [(251, 46, 251, 48)]), StyString('LITERAL', ':=', [(251, 49, 251, 51)]))], [(250, 16, 252, 17)]), StyString('LITERAL', 'while$', [(253, 14, 253, 20)]))], [(249, 12, 254, 13)]), StyString('LITERAL', 'if$', [(255, 10, 255, 13)]))], [(245, 8, 256, 9)]), StyString('BLOCK', [(StyString('LITERAL', 't', [(257, 10, 257, 11)]), StyString('NUMBER', 1, [(257, 12, 257, 14)]), StyString('NUMBER', 1, [(257, 15, 257, 17)]), StyString('LITERAL', 'substring$', [(257, 18, 257, 28)]), StyString('LITERAL', '*', [(257, 29, 257, 30)]), StyString('LITERAL', 't', [(258, 10, 258, 11)]), StyString('NUMBER', 2, [(258, 12, 258, 14)]), StyString('LITERAL', 'global.max$', [(258, 15, 258, 26)]), StyString('LITERAL', 'substring$', [(258, 27, 258, 37)]), StyString('REFERENCE', 't', [(258, 38, 258, 40)]), StyString('LITERAL', ':=', [(258, 41, 258, 43)]))], [(257, 8, 259, 9)]), StyString('LITERAL', 'if$', [(260, 6, 260, 9)]))], [(244, 4, 261, 5)])); 
    builtin__whileZs($context, StyString('LITERAL', 'while$', [(262, 2, 262, 8)])); 
  }
  sub bst__formatZodate { 
    my ($context) = @_; 
    pushEntryField($context, 'year', StyString('LITERAL', 'year', [(266, 2, 266, 6)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(266, 7, 266, 13)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushEntryField($context, 'month', StyString('LITERAL', 'month', [(267, 6, 267, 11)])); 
      builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(267, 12, 267, 18)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushString($context, '', StyString('QUOTE', '', [(268, 10, 268, 12)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', '', [(268, 10, 268, 12)]))], [(268, 8, 268, 14)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushString($context, 'there\'s a month but no year in ', StyString('QUOTE', 'there\'s a month but no year in ', [(269, 10, 269, 43)])); 
        builtin__citeZs($context, StyString('LITERAL', 'cite$', [(269, 44, 269, 49)])); 
        builtin__Za($context, StyString('LITERAL', '*', [(269, 50, 269, 51)])); 
        builtin__warningZs($context, StyString('LITERAL', 'warning$', [(269, 52, 269, 60)])); 
        pushEntryField($context, 'month', StyString('LITERAL', 'month', [(270, 10, 270, 15)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', 'there\'s a month but no year in ', [(269, 10, 269, 43)]), StyString('LITERAL', 'cite$', [(269, 44, 269, 49)]), StyString('LITERAL', '*', [(269, 50, 269, 51)]), StyString('LITERAL', 'warning$', [(269, 52, 269, 60)]), StyString('LITERAL', 'month', [(270, 10, 270, 15)]))], [(269, 8, 271, 9)])); 
      builtin__ifZs($context, StyString('LITERAL', 'if$', [(272, 6, 272, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'month', [(267, 6, 267, 11)]), StyString('LITERAL', 'empty$', [(267, 12, 267, 18)]), StyString('BLOCK', [(StyString('QUOTE', '', [(268, 10, 268, 12)]))], [(268, 8, 268, 14)]), StyString('BLOCK', [(StyString('QUOTE', 'there\'s a month but no year in ', [(269, 10, 269, 43)]), StyString('LITERAL', 'cite$', [(269, 44, 269, 49)]), StyString('LITERAL', '*', [(269, 50, 269, 51)]), StyString('LITERAL', 'warning$', [(269, 52, 269, 60)]), StyString('LITERAL', 'month', [(270, 10, 270, 15)]))], [(269, 8, 271, 9)]), StyString('LITERAL', 'if$', [(272, 6, 272, 9)]))], [(267, 4, 273, 5)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushEntryField($context, 'month', StyString('LITERAL', 'month', [(274, 6, 274, 11)])); 
      builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(274, 12, 274, 18)])); 
      lookupEntryField($context, 'year', StyString('REFERENCE', 'year', [(275, 8, 275, 13)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushEntryField($context, 'month', StyString('LITERAL', 'month', [(276, 10, 276, 15)])); 
        pushString($context, ' ', StyString('QUOTE', ' ', [(276, 16, 276, 19)])); 
        builtin__Za($context, StyString('LITERAL', '*', [(276, 20, 276, 21)])); 
        pushEntryField($context, 'year', StyString('LITERAL', 'year', [(276, 22, 276, 26)])); 
        builtin__Za($context, StyString('LITERAL', '*', [(276, 27, 276, 28)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'month', [(276, 10, 276, 15)]), StyString('QUOTE', ' ', [(276, 16, 276, 19)]), StyString('LITERAL', '*', [(276, 20, 276, 21)]), StyString('LITERAL', 'year', [(276, 22, 276, 26)]), StyString('LITERAL', '*', [(276, 27, 276, 28)]))], [(276, 8, 276, 30)])); 
      builtin__ifZs($context, StyString('LITERAL', 'if$', [(277, 6, 277, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'month', [(274, 6, 274, 11)]), StyString('LITERAL', 'empty$', [(274, 12, 274, 18)]), StyString('REFERENCE', 'year', [(275, 8, 275, 13)]), StyString('BLOCK', [(StyString('LITERAL', 'month', [(276, 10, 276, 15)]), StyString('QUOTE', ' ', [(276, 16, 276, 19)]), StyString('LITERAL', '*', [(276, 20, 276, 21)]), StyString('LITERAL', 'year', [(276, 22, 276, 26)]), StyString('LITERAL', '*', [(276, 27, 276, 28)]))], [(276, 8, 276, 30)]), StyString('LITERAL', 'if$', [(277, 6, 277, 9)]))], [(274, 4, 278, 5)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(279, 2, 279, 5)])); 
  }
  sub bst__formatZobtitle { 
    my ($context) = @_; 
    pushEntryField($context, 'title', StyString('LITERAL', 'title', [(283, 2, 283, 7)])); 
    bst__emphasizze($context, StyString('LITERAL', 'emphasize', [(283, 8, 283, 17)])); 
  }
  sub bst__tieZoorZospaceZoconnect { 
    my ($context) = @_; 
    builtin__duplicateZs($context, StyString('LITERAL', 'duplicate$', [(287, 2, 287, 12)])); 
    builtin__textZolengthZs($context, StyString('LITERAL', 'text.length$', [(287, 13, 287, 25)])); 
    pushInteger($context, 3, StyString('NUMBER', 3, [(287, 26, 287, 28)])); 
    builtin__Zl($context, StyString('LITERAL', '<', [(287, 29, 287, 30)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushString($context, '~', StyString('QUOTE', '~', [(288, 6, 288, 9)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', '~', [(288, 6, 288, 9)]))], [(288, 4, 288, 11)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushString($context, ' ', StyString('QUOTE', ' ', [(289, 6, 289, 9)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', ' ', [(289, 6, 289, 9)]))], [(289, 4, 289, 11)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(290, 2, 290, 5)])); 
    builtin__swapZs($context, StyString('LITERAL', 'swap$', [(291, 2, 291, 7)])); 
    builtin__Za($context, StyString('LITERAL', '*', [(291, 8, 291, 9)])); 
    builtin__Za($context, StyString('LITERAL', '*', [(291, 10, 291, 11)])); 
  }
  sub bst__eitherZoorZocheck { 
    my ($context) = @_; 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(295, 2, 295, 8)])); 
    lookupFunction($context, \&builtin__popZs, StyString('REFERENCE', 'pop$', [(296, 4, 296, 9)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushString($context, 'can\'t use both ', StyString('QUOTE', 'can\'t use both ', [(297, 6, 297, 23)])); 
      builtin__swapZs($context, StyString('LITERAL', 'swap$', [(297, 24, 297, 29)])); 
      builtin__Za($context, StyString('LITERAL', '*', [(297, 30, 297, 31)])); 
      pushString($context, ' fields in ', StyString('QUOTE', ' fields in ', [(297, 32, 297, 45)])); 
      builtin__Za($context, StyString('LITERAL', '*', [(297, 46, 297, 47)])); 
      builtin__citeZs($context, StyString('LITERAL', 'cite$', [(297, 48, 297, 53)])); 
      builtin__Za($context, StyString('LITERAL', '*', [(297, 54, 297, 55)])); 
      builtin__warningZs($context, StyString('LITERAL', 'warning$', [(297, 56, 297, 64)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', 'can\'t use both ', [(297, 6, 297, 23)]), StyString('LITERAL', 'swap$', [(297, 24, 297, 29)]), StyString('LITERAL', '*', [(297, 30, 297, 31)]), StyString('QUOTE', ' fields in ', [(297, 32, 297, 45)]), StyString('LITERAL', '*', [(297, 46, 297, 47)]), StyString('LITERAL', 'cite$', [(297, 48, 297, 53)]), StyString('LITERAL', '*', [(297, 54, 297, 55)]), StyString('LITERAL', 'warning$', [(297, 56, 297, 64)]))], [(297, 4, 297, 66)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(298, 2, 298, 5)])); 
  }
  sub bst__formatZobvolume { 
    my ($context) = @_; 
    pushEntryField($context, 'volume', StyString('LITERAL', 'volume', [(302, 2, 302, 8)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(302, 9, 302, 15)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushString($context, '', StyString('QUOTE', '', [(303, 6, 303, 8)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', '', [(303, 6, 303, 8)]))], [(303, 4, 303, 10)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushString($context, 'volume', StyString('QUOTE', 'volume', [(304, 6, 304, 14)])); 
      pushEntryField($context, 'volume', StyString('LITERAL', 'volume', [(304, 15, 304, 21)])); 
      bst__tieZoorZospaceZoconnect($context, StyString('LITERAL', 'tie.or.space.connect', [(304, 22, 304, 42)])); 
      pushEntryField($context, 'series', StyString('LITERAL', 'series', [(305, 6, 305, 12)])); 
      builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(305, 13, 305, 19)])); 
      lookupFunction($context, \&builtin__skipZs, StyString('REFERENCE', 'skip$', [(306, 8, 306, 14)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushString($context, ' of ', StyString('QUOTE', ' of ', [(307, 10, 307, 16)])); 
        builtin__Za($context, StyString('LITERAL', '*', [(307, 17, 307, 18)])); 
        pushEntryField($context, 'series', StyString('LITERAL', 'series', [(307, 19, 307, 25)])); 
        bst__emphasizze($context, StyString('LITERAL', 'emphasize', [(307, 26, 307, 35)])); 
        builtin__Za($context, StyString('LITERAL', '*', [(307, 36, 307, 37)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', ' of ', [(307, 10, 307, 16)]), StyString('LITERAL', '*', [(307, 17, 307, 18)]), StyString('LITERAL', 'series', [(307, 19, 307, 25)]), StyString('LITERAL', 'emphasize', [(307, 26, 307, 35)]), StyString('LITERAL', '*', [(307, 36, 307, 37)]))], [(307, 8, 307, 39)])); 
      builtin__ifZs($context, StyString('LITERAL', 'if$', [(308, 6, 308, 9)])); 
      pushString($context, 'volume and number', StyString('QUOTE', 'volume and number', [(309, 6, 309, 25)])); 
      pushEntryField($context, 'number', StyString('LITERAL', 'number', [(309, 26, 309, 32)])); 
      bst__eitherZoorZocheck($context, StyString('LITERAL', 'either.or.check', [(309, 33, 309, 48)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', 'volume', [(304, 6, 304, 14)]), StyString('LITERAL', 'volume', [(304, 15, 304, 21)]), StyString('LITERAL', 'tie.or.space.connect', [(304, 22, 304, 42)]), StyString('LITERAL', 'series', [(305, 6, 305, 12)]), StyString('LITERAL', 'empty$', [(305, 13, 305, 19)]), StyString('REFERENCE', 'skip$', [(306, 8, 306, 14)]), StyString('BLOCK', [(StyString('QUOTE', ' of ', [(307, 10, 307, 16)]), StyString('LITERAL', '*', [(307, 17, 307, 18)]), StyString('LITERAL', 'series', [(307, 19, 307, 25)]), StyString('LITERAL', 'emphasize', [(307, 26, 307, 35)]), StyString('LITERAL', '*', [(307, 36, 307, 37)]))], [(307, 8, 307, 39)]), StyString('LITERAL', 'if$', [(308, 6, 308, 9)]), StyString('QUOTE', 'volume and number', [(309, 6, 309, 25)]), StyString('LITERAL', 'number', [(309, 26, 309, 32)]), StyString('LITERAL', 'either.or.check', [(309, 33, 309, 48)]))], [(304, 4, 310, 5)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(311, 2, 311, 5)])); 
  }
  sub bst__formatZonumberZoseries { 
    my ($context) = @_; 
    pushEntryField($context, 'volume', StyString('LITERAL', 'volume', [(315, 2, 315, 8)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(315, 9, 315, 15)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushEntryField($context, 'number', StyString('LITERAL', 'number', [(316, 6, 316, 12)])); 
      builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(316, 13, 316, 19)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushEntryField($context, 'series', StyString('LITERAL', 'series', [(317, 10, 317, 16)])); 
        bst__fieldZoorZonull($context, StyString('LITERAL', 'field.or.null', [(317, 17, 317, 30)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'series', [(317, 10, 317, 16)]), StyString('LITERAL', 'field.or.null', [(317, 17, 317, 30)]))], [(317, 8, 317, 32)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushGlobalInteger($context, 'output.state', StyString('LITERAL', 'output.state', [(318, 10, 318, 22)])); 
        pushGlobalInteger($context, 'mid.sentence', StyString('LITERAL', 'mid.sentence', [(318, 23, 318, 35)])); 
        builtin__Ze($context, StyString('LITERAL', '=', [(318, 36, 318, 37)])); 
        pushFunction($context, sub { 
          my ($context) = @_; 
          pushString($context, 'number', StyString('QUOTE', 'number', [(319, 14, 319, 22)])); 
        }, StyString('BLOCK', [(StyString('QUOTE', 'number', [(319, 14, 319, 22)]))], [(319, 12, 319, 24)])); 
        pushFunction($context, sub { 
          my ($context) = @_; 
          pushString($context, 'Number', StyString('QUOTE', 'Number', [(320, 14, 320, 22)])); 
        }, StyString('BLOCK', [(StyString('QUOTE', 'Number', [(320, 14, 320, 22)]))], [(320, 12, 320, 24)])); 
        builtin__ifZs($context, StyString('LITERAL', 'if$', [(321, 10, 321, 13)])); 
        pushEntryField($context, 'number', StyString('LITERAL', 'number', [(322, 10, 322, 16)])); 
        bst__tieZoorZospaceZoconnect($context, StyString('LITERAL', 'tie.or.space.connect', [(322, 17, 322, 37)])); 
        pushEntryField($context, 'series', StyString('LITERAL', 'series', [(323, 10, 323, 16)])); 
        builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(323, 17, 323, 23)])); 
        pushFunction($context, sub { 
          my ($context) = @_; 
          pushString($context, 'there\'s a number but no series in ', StyString('QUOTE', 'there\'s a number but no series in ', [(324, 14, 324, 50)])); 
          builtin__citeZs($context, StyString('LITERAL', 'cite$', [(324, 51, 324, 56)])); 
          builtin__Za($context, StyString('LITERAL', '*', [(324, 57, 324, 58)])); 
          builtin__warningZs($context, StyString('LITERAL', 'warning$', [(324, 59, 324, 67)])); 
        }, StyString('BLOCK', [(StyString('QUOTE', 'there\'s a number but no series in ', [(324, 14, 324, 50)]), StyString('LITERAL', 'cite$', [(324, 51, 324, 56)]), StyString('LITERAL', '*', [(324, 57, 324, 58)]), StyString('LITERAL', 'warning$', [(324, 59, 324, 67)]))], [(324, 12, 324, 69)])); 
        pushFunction($context, sub { 
          my ($context) = @_; 
          pushString($context, ' in ', StyString('QUOTE', ' in ', [(325, 14, 325, 20)])); 
          builtin__Za($context, StyString('LITERAL', '*', [(325, 21, 325, 22)])); 
          pushEntryField($context, 'series', StyString('LITERAL', 'series', [(325, 23, 325, 29)])); 
          builtin__Za($context, StyString('LITERAL', '*', [(325, 30, 325, 31)])); 
        }, StyString('BLOCK', [(StyString('QUOTE', ' in ', [(325, 14, 325, 20)]), StyString('LITERAL', '*', [(325, 21, 325, 22)]), StyString('LITERAL', 'series', [(325, 23, 325, 29)]), StyString('LITERAL', '*', [(325, 30, 325, 31)]))], [(325, 12, 325, 33)])); 
        builtin__ifZs($context, StyString('LITERAL', 'if$', [(326, 10, 326, 13)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'output.state', [(318, 10, 318, 22)]), StyString('LITERAL', 'mid.sentence', [(318, 23, 318, 35)]), StyString('LITERAL', '=', [(318, 36, 318, 37)]), StyString('BLOCK', [(StyString('QUOTE', 'number', [(319, 14, 319, 22)]))], [(319, 12, 319, 24)]), StyString('BLOCK', [(StyString('QUOTE', 'Number', [(320, 14, 320, 22)]))], [(320, 12, 320, 24)]), StyString('LITERAL', 'if$', [(321, 10, 321, 13)]), StyString('LITERAL', 'number', [(322, 10, 322, 16)]), StyString('LITERAL', 'tie.or.space.connect', [(322, 17, 322, 37)]), StyString('LITERAL', 'series', [(323, 10, 323, 16)]), StyString('LITERAL', 'empty$', [(323, 17, 323, 23)]), StyString('BLOCK', [(StyString('QUOTE', 'there\'s a number but no series in ', [(324, 14, 324, 50)]), StyString('LITERAL', 'cite$', [(324, 51, 324, 56)]), StyString('LITERAL', '*', [(324, 57, 324, 58)]), StyString('LITERAL', 'warning$', [(324, 59, 324, 67)]))], [(324, 12, 324, 69)]), StyString('BLOCK', [(StyString('QUOTE', ' in ', [(325, 14, 325, 20)]), StyString('LITERAL', '*', [(325, 21, 325, 22)]), StyString('LITERAL', 'series', [(325, 23, 325, 29)]), StyString('LITERAL', '*', [(325, 30, 325, 31)]))], [(325, 12, 325, 33)]), StyString('LITERAL', 'if$', [(326, 10, 326, 13)]))], [(318, 8, 327, 9)])); 
      builtin__ifZs($context, StyString('LITERAL', 'if$', [(328, 6, 328, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'number', [(316, 6, 316, 12)]), StyString('LITERAL', 'empty$', [(316, 13, 316, 19)]), StyString('BLOCK', [(StyString('LITERAL', 'series', [(317, 10, 317, 16)]), StyString('LITERAL', 'field.or.null', [(317, 17, 317, 30)]))], [(317, 8, 317, 32)]), StyString('BLOCK', [(StyString('LITERAL', 'output.state', [(318, 10, 318, 22)]), StyString('LITERAL', 'mid.sentence', [(318, 23, 318, 35)]), StyString('LITERAL', '=', [(318, 36, 318, 37)]), StyString('BLOCK', [(StyString('QUOTE', 'number', [(319, 14, 319, 22)]))], [(319, 12, 319, 24)]), StyString('BLOCK', [(StyString('QUOTE', 'Number', [(320, 14, 320, 22)]))], [(320, 12, 320, 24)]), StyString('LITERAL', 'if$', [(321, 10, 321, 13)]), StyString('LITERAL', 'number', [(322, 10, 322, 16)]), StyString('LITERAL', 'tie.or.space.connect', [(322, 17, 322, 37)]), StyString('LITERAL', 'series', [(323, 10, 323, 16)]), StyString('LITERAL', 'empty$', [(323, 17, 323, 23)]), StyString('BLOCK', [(StyString('QUOTE', 'there\'s a number but no series in ', [(324, 14, 324, 50)]), StyString('LITERAL', 'cite$', [(324, 51, 324, 56)]), StyString('LITERAL', '*', [(324, 57, 324, 58)]), StyString('LITERAL', 'warning$', [(324, 59, 324, 67)]))], [(324, 12, 324, 69)]), StyString('BLOCK', [(StyString('QUOTE', ' in ', [(325, 14, 325, 20)]), StyString('LITERAL', '*', [(325, 21, 325, 22)]), StyString('LITERAL', 'series', [(325, 23, 325, 29)]), StyString('LITERAL', '*', [(325, 30, 325, 31)]))], [(325, 12, 325, 33)]), StyString('LITERAL', 'if$', [(326, 10, 326, 13)]))], [(318, 8, 327, 9)]), StyString('LITERAL', 'if$', [(328, 6, 328, 9)]))], [(316, 4, 329, 5)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushString($context, '', StyString('QUOTE', '', [(330, 6, 330, 8)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', '', [(330, 6, 330, 8)]))], [(330, 4, 330, 10)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(331, 2, 331, 5)])); 
  }
  sub bst__formatZoedition { 
    my ($context) = @_; 
    pushEntryField($context, 'edition', StyString('LITERAL', 'edition', [(335, 2, 335, 9)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(335, 10, 335, 16)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushString($context, '', StyString('QUOTE', '', [(336, 6, 336, 8)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', '', [(336, 6, 336, 8)]))], [(336, 4, 336, 10)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushGlobalInteger($context, 'output.state', StyString('LITERAL', 'output.state', [(337, 6, 337, 18)])); 
      pushGlobalInteger($context, 'mid.sentence', StyString('LITERAL', 'mid.sentence', [(337, 19, 337, 31)])); 
      builtin__Ze($context, StyString('LITERAL', '=', [(337, 32, 337, 33)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushEntryField($context, 'edition', StyString('LITERAL', 'edition', [(338, 10, 338, 17)])); 
        pushString($context, 'l', StyString('QUOTE', 'l', [(338, 18, 338, 21)])); 
        builtin__changeZocaseZs($context, StyString('LITERAL', 'change.case$', [(338, 22, 338, 34)])); 
        pushString($context, ' edition', StyString('QUOTE', ' edition', [(338, 35, 338, 45)])); 
        builtin__Za($context, StyString('LITERAL', '*', [(338, 46, 338, 47)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'edition', [(338, 10, 338, 17)]), StyString('QUOTE', 'l', [(338, 18, 338, 21)]), StyString('LITERAL', 'change.case$', [(338, 22, 338, 34)]), StyString('QUOTE', ' edition', [(338, 35, 338, 45)]), StyString('LITERAL', '*', [(338, 46, 338, 47)]))], [(338, 8, 338, 49)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushEntryField($context, 'edition', StyString('LITERAL', 'edition', [(339, 10, 339, 17)])); 
        pushString($context, 't', StyString('QUOTE', 't', [(339, 18, 339, 21)])); 
        builtin__changeZocaseZs($context, StyString('LITERAL', 'change.case$', [(339, 22, 339, 34)])); 
        pushString($context, ' edition', StyString('QUOTE', ' edition', [(339, 35, 339, 45)])); 
        builtin__Za($context, StyString('LITERAL', '*', [(339, 46, 339, 47)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'edition', [(339, 10, 339, 17)]), StyString('QUOTE', 't', [(339, 18, 339, 21)]), StyString('LITERAL', 'change.case$', [(339, 22, 339, 34)]), StyString('QUOTE', ' edition', [(339, 35, 339, 45)]), StyString('LITERAL', '*', [(339, 46, 339, 47)]))], [(339, 8, 339, 49)])); 
      builtin__ifZs($context, StyString('LITERAL', 'if$', [(340, 6, 340, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'output.state', [(337, 6, 337, 18)]), StyString('LITERAL', 'mid.sentence', [(337, 19, 337, 31)]), StyString('LITERAL', '=', [(337, 32, 337, 33)]), StyString('BLOCK', [(StyString('LITERAL', 'edition', [(338, 10, 338, 17)]), StyString('QUOTE', 'l', [(338, 18, 338, 21)]), StyString('LITERAL', 'change.case$', [(338, 22, 338, 34)]), StyString('QUOTE', ' edition', [(338, 35, 338, 45)]), StyString('LITERAL', '*', [(338, 46, 338, 47)]))], [(338, 8, 338, 49)]), StyString('BLOCK', [(StyString('LITERAL', 'edition', [(339, 10, 339, 17)]), StyString('QUOTE', 't', [(339, 18, 339, 21)]), StyString('LITERAL', 'change.case$', [(339, 22, 339, 34)]), StyString('QUOTE', ' edition', [(339, 35, 339, 45)]), StyString('LITERAL', '*', [(339, 46, 339, 47)]))], [(339, 8, 339, 49)]), StyString('LITERAL', 'if$', [(340, 6, 340, 9)]))], [(337, 4, 341, 5)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(342, 2, 342, 5)])); 
  }
  defineGlobalInteger($context, 'multiresult', StyString('LITERAL', 'multiresult', [(345, 11, 345, 22)])); 
  sub bst__multiZopageZocheck { 
    my ($context) = @_; 
    lookupGlobalString($context, 't', StyString('REFERENCE', 't', [(348, 2, 348, 4)])); 
    builtin__ZcZe($context, StyString('LITERAL', ':=', [(348, 5, 348, 7)])); 
    pushInteger($context, 0, StyString('NUMBER', 0, [(349, 2, 349, 4)])); 
    lookupGlobalInteger($context, 'multiresult', StyString('REFERENCE', 'multiresult', [(349, 5, 349, 17)])); 
    builtin__ZcZe($context, StyString('LITERAL', ':=', [(349, 18, 349, 20)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushGlobalInteger($context, 'multiresult', StyString('LITERAL', 'multiresult', [(350, 6, 350, 17)])); 
      bst__not($context, StyString('LITERAL', 'not', [(350, 18, 350, 21)])); 
      pushGlobalString($context, 't', StyString('LITERAL', 't', [(351, 6, 351, 7)])); 
      builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(351, 8, 351, 14)])); 
      bst__not($context, StyString('LITERAL', 'not', [(351, 15, 351, 18)])); 
      bst__and($context, StyString('LITERAL', 'and', [(352, 6, 352, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'multiresult', [(350, 6, 350, 17)]), StyString('LITERAL', 'not', [(350, 18, 350, 21)]), StyString('LITERAL', 't', [(351, 6, 351, 7)]), StyString('LITERAL', 'empty$', [(351, 8, 351, 14)]), StyString('LITERAL', 'not', [(351, 15, 351, 18)]), StyString('LITERAL', 'and', [(352, 6, 352, 9)]))], [(350, 4, 353, 5)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushGlobalString($context, 't', StyString('LITERAL', 't', [(354, 6, 354, 7)])); 
      pushInteger($context, 1, StyString('NUMBER', 1, [(354, 8, 354, 10)])); 
      pushInteger($context, 1, StyString('NUMBER', 1, [(354, 11, 354, 13)])); 
      builtin__substringZs($context, StyString('LITERAL', 'substring$', [(354, 14, 354, 24)])); 
      builtin__duplicateZs($context, StyString('LITERAL', 'duplicate$', [(355, 6, 355, 16)])); 
      pushString($context, '-', StyString('QUOTE', '-', [(355, 17, 355, 20)])); 
      builtin__Ze($context, StyString('LITERAL', '=', [(355, 21, 355, 22)])); 
      builtin__swapZs($context, StyString('LITERAL', 'swap$', [(356, 6, 356, 11)])); 
      builtin__duplicateZs($context, StyString('LITERAL', 'duplicate$', [(356, 12, 356, 22)])); 
      pushString($context, ',', StyString('QUOTE', ',', [(356, 23, 356, 26)])); 
      builtin__Ze($context, StyString('LITERAL', '=', [(356, 27, 356, 28)])); 
      builtin__swapZs($context, StyString('LITERAL', 'swap$', [(357, 6, 357, 11)])); 
      pushString($context, '+', StyString('QUOTE', '+', [(357, 12, 357, 15)])); 
      builtin__Ze($context, StyString('LITERAL', '=', [(357, 16, 357, 17)])); 
      bst__or($context, StyString('LITERAL', 'or', [(358, 6, 358, 8)])); 
      bst__or($context, StyString('LITERAL', 'or', [(358, 9, 358, 11)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushInteger($context, 1, StyString('NUMBER', 1, [(359, 10, 359, 12)])); 
        lookupGlobalInteger($context, 'multiresult', StyString('REFERENCE', 'multiresult', [(359, 13, 359, 25)])); 
        builtin__ZcZe($context, StyString('LITERAL', ':=', [(359, 26, 359, 28)])); 
      }, StyString('BLOCK', [(StyString('NUMBER', 1, [(359, 10, 359, 12)]), StyString('REFERENCE', 'multiresult', [(359, 13, 359, 25)]), StyString('LITERAL', ':=', [(359, 26, 359, 28)]))], [(359, 8, 359, 30)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushGlobalString($context, 't', StyString('LITERAL', 't', [(360, 10, 360, 11)])); 
        pushInteger($context, 2, StyString('NUMBER', 2, [(360, 12, 360, 14)])); 
        pushGlobalInteger($context, 'global.max$', StyString('LITERAL', 'global.max$', [(360, 15, 360, 26)])); 
        builtin__substringZs($context, StyString('LITERAL', 'substring$', [(360, 27, 360, 37)])); 
        lookupGlobalString($context, 't', StyString('REFERENCE', 't', [(360, 38, 360, 40)])); 
        builtin__ZcZe($context, StyString('LITERAL', ':=', [(360, 41, 360, 43)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 't', [(360, 10, 360, 11)]), StyString('NUMBER', 2, [(360, 12, 360, 14)]), StyString('LITERAL', 'global.max$', [(360, 15, 360, 26)]), StyString('LITERAL', 'substring$', [(360, 27, 360, 37)]), StyString('REFERENCE', 't', [(360, 38, 360, 40)]), StyString('LITERAL', ':=', [(360, 41, 360, 43)]))], [(360, 8, 360, 45)])); 
      builtin__ifZs($context, StyString('LITERAL', 'if$', [(361, 6, 361, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 't', [(354, 6, 354, 7)]), StyString('NUMBER', 1, [(354, 8, 354, 10)]), StyString('NUMBER', 1, [(354, 11, 354, 13)]), StyString('LITERAL', 'substring$', [(354, 14, 354, 24)]), StyString('LITERAL', 'duplicate$', [(355, 6, 355, 16)]), StyString('QUOTE', '-', [(355, 17, 355, 20)]), StyString('LITERAL', '=', [(355, 21, 355, 22)]), StyString('LITERAL', 'swap$', [(356, 6, 356, 11)]), StyString('LITERAL', 'duplicate$', [(356, 12, 356, 22)]), StyString('QUOTE', ',', [(356, 23, 356, 26)]), StyString('LITERAL', '=', [(356, 27, 356, 28)]), StyString('LITERAL', 'swap$', [(357, 6, 357, 11)]), StyString('QUOTE', '+', [(357, 12, 357, 15)]), StyString('LITERAL', '=', [(357, 16, 357, 17)]), StyString('LITERAL', 'or', [(358, 6, 358, 8)]), StyString('LITERAL', 'or', [(358, 9, 358, 11)]), StyString('BLOCK', [(StyString('NUMBER', 1, [(359, 10, 359, 12)]), StyString('REFERENCE', 'multiresult', [(359, 13, 359, 25)]), StyString('LITERAL', ':=', [(359, 26, 359, 28)]))], [(359, 8, 359, 30)]), StyString('BLOCK', [(StyString('LITERAL', 't', [(360, 10, 360, 11)]), StyString('NUMBER', 2, [(360, 12, 360, 14)]), StyString('LITERAL', 'global.max$', [(360, 15, 360, 26)]), StyString('LITERAL', 'substring$', [(360, 27, 360, 37)]), StyString('REFERENCE', 't', [(360, 38, 360, 40)]), StyString('LITERAL', ':=', [(360, 41, 360, 43)]))], [(360, 8, 360, 45)]), StyString('LITERAL', 'if$', [(361, 6, 361, 9)]))], [(354, 4, 362, 5)])); 
    builtin__whileZs($context, StyString('LITERAL', 'while$', [(363, 2, 363, 8)])); 
    pushGlobalInteger($context, 'multiresult', StyString('LITERAL', 'multiresult', [(364, 2, 364, 13)])); 
  }
  sub bst__formatZopages { 
    my ($context) = @_; 
    pushEntryField($context, 'pages', StyString('LITERAL', 'pages', [(368, 2, 368, 7)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(368, 8, 368, 14)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushString($context, '', StyString('QUOTE', '', [(369, 6, 369, 8)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', '', [(369, 6, 369, 8)]))], [(369, 4, 369, 10)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushEntryField($context, 'pages', StyString('LITERAL', 'pages', [(370, 6, 370, 11)])); 
      bst__multiZopageZocheck($context, StyString('LITERAL', 'multi.page.check', [(370, 12, 370, 28)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushString($context, 'pages', StyString('QUOTE', 'pages', [(371, 10, 371, 17)])); 
        pushEntryField($context, 'pages', StyString('LITERAL', 'pages', [(371, 18, 371, 23)])); 
        bst__nZodashify($context, StyString('LITERAL', 'n.dashify', [(371, 24, 371, 33)])); 
        bst__tieZoorZospaceZoconnect($context, StyString('LITERAL', 'tie.or.space.connect', [(371, 34, 371, 54)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', 'pages', [(371, 10, 371, 17)]), StyString('LITERAL', 'pages', [(371, 18, 371, 23)]), StyString('LITERAL', 'n.dashify', [(371, 24, 371, 33)]), StyString('LITERAL', 'tie.or.space.connect', [(371, 34, 371, 54)]))], [(371, 8, 371, 56)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushString($context, 'page', StyString('QUOTE', 'page', [(372, 10, 372, 16)])); 
        pushEntryField($context, 'pages', StyString('LITERAL', 'pages', [(372, 17, 372, 22)])); 
        bst__tieZoorZospaceZoconnect($context, StyString('LITERAL', 'tie.or.space.connect', [(372, 23, 372, 43)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', 'page', [(372, 10, 372, 16)]), StyString('LITERAL', 'pages', [(372, 17, 372, 22)]), StyString('LITERAL', 'tie.or.space.connect', [(372, 23, 372, 43)]))], [(372, 8, 372, 45)])); 
      builtin__ifZs($context, StyString('LITERAL', 'if$', [(373, 6, 373, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'pages', [(370, 6, 370, 11)]), StyString('LITERAL', 'multi.page.check', [(370, 12, 370, 28)]), StyString('BLOCK', [(StyString('QUOTE', 'pages', [(371, 10, 371, 17)]), StyString('LITERAL', 'pages', [(371, 18, 371, 23)]), StyString('LITERAL', 'n.dashify', [(371, 24, 371, 33)]), StyString('LITERAL', 'tie.or.space.connect', [(371, 34, 371, 54)]))], [(371, 8, 371, 56)]), StyString('BLOCK', [(StyString('QUOTE', 'page', [(372, 10, 372, 16)]), StyString('LITERAL', 'pages', [(372, 17, 372, 22)]), StyString('LITERAL', 'tie.or.space.connect', [(372, 23, 372, 43)]))], [(372, 8, 372, 45)]), StyString('LITERAL', 'if$', [(373, 6, 373, 9)]))], [(370, 4, 374, 5)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(375, 2, 375, 5)])); 
  }
  sub bst__formatZovolZonumZopages { 
    my ($context) = @_; 
    pushEntryField($context, 'volume', StyString('LITERAL', 'volume', [(379, 2, 379, 8)])); 
    bst__fieldZoorZonull($context, StyString('LITERAL', 'field.or.null', [(379, 9, 379, 22)])); 
    pushEntryField($context, 'number', StyString('LITERAL', 'number', [(380, 2, 380, 8)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(380, 9, 380, 15)])); 
    lookupFunction($context, \&builtin__skipZs, StyString('REFERENCE', 'skip$', [(381, 4, 381, 10)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushString($context, '(', StyString('QUOTE', '(', [(382, 6, 382, 9)])); 
      pushEntryField($context, 'number', StyString('LITERAL', 'number', [(382, 10, 382, 16)])); 
      builtin__Za($context, StyString('LITERAL', '*', [(382, 17, 382, 18)])); 
      pushString($context, ')', StyString('QUOTE', ')', [(382, 19, 382, 22)])); 
      builtin__Za($context, StyString('LITERAL', '*', [(382, 23, 382, 24)])); 
      builtin__Za($context, StyString('LITERAL', '*', [(382, 25, 382, 26)])); 
      pushEntryField($context, 'volume', StyString('LITERAL', 'volume', [(383, 6, 383, 12)])); 
      builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(383, 13, 383, 19)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushString($context, 'there\'s a number but no volume in ', StyString('QUOTE', 'there\'s a number but no volume in ', [(384, 10, 384, 46)])); 
        builtin__citeZs($context, StyString('LITERAL', 'cite$', [(384, 47, 384, 52)])); 
        builtin__Za($context, StyString('LITERAL', '*', [(384, 53, 384, 54)])); 
        builtin__warningZs($context, StyString('LITERAL', 'warning$', [(384, 55, 384, 63)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', 'there\'s a number but no volume in ', [(384, 10, 384, 46)]), StyString('LITERAL', 'cite$', [(384, 47, 384, 52)]), StyString('LITERAL', '*', [(384, 53, 384, 54)]), StyString('LITERAL', 'warning$', [(384, 55, 384, 63)]))], [(384, 8, 384, 65)])); 
      lookupFunction($context, \&builtin__skipZs, StyString('REFERENCE', 'skip$', [(385, 8, 385, 14)])); 
      builtin__ifZs($context, StyString('LITERAL', 'if$', [(386, 6, 386, 9)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', '(', [(382, 6, 382, 9)]), StyString('LITERAL', 'number', [(382, 10, 382, 16)]), StyString('LITERAL', '*', [(382, 17, 382, 18)]), StyString('QUOTE', ')', [(382, 19, 382, 22)]), StyString('LITERAL', '*', [(382, 23, 382, 24)]), StyString('LITERAL', '*', [(382, 25, 382, 26)]), StyString('LITERAL', 'volume', [(383, 6, 383, 12)]), StyString('LITERAL', 'empty$', [(383, 13, 383, 19)]), StyString('BLOCK', [(StyString('QUOTE', 'there\'s a number but no volume in ', [(384, 10, 384, 46)]), StyString('LITERAL', 'cite$', [(384, 47, 384, 52)]), StyString('LITERAL', '*', [(384, 53, 384, 54)]), StyString('LITERAL', 'warning$', [(384, 55, 384, 63)]))], [(384, 8, 384, 65)]), StyString('REFERENCE', 'skip$', [(385, 8, 385, 14)]), StyString('LITERAL', 'if$', [(386, 6, 386, 9)]))], [(382, 4, 387, 5)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(388, 2, 388, 5)])); 
    pushEntryField($context, 'pages', StyString('LITERAL', 'pages', [(389, 2, 389, 7)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(389, 8, 389, 14)])); 
    lookupFunction($context, \&builtin__skipZs, StyString('REFERENCE', 'skip$', [(390, 4, 390, 10)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      builtin__duplicateZs($context, StyString('LITERAL', 'duplicate$', [(391, 6, 391, 16)])); 
      builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(391, 17, 391, 23)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        builtin__popZs($context, StyString('LITERAL', 'pop$', [(392, 10, 392, 14)])); 
        bst__formatZopages($context, StyString('LITERAL', 'format.pages', [(392, 15, 392, 27)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'pop$', [(392, 10, 392, 14)]), StyString('LITERAL', 'format.pages', [(392, 15, 392, 27)]))], [(392, 8, 392, 29)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushString($context, ':', StyString('QUOTE', ':', [(393, 10, 393, 13)])); 
        builtin__Za($context, StyString('LITERAL', '*', [(393, 14, 393, 15)])); 
        pushEntryField($context, 'pages', StyString('LITERAL', 'pages', [(393, 16, 393, 21)])); 
        bst__nZodashify($context, StyString('LITERAL', 'n.dashify', [(393, 22, 393, 31)])); 
        builtin__Za($context, StyString('LITERAL', '*', [(393, 32, 393, 33)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', ':', [(393, 10, 393, 13)]), StyString('LITERAL', '*', [(393, 14, 393, 15)]), StyString('LITERAL', 'pages', [(393, 16, 393, 21)]), StyString('LITERAL', 'n.dashify', [(393, 22, 393, 31)]), StyString('LITERAL', '*', [(393, 32, 393, 33)]))], [(393, 8, 393, 35)])); 
      builtin__ifZs($context, StyString('LITERAL', 'if$', [(394, 6, 394, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'duplicate$', [(391, 6, 391, 16)]), StyString('LITERAL', 'empty$', [(391, 17, 391, 23)]), StyString('BLOCK', [(StyString('LITERAL', 'pop$', [(392, 10, 392, 14)]), StyString('LITERAL', 'format.pages', [(392, 15, 392, 27)]))], [(392, 8, 392, 29)]), StyString('BLOCK', [(StyString('QUOTE', ':', [(393, 10, 393, 13)]), StyString('LITERAL', '*', [(393, 14, 393, 15)]), StyString('LITERAL', 'pages', [(393, 16, 393, 21)]), StyString('LITERAL', 'n.dashify', [(393, 22, 393, 31)]), StyString('LITERAL', '*', [(393, 32, 393, 33)]))], [(393, 8, 393, 35)]), StyString('LITERAL', 'if$', [(394, 6, 394, 9)]))], [(391, 4, 395, 5)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(396, 2, 396, 5)])); 
  }
  sub bst__formatZochapterZopages { 
    my ($context) = @_; 
    pushEntryField($context, 'chapter', StyString('LITERAL', 'chapter', [(400, 2, 400, 9)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(400, 10, 400, 16)])); 
    lookupFunction($context, \&bst__formatZopages, StyString('REFERENCE', 'format.pages', [(401, 4, 401, 17)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushEntryField($context, 'type', StyString('LITERAL', 'type', [(402, 6, 402, 10)])); 
      builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(402, 11, 402, 17)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushString($context, 'chapter', StyString('QUOTE', 'chapter', [(403, 10, 403, 19)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', 'chapter', [(403, 10, 403, 19)]))], [(403, 8, 403, 21)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushEntryField($context, 'type', StyString('LITERAL', 'type', [(404, 10, 404, 14)])); 
        pushString($context, 'l', StyString('QUOTE', 'l', [(404, 15, 404, 18)])); 
        builtin__changeZocaseZs($context, StyString('LITERAL', 'change.case$', [(404, 19, 404, 31)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'type', [(404, 10, 404, 14)]), StyString('QUOTE', 'l', [(404, 15, 404, 18)]), StyString('LITERAL', 'change.case$', [(404, 19, 404, 31)]))], [(404, 8, 404, 33)])); 
      builtin__ifZs($context, StyString('LITERAL', 'if$', [(405, 6, 405, 9)])); 
      pushEntryField($context, 'chapter', StyString('LITERAL', 'chapter', [(406, 6, 406, 13)])); 
      bst__tieZoorZospaceZoconnect($context, StyString('LITERAL', 'tie.or.space.connect', [(406, 14, 406, 34)])); 
      pushEntryField($context, 'pages', StyString('LITERAL', 'pages', [(407, 6, 407, 11)])); 
      builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(407, 12, 407, 18)])); 
      lookupFunction($context, \&builtin__skipZs, StyString('REFERENCE', 'skip$', [(408, 8, 408, 14)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushString($context, ', ', StyString('QUOTE', ', ', [(409, 10, 409, 14)])); 
        builtin__Za($context, StyString('LITERAL', '*', [(409, 15, 409, 16)])); 
        bst__formatZopages($context, StyString('LITERAL', 'format.pages', [(409, 17, 409, 29)])); 
        builtin__Za($context, StyString('LITERAL', '*', [(409, 30, 409, 31)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', ', ', [(409, 10, 409, 14)]), StyString('LITERAL', '*', [(409, 15, 409, 16)]), StyString('LITERAL', 'format.pages', [(409, 17, 409, 29)]), StyString('LITERAL', '*', [(409, 30, 409, 31)]))], [(409, 8, 409, 33)])); 
      builtin__ifZs($context, StyString('LITERAL', 'if$', [(410, 6, 410, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'type', [(402, 6, 402, 10)]), StyString('LITERAL', 'empty$', [(402, 11, 402, 17)]), StyString('BLOCK', [(StyString('QUOTE', 'chapter', [(403, 10, 403, 19)]))], [(403, 8, 403, 21)]), StyString('BLOCK', [(StyString('LITERAL', 'type', [(404, 10, 404, 14)]), StyString('QUOTE', 'l', [(404, 15, 404, 18)]), StyString('LITERAL', 'change.case$', [(404, 19, 404, 31)]))], [(404, 8, 404, 33)]), StyString('LITERAL', 'if$', [(405, 6, 405, 9)]), StyString('LITERAL', 'chapter', [(406, 6, 406, 13)]), StyString('LITERAL', 'tie.or.space.connect', [(406, 14, 406, 34)]), StyString('LITERAL', 'pages', [(407, 6, 407, 11)]), StyString('LITERAL', 'empty$', [(407, 12, 407, 18)]), StyString('REFERENCE', 'skip$', [(408, 8, 408, 14)]), StyString('BLOCK', [(StyString('QUOTE', ', ', [(409, 10, 409, 14)]), StyString('LITERAL', '*', [(409, 15, 409, 16)]), StyString('LITERAL', 'format.pages', [(409, 17, 409, 29)]), StyString('LITERAL', '*', [(409, 30, 409, 31)]))], [(409, 8, 409, 33)]), StyString('LITERAL', 'if$', [(410, 6, 410, 9)]))], [(402, 4, 411, 5)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(412, 2, 412, 5)])); 
  }
  sub bst__formatZoinZoedZobooktitle { 
    my ($context) = @_; 
    pushEntryField($context, 'booktitle', StyString('LITERAL', 'booktitle', [(416, 2, 416, 11)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(416, 12, 416, 18)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushString($context, '', StyString('QUOTE', '', [(417, 6, 417, 8)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', '', [(417, 6, 417, 8)]))], [(417, 4, 417, 10)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushEntryField($context, 'editor', StyString('LITERAL', 'editor', [(418, 6, 418, 12)])); 
      builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(418, 13, 418, 19)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushString($context, 'In ', StyString('QUOTE', 'In ', [(419, 10, 419, 15)])); 
        pushEntryField($context, 'booktitle', StyString('LITERAL', 'booktitle', [(419, 16, 419, 25)])); 
        bst__emphasizze($context, StyString('LITERAL', 'emphasize', [(419, 26, 419, 35)])); 
        builtin__Za($context, StyString('LITERAL', '*', [(419, 36, 419, 37)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', 'In ', [(419, 10, 419, 15)]), StyString('LITERAL', 'booktitle', [(419, 16, 419, 25)]), StyString('LITERAL', 'emphasize', [(419, 26, 419, 35)]), StyString('LITERAL', '*', [(419, 36, 419, 37)]))], [(419, 8, 419, 39)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushString($context, 'In ', StyString('QUOTE', 'In ', [(420, 10, 420, 15)])); 
        bst__formatZoeditors($context, StyString('LITERAL', 'format.editors', [(420, 16, 420, 30)])); 
        builtin__Za($context, StyString('LITERAL', '*', [(420, 31, 420, 32)])); 
        pushString($context, ', ', StyString('QUOTE', ', ', [(420, 33, 420, 37)])); 
        builtin__Za($context, StyString('LITERAL', '*', [(420, 38, 420, 39)])); 
        pushEntryField($context, 'booktitle', StyString('LITERAL', 'booktitle', [(420, 40, 420, 49)])); 
        bst__emphasizze($context, StyString('LITERAL', 'emphasize', [(420, 50, 420, 59)])); 
        builtin__Za($context, StyString('LITERAL', '*', [(420, 60, 420, 61)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', 'In ', [(420, 10, 420, 15)]), StyString('LITERAL', 'format.editors', [(420, 16, 420, 30)]), StyString('LITERAL', '*', [(420, 31, 420, 32)]), StyString('QUOTE', ', ', [(420, 33, 420, 37)]), StyString('LITERAL', '*', [(420, 38, 420, 39)]), StyString('LITERAL', 'booktitle', [(420, 40, 420, 49)]), StyString('LITERAL', 'emphasize', [(420, 50, 420, 59)]), StyString('LITERAL', '*', [(420, 60, 420, 61)]))], [(420, 8, 420, 63)])); 
      builtin__ifZs($context, StyString('LITERAL', 'if$', [(421, 6, 421, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'editor', [(418, 6, 418, 12)]), StyString('LITERAL', 'empty$', [(418, 13, 418, 19)]), StyString('BLOCK', [(StyString('QUOTE', 'In ', [(419, 10, 419, 15)]), StyString('LITERAL', 'booktitle', [(419, 16, 419, 25)]), StyString('LITERAL', 'emphasize', [(419, 26, 419, 35)]), StyString('LITERAL', '*', [(419, 36, 419, 37)]))], [(419, 8, 419, 39)]), StyString('BLOCK', [(StyString('QUOTE', 'In ', [(420, 10, 420, 15)]), StyString('LITERAL', 'format.editors', [(420, 16, 420, 30)]), StyString('LITERAL', '*', [(420, 31, 420, 32)]), StyString('QUOTE', ', ', [(420, 33, 420, 37)]), StyString('LITERAL', '*', [(420, 38, 420, 39)]), StyString('LITERAL', 'booktitle', [(420, 40, 420, 49)]), StyString('LITERAL', 'emphasize', [(420, 50, 420, 59)]), StyString('LITERAL', '*', [(420, 60, 420, 61)]))], [(420, 8, 420, 63)]), StyString('LITERAL', 'if$', [(421, 6, 421, 9)]))], [(418, 4, 422, 5)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(423, 2, 423, 5)])); 
  }
  sub bst__emptyZomiscZocheck { 
    my ($context) = @_; 
    pushEntryField($context, 'author', StyString('LITERAL', 'author', [(427, 2, 427, 8)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(427, 9, 427, 15)])); 
    pushEntryField($context, 'title', StyString('LITERAL', 'title', [(427, 16, 427, 21)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(427, 22, 427, 28)])); 
    pushEntryField($context, 'howpublished', StyString('LITERAL', 'howpublished', [(427, 29, 427, 41)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(427, 42, 427, 48)])); 
    pushEntryField($context, 'month', StyString('LITERAL', 'month', [(428, 2, 428, 7)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(428, 8, 428, 14)])); 
    pushEntryField($context, 'year', StyString('LITERAL', 'year', [(428, 15, 428, 19)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(428, 20, 428, 26)])); 
    pushEntryField($context, 'note', StyString('LITERAL', 'note', [(428, 27, 428, 31)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(428, 32, 428, 38)])); 
    bst__and($context, StyString('LITERAL', 'and', [(429, 2, 429, 5)])); 
    bst__and($context, StyString('LITERAL', 'and', [(429, 6, 429, 9)])); 
    bst__and($context, StyString('LITERAL', 'and', [(429, 10, 429, 13)])); 
    bst__and($context, StyString('LITERAL', 'and', [(429, 14, 429, 17)])); 
    bst__and($context, StyString('LITERAL', 'and', [(429, 18, 429, 21)])); 
    pushEntryField($context, 'key', StyString('LITERAL', 'key', [(430, 2, 430, 5)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(430, 6, 430, 12)])); 
    bst__not($context, StyString('LITERAL', 'not', [(430, 13, 430, 16)])); 
    bst__and($context, StyString('LITERAL', 'and', [(430, 17, 430, 20)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushString($context, 'all relevant fields are empty in ', StyString('QUOTE', 'all relevant fields are empty in ', [(431, 6, 431, 41)])); 
      builtin__citeZs($context, StyString('LITERAL', 'cite$', [(431, 42, 431, 47)])); 
      builtin__Za($context, StyString('LITERAL', '*', [(431, 48, 431, 49)])); 
      builtin__warningZs($context, StyString('LITERAL', 'warning$', [(431, 50, 431, 58)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', 'all relevant fields are empty in ', [(431, 6, 431, 41)]), StyString('LITERAL', 'cite$', [(431, 42, 431, 47)]), StyString('LITERAL', '*', [(431, 48, 431, 49)]), StyString('LITERAL', 'warning$', [(431, 50, 431, 58)]))], [(431, 4, 431, 60)])); 
    lookupFunction($context, \&builtin__skipZs, StyString('REFERENCE', 'skip$', [(432, 4, 432, 10)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(433, 2, 433, 5)])); 
  }
  sub bst__formatZothesisZotype { 
    my ($context) = @_; 
    pushEntryField($context, 'type', StyString('LITERAL', 'type', [(437, 2, 437, 6)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(437, 7, 437, 13)])); 
    lookupFunction($context, \&builtin__skipZs, StyString('REFERENCE', 'skip$', [(438, 4, 438, 10)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      builtin__popZs($context, StyString('LITERAL', 'pop$', [(439, 6, 439, 10)])); 
      pushEntryField($context, 'type', StyString('LITERAL', 'type', [(440, 6, 440, 10)])); 
      pushString($context, 't', StyString('QUOTE', 't', [(440, 11, 440, 14)])); 
      builtin__changeZocaseZs($context, StyString('LITERAL', 'change.case$', [(440, 15, 440, 27)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'pop$', [(439, 6, 439, 10)]), StyString('LITERAL', 'type', [(440, 6, 440, 10)]), StyString('QUOTE', 't', [(440, 11, 440, 14)]), StyString('LITERAL', 'change.case$', [(440, 15, 440, 27)]))], [(439, 4, 441, 5)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(442, 2, 442, 5)])); 
  }
  sub bst__formatZotrZonumber { 
    my ($context) = @_; 
    pushEntryField($context, 'type', StyString('LITERAL', 'type', [(446, 2, 446, 6)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(446, 7, 446, 13)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushString($context, 'Technical Report', StyString('QUOTE', 'Technical Report', [(447, 6, 447, 24)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', 'Technical Report', [(447, 6, 447, 24)]))], [(447, 4, 447, 26)])); 
    lookupEntryField($context, 'type', StyString('REFERENCE', 'type', [(448, 4, 448, 9)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(449, 2, 449, 5)])); 
    pushEntryField($context, 'number', StyString('LITERAL', 'number', [(450, 2, 450, 8)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(450, 9, 450, 15)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushString($context, 't', StyString('QUOTE', 't', [(451, 6, 451, 9)])); 
      builtin__changeZocaseZs($context, StyString('LITERAL', 'change.case$', [(451, 10, 451, 22)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', 't', [(451, 6, 451, 9)]), StyString('LITERAL', 'change.case$', [(451, 10, 451, 22)]))], [(451, 4, 451, 24)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushEntryField($context, 'number', StyString('LITERAL', 'number', [(452, 6, 452, 12)])); 
      bst__tieZoorZospaceZoconnect($context, StyString('LITERAL', 'tie.or.space.connect', [(452, 13, 452, 33)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'number', [(452, 6, 452, 12)]), StyString('LITERAL', 'tie.or.space.connect', [(452, 13, 452, 33)]))], [(452, 4, 452, 35)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(453, 2, 453, 5)])); 
  }
  sub bst__formatZoarticleZocrossref { 
    my ($context) = @_; 
    pushEntryField($context, 'key', StyString('LITERAL', 'key', [(457, 2, 457, 5)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(457, 6, 457, 12)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushEntryField($context, 'journal', StyString('LITERAL', 'journal', [(458, 6, 458, 13)])); 
      builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(458, 14, 458, 20)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushString($context, 'need key or journal for ', StyString('QUOTE', 'need key or journal for ', [(459, 10, 459, 36)])); 
        builtin__citeZs($context, StyString('LITERAL', 'cite$', [(459, 37, 459, 42)])); 
        builtin__Za($context, StyString('LITERAL', '*', [(459, 43, 459, 44)])); 
        pushString($context, ' to crossref ', StyString('QUOTE', ' to crossref ', [(459, 45, 459, 60)])); 
        builtin__Za($context, StyString('LITERAL', '*', [(459, 61, 459, 62)])); 
        pushEntryField($context, 'crossref', StyString('LITERAL', 'crossref', [(459, 63, 459, 71)])); 
        builtin__Za($context, StyString('LITERAL', '*', [(459, 72, 459, 73)])); 
        builtin__warningZs($context, StyString('LITERAL', 'warning$', [(460, 10, 460, 18)])); 
        pushString($context, '', StyString('QUOTE', '', [(461, 10, 461, 12)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', 'need key or journal for ', [(459, 10, 459, 36)]), StyString('LITERAL', 'cite$', [(459, 37, 459, 42)]), StyString('LITERAL', '*', [(459, 43, 459, 44)]), StyString('QUOTE', ' to crossref ', [(459, 45, 459, 60)]), StyString('LITERAL', '*', [(459, 61, 459, 62)]), StyString('LITERAL', 'crossref', [(459, 63, 459, 71)]), StyString('LITERAL', '*', [(459, 72, 459, 73)]), StyString('LITERAL', 'warning$', [(460, 10, 460, 18)]), StyString('QUOTE', '', [(461, 10, 461, 12)]))], [(459, 8, 462, 9)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushString($context, 'In {\\em ', StyString('QUOTE', 'In {\\em ', [(463, 10, 463, 20)])); 
        pushEntryField($context, 'journal', StyString('LITERAL', 'journal', [(463, 21, 463, 28)])); 
        builtin__Za($context, StyString('LITERAL', '*', [(463, 29, 463, 30)])); 
        pushString($context, '\\/}', StyString('QUOTE', '\\/}', [(463, 31, 463, 36)])); 
        builtin__Za($context, StyString('LITERAL', '*', [(463, 37, 463, 38)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', 'In {\\em ', [(463, 10, 463, 20)]), StyString('LITERAL', 'journal', [(463, 21, 463, 28)]), StyString('LITERAL', '*', [(463, 29, 463, 30)]), StyString('QUOTE', '\\/}', [(463, 31, 463, 36)]), StyString('LITERAL', '*', [(463, 37, 463, 38)]))], [(463, 8, 463, 40)])); 
      builtin__ifZs($context, StyString('LITERAL', 'if$', [(464, 6, 464, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'journal', [(458, 6, 458, 13)]), StyString('LITERAL', 'empty$', [(458, 14, 458, 20)]), StyString('BLOCK', [(StyString('QUOTE', 'need key or journal for ', [(459, 10, 459, 36)]), StyString('LITERAL', 'cite$', [(459, 37, 459, 42)]), StyString('LITERAL', '*', [(459, 43, 459, 44)]), StyString('QUOTE', ' to crossref ', [(459, 45, 459, 60)]), StyString('LITERAL', '*', [(459, 61, 459, 62)]), StyString('LITERAL', 'crossref', [(459, 63, 459, 71)]), StyString('LITERAL', '*', [(459, 72, 459, 73)]), StyString('LITERAL', 'warning$', [(460, 10, 460, 18)]), StyString('QUOTE', '', [(461, 10, 461, 12)]))], [(459, 8, 462, 9)]), StyString('BLOCK', [(StyString('QUOTE', 'In {\\em ', [(463, 10, 463, 20)]), StyString('LITERAL', 'journal', [(463, 21, 463, 28)]), StyString('LITERAL', '*', [(463, 29, 463, 30)]), StyString('QUOTE', '\\/}', [(463, 31, 463, 36)]), StyString('LITERAL', '*', [(463, 37, 463, 38)]))], [(463, 8, 463, 40)]), StyString('LITERAL', 'if$', [(464, 6, 464, 9)]))], [(458, 4, 465, 5)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushString($context, 'In ', StyString('QUOTE', 'In ', [(466, 6, 466, 11)])); 
      pushEntryField($context, 'key', StyString('LITERAL', 'key', [(466, 12, 466, 15)])); 
      builtin__Za($context, StyString('LITERAL', '*', [(466, 16, 466, 17)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', 'In ', [(466, 6, 466, 11)]), StyString('LITERAL', 'key', [(466, 12, 466, 15)]), StyString('LITERAL', '*', [(466, 16, 466, 17)]))], [(466, 4, 466, 19)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(467, 2, 467, 5)])); 
    pushString($context, ' \\cite{', StyString('QUOTE', ' \\cite{', [(468, 2, 468, 11)])); 
    builtin__Za($context, StyString('LITERAL', '*', [(468, 12, 468, 13)])); 
    pushEntryField($context, 'crossref', StyString('LITERAL', 'crossref', [(468, 14, 468, 22)])); 
    builtin__Za($context, StyString('LITERAL', '*', [(468, 23, 468, 24)])); 
    pushString($context, '}', StyString('QUOTE', '}', [(468, 25, 468, 28)])); 
    builtin__Za($context, StyString('LITERAL', '*', [(468, 29, 468, 30)])); 
  }
  sub bst__formatZocrossrefZoeditor { 
    my ($context) = @_; 
    pushEntryField($context, 'editor', StyString('LITERAL', 'editor', [(472, 2, 472, 8)])); 
    pushInteger($context, 1, StyString('NUMBER', 1, [(472, 9, 472, 11)])); 
    pushString($context, '{vv~}{ll}', StyString('QUOTE', '{vv~}{ll}', [(472, 12, 472, 23)])); 
    builtin__formatZonameZs($context, StyString('LITERAL', 'format.name$', [(472, 24, 472, 36)])); 
    pushEntryField($context, 'editor', StyString('LITERAL', 'editor', [(473, 2, 473, 8)])); 
    builtin__numZonamesZs($context, StyString('LITERAL', 'num.names$', [(473, 9, 473, 19)])); 
    builtin__duplicateZs($context, StyString('LITERAL', 'duplicate$', [(473, 20, 473, 30)])); 
    pushInteger($context, 2, StyString('NUMBER', 2, [(474, 2, 474, 4)])); 
    builtin__Zg($context, StyString('LITERAL', '>', [(474, 5, 474, 6)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      builtin__popZs($context, StyString('LITERAL', 'pop$', [(475, 6, 475, 10)])); 
      pushString($context, ' et~al.', StyString('QUOTE', ' et~al.', [(475, 11, 475, 20)])); 
      builtin__Za($context, StyString('LITERAL', '*', [(475, 21, 475, 22)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'pop$', [(475, 6, 475, 10)]), StyString('QUOTE', ' et~al.', [(475, 11, 475, 20)]), StyString('LITERAL', '*', [(475, 21, 475, 22)]))], [(475, 4, 475, 24)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushInteger($context, 2, StyString('NUMBER', 2, [(476, 6, 476, 8)])); 
      builtin__Zl($context, StyString('LITERAL', '<', [(476, 9, 476, 10)])); 
      lookupFunction($context, \&builtin__skipZs, StyString('REFERENCE', 'skip$', [(477, 8, 477, 14)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushEntryField($context, 'editor', StyString('LITERAL', 'editor', [(478, 10, 478, 16)])); 
        pushInteger($context, 2, StyString('NUMBER', 2, [(478, 17, 478, 19)])); 
        pushString($context, '{ff }{vv }{ll}{ jj}', StyString('QUOTE', '{ff }{vv }{ll}{ jj}', [(478, 20, 478, 41)])); 
        builtin__formatZonameZs($context, StyString('LITERAL', 'format.name$', [(478, 42, 478, 54)])); 
        pushString($context, 'others', StyString('QUOTE', 'others', [(478, 55, 478, 63)])); 
        builtin__Ze($context, StyString('LITERAL', '=', [(478, 64, 478, 65)])); 
        pushFunction($context, sub { 
          my ($context) = @_; 
          pushString($context, ' et~al.', StyString('QUOTE', ' et~al.', [(479, 14, 479, 23)])); 
          builtin__Za($context, StyString('LITERAL', '*', [(479, 24, 479, 25)])); 
        }, StyString('BLOCK', [(StyString('QUOTE', ' et~al.', [(479, 14, 479, 23)]), StyString('LITERAL', '*', [(479, 24, 479, 25)]))], [(479, 12, 479, 27)])); 
        pushFunction($context, sub { 
          my ($context) = @_; 
          pushString($context, ' and ', StyString('QUOTE', ' and ', [(480, 14, 480, 21)])); 
          builtin__Za($context, StyString('LITERAL', '*', [(480, 22, 480, 23)])); 
          pushEntryField($context, 'editor', StyString('LITERAL', 'editor', [(480, 24, 480, 30)])); 
          pushInteger($context, 2, StyString('NUMBER', 2, [(480, 31, 480, 33)])); 
          pushString($context, '{vv~}{ll}', StyString('QUOTE', '{vv~}{ll}', [(480, 34, 480, 45)])); 
          builtin__formatZonameZs($context, StyString('LITERAL', 'format.name$', [(480, 46, 480, 58)])); 
          builtin__Za($context, StyString('LITERAL', '*', [(480, 59, 480, 60)])); 
        }, StyString('BLOCK', [(StyString('QUOTE', ' and ', [(480, 14, 480, 21)]), StyString('LITERAL', '*', [(480, 22, 480, 23)]), StyString('LITERAL', 'editor', [(480, 24, 480, 30)]), StyString('NUMBER', 2, [(480, 31, 480, 33)]), StyString('QUOTE', '{vv~}{ll}', [(480, 34, 480, 45)]), StyString('LITERAL', 'format.name$', [(480, 46, 480, 58)]), StyString('LITERAL', '*', [(480, 59, 480, 60)]))], [(480, 12, 480, 62)])); 
        builtin__ifZs($context, StyString('LITERAL', 'if$', [(481, 10, 481, 13)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'editor', [(478, 10, 478, 16)]), StyString('NUMBER', 2, [(478, 17, 478, 19)]), StyString('QUOTE', '{ff }{vv }{ll}{ jj}', [(478, 20, 478, 41)]), StyString('LITERAL', 'format.name$', [(478, 42, 478, 54)]), StyString('QUOTE', 'others', [(478, 55, 478, 63)]), StyString('LITERAL', '=', [(478, 64, 478, 65)]), StyString('BLOCK', [(StyString('QUOTE', ' et~al.', [(479, 14, 479, 23)]), StyString('LITERAL', '*', [(479, 24, 479, 25)]))], [(479, 12, 479, 27)]), StyString('BLOCK', [(StyString('QUOTE', ' and ', [(480, 14, 480, 21)]), StyString('LITERAL', '*', [(480, 22, 480, 23)]), StyString('LITERAL', 'editor', [(480, 24, 480, 30)]), StyString('NUMBER', 2, [(480, 31, 480, 33)]), StyString('QUOTE', '{vv~}{ll}', [(480, 34, 480, 45)]), StyString('LITERAL', 'format.name$', [(480, 46, 480, 58)]), StyString('LITERAL', '*', [(480, 59, 480, 60)]))], [(480, 12, 480, 62)]), StyString('LITERAL', 'if$', [(481, 10, 481, 13)]))], [(478, 8, 482, 9)])); 
      builtin__ifZs($context, StyString('LITERAL', 'if$', [(483, 6, 483, 9)])); 
    }, StyString('BLOCK', [(StyString('NUMBER', 2, [(476, 6, 476, 8)]), StyString('LITERAL', '<', [(476, 9, 476, 10)]), StyString('REFERENCE', 'skip$', [(477, 8, 477, 14)]), StyString('BLOCK', [(StyString('LITERAL', 'editor', [(478, 10, 478, 16)]), StyString('NUMBER', 2, [(478, 17, 478, 19)]), StyString('QUOTE', '{ff }{vv }{ll}{ jj}', [(478, 20, 478, 41)]), StyString('LITERAL', 'format.name$', [(478, 42, 478, 54)]), StyString('QUOTE', 'others', [(478, 55, 478, 63)]), StyString('LITERAL', '=', [(478, 64, 478, 65)]), StyString('BLOCK', [(StyString('QUOTE', ' et~al.', [(479, 14, 479, 23)]), StyString('LITERAL', '*', [(479, 24, 479, 25)]))], [(479, 12, 479, 27)]), StyString('BLOCK', [(StyString('QUOTE', ' and ', [(480, 14, 480, 21)]), StyString('LITERAL', '*', [(480, 22, 480, 23)]), StyString('LITERAL', 'editor', [(480, 24, 480, 30)]), StyString('NUMBER', 2, [(480, 31, 480, 33)]), StyString('QUOTE', '{vv~}{ll}', [(480, 34, 480, 45)]), StyString('LITERAL', 'format.name$', [(480, 46, 480, 58)]), StyString('LITERAL', '*', [(480, 59, 480, 60)]))], [(480, 12, 480, 62)]), StyString('LITERAL', 'if$', [(481, 10, 481, 13)]))], [(478, 8, 482, 9)]), StyString('LITERAL', 'if$', [(483, 6, 483, 9)]))], [(476, 4, 484, 5)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(485, 2, 485, 5)])); 
  }
  sub bst__formatZobookZocrossref { 
    my ($context) = @_; 
    pushEntryField($context, 'volume', StyString('LITERAL', 'volume', [(489, 2, 489, 8)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(489, 9, 489, 15)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushString($context, 'empty volume in ', StyString('QUOTE', 'empty volume in ', [(490, 6, 490, 24)])); 
      builtin__citeZs($context, StyString('LITERAL', 'cite$', [(490, 25, 490, 30)])); 
      builtin__Za($context, StyString('LITERAL', '*', [(490, 31, 490, 32)])); 
      pushString($context, '\'s crossref of ', StyString('QUOTE', '\'s crossref of ', [(490, 33, 490, 50)])); 
      builtin__Za($context, StyString('LITERAL', '*', [(490, 51, 490, 52)])); 
      pushEntryField($context, 'crossref', StyString('LITERAL', 'crossref', [(490, 53, 490, 61)])); 
      builtin__Za($context, StyString('LITERAL', '*', [(490, 62, 490, 63)])); 
      builtin__warningZs($context, StyString('LITERAL', 'warning$', [(490, 64, 490, 72)])); 
      pushString($context, 'In ', StyString('QUOTE', 'In ', [(491, 6, 491, 11)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', 'empty volume in ', [(490, 6, 490, 24)]), StyString('LITERAL', 'cite$', [(490, 25, 490, 30)]), StyString('LITERAL', '*', [(490, 31, 490, 32)]), StyString('QUOTE', '\'s crossref of ', [(490, 33, 490, 50)]), StyString('LITERAL', '*', [(490, 51, 490, 52)]), StyString('LITERAL', 'crossref', [(490, 53, 490, 61)]), StyString('LITERAL', '*', [(490, 62, 490, 63)]), StyString('LITERAL', 'warning$', [(490, 64, 490, 72)]), StyString('QUOTE', 'In ', [(491, 6, 491, 11)]))], [(490, 4, 492, 5)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushString($context, 'Volume', StyString('QUOTE', 'Volume', [(493, 6, 493, 14)])); 
      pushEntryField($context, 'volume', StyString('LITERAL', 'volume', [(493, 15, 493, 21)])); 
      bst__tieZoorZospaceZoconnect($context, StyString('LITERAL', 'tie.or.space.connect', [(493, 22, 493, 42)])); 
      pushString($context, ' of ', StyString('QUOTE', ' of ', [(494, 6, 494, 12)])); 
      builtin__Za($context, StyString('LITERAL', '*', [(494, 13, 494, 14)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', 'Volume', [(493, 6, 493, 14)]), StyString('LITERAL', 'volume', [(493, 15, 493, 21)]), StyString('LITERAL', 'tie.or.space.connect', [(493, 22, 493, 42)]), StyString('QUOTE', ' of ', [(494, 6, 494, 12)]), StyString('LITERAL', '*', [(494, 13, 494, 14)]))], [(493, 4, 495, 5)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(496, 2, 496, 5)])); 
    pushEntryField($context, 'editor', StyString('LITERAL', 'editor', [(497, 2, 497, 8)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(497, 9, 497, 15)])); 
    pushEntryField($context, 'editor', StyString('LITERAL', 'editor', [(498, 2, 498, 8)])); 
    bst__fieldZoorZonull($context, StyString('LITERAL', 'field.or.null', [(498, 9, 498, 22)])); 
    pushEntryField($context, 'author', StyString('LITERAL', 'author', [(498, 23, 498, 29)])); 
    bst__fieldZoorZonull($context, StyString('LITERAL', 'field.or.null', [(498, 30, 498, 43)])); 
    builtin__Ze($context, StyString('LITERAL', '=', [(498, 44, 498, 45)])); 
    bst__or($context, StyString('LITERAL', 'or', [(499, 2, 499, 4)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushEntryField($context, 'key', StyString('LITERAL', 'key', [(500, 6, 500, 9)])); 
      builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(500, 10, 500, 16)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushEntryField($context, 'series', StyString('LITERAL', 'series', [(501, 10, 501, 16)])); 
        builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(501, 17, 501, 23)])); 
        pushFunction($context, sub { 
          my ($context) = @_; 
          pushString($context, 'need editor, key, or series for ', StyString('QUOTE', 'need editor, key, or series for ', [(502, 14, 502, 48)])); 
          builtin__citeZs($context, StyString('LITERAL', 'cite$', [(502, 49, 502, 54)])); 
          builtin__Za($context, StyString('LITERAL', '*', [(502, 55, 502, 56)])); 
          pushString($context, ' to crossref ', StyString('QUOTE', ' to crossref ', [(502, 57, 502, 72)])); 
          builtin__Za($context, StyString('LITERAL', '*', [(502, 73, 502, 74)])); 
          pushEntryField($context, 'crossref', StyString('LITERAL', 'crossref', [(503, 14, 503, 22)])); 
          builtin__Za($context, StyString('LITERAL', '*', [(503, 23, 503, 24)])); 
          builtin__warningZs($context, StyString('LITERAL', 'warning$', [(503, 25, 503, 33)])); 
          pushString($context, '', StyString('QUOTE', '', [(504, 14, 504, 16)])); 
          builtin__Za($context, StyString('LITERAL', '*', [(504, 17, 504, 18)])); 
        }, StyString('BLOCK', [(StyString('QUOTE', 'need editor, key, or series for ', [(502, 14, 502, 48)]), StyString('LITERAL', 'cite$', [(502, 49, 502, 54)]), StyString('LITERAL', '*', [(502, 55, 502, 56)]), StyString('QUOTE', ' to crossref ', [(502, 57, 502, 72)]), StyString('LITERAL', '*', [(502, 73, 502, 74)]), StyString('LITERAL', 'crossref', [(503, 14, 503, 22)]), StyString('LITERAL', '*', [(503, 23, 503, 24)]), StyString('LITERAL', 'warning$', [(503, 25, 503, 33)]), StyString('QUOTE', '', [(504, 14, 504, 16)]), StyString('LITERAL', '*', [(504, 17, 504, 18)]))], [(502, 12, 505, 13)])); 
        pushFunction($context, sub { 
          my ($context) = @_; 
          pushString($context, '{\\em ', StyString('QUOTE', '{\\em ', [(506, 14, 506, 21)])); 
          builtin__Za($context, StyString('LITERAL', '*', [(506, 22, 506, 23)])); 
          pushEntryField($context, 'series', StyString('LITERAL', 'series', [(506, 24, 506, 30)])); 
          builtin__Za($context, StyString('LITERAL', '*', [(506, 31, 506, 32)])); 
          pushString($context, '\\/}', StyString('QUOTE', '\\/}', [(506, 33, 506, 38)])); 
          builtin__Za($context, StyString('LITERAL', '*', [(506, 39, 506, 40)])); 
        }, StyString('BLOCK', [(StyString('QUOTE', '{\\em ', [(506, 14, 506, 21)]), StyString('LITERAL', '*', [(506, 22, 506, 23)]), StyString('LITERAL', 'series', [(506, 24, 506, 30)]), StyString('LITERAL', '*', [(506, 31, 506, 32)]), StyString('QUOTE', '\\/}', [(506, 33, 506, 38)]), StyString('LITERAL', '*', [(506, 39, 506, 40)]))], [(506, 12, 506, 42)])); 
        builtin__ifZs($context, StyString('LITERAL', 'if$', [(507, 10, 507, 13)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'series', [(501, 10, 501, 16)]), StyString('LITERAL', 'empty$', [(501, 17, 501, 23)]), StyString('BLOCK', [(StyString('QUOTE', 'need editor, key, or series for ', [(502, 14, 502, 48)]), StyString('LITERAL', 'cite$', [(502, 49, 502, 54)]), StyString('LITERAL', '*', [(502, 55, 502, 56)]), StyString('QUOTE', ' to crossref ', [(502, 57, 502, 72)]), StyString('LITERAL', '*', [(502, 73, 502, 74)]), StyString('LITERAL', 'crossref', [(503, 14, 503, 22)]), StyString('LITERAL', '*', [(503, 23, 503, 24)]), StyString('LITERAL', 'warning$', [(503, 25, 503, 33)]), StyString('QUOTE', '', [(504, 14, 504, 16)]), StyString('LITERAL', '*', [(504, 17, 504, 18)]))], [(502, 12, 505, 13)]), StyString('BLOCK', [(StyString('QUOTE', '{\\em ', [(506, 14, 506, 21)]), StyString('LITERAL', '*', [(506, 22, 506, 23)]), StyString('LITERAL', 'series', [(506, 24, 506, 30)]), StyString('LITERAL', '*', [(506, 31, 506, 32)]), StyString('QUOTE', '\\/}', [(506, 33, 506, 38)]), StyString('LITERAL', '*', [(506, 39, 506, 40)]))], [(506, 12, 506, 42)]), StyString('LITERAL', 'if$', [(507, 10, 507, 13)]))], [(501, 8, 508, 9)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushEntryField($context, 'key', StyString('LITERAL', 'key', [(509, 10, 509, 13)])); 
        builtin__Za($context, StyString('LITERAL', '*', [(509, 14, 509, 15)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'key', [(509, 10, 509, 13)]), StyString('LITERAL', '*', [(509, 14, 509, 15)]))], [(509, 8, 509, 17)])); 
      builtin__ifZs($context, StyString('LITERAL', 'if$', [(510, 6, 510, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'key', [(500, 6, 500, 9)]), StyString('LITERAL', 'empty$', [(500, 10, 500, 16)]), StyString('BLOCK', [(StyString('LITERAL', 'series', [(501, 10, 501, 16)]), StyString('LITERAL', 'empty$', [(501, 17, 501, 23)]), StyString('BLOCK', [(StyString('QUOTE', 'need editor, key, or series for ', [(502, 14, 502, 48)]), StyString('LITERAL', 'cite$', [(502, 49, 502, 54)]), StyString('LITERAL', '*', [(502, 55, 502, 56)]), StyString('QUOTE', ' to crossref ', [(502, 57, 502, 72)]), StyString('LITERAL', '*', [(502, 73, 502, 74)]), StyString('LITERAL', 'crossref', [(503, 14, 503, 22)]), StyString('LITERAL', '*', [(503, 23, 503, 24)]), StyString('LITERAL', 'warning$', [(503, 25, 503, 33)]), StyString('QUOTE', '', [(504, 14, 504, 16)]), StyString('LITERAL', '*', [(504, 17, 504, 18)]))], [(502, 12, 505, 13)]), StyString('BLOCK', [(StyString('QUOTE', '{\\em ', [(506, 14, 506, 21)]), StyString('LITERAL', '*', [(506, 22, 506, 23)]), StyString('LITERAL', 'series', [(506, 24, 506, 30)]), StyString('LITERAL', '*', [(506, 31, 506, 32)]), StyString('QUOTE', '\\/}', [(506, 33, 506, 38)]), StyString('LITERAL', '*', [(506, 39, 506, 40)]))], [(506, 12, 506, 42)]), StyString('LITERAL', 'if$', [(507, 10, 507, 13)]))], [(501, 8, 508, 9)]), StyString('BLOCK', [(StyString('LITERAL', 'key', [(509, 10, 509, 13)]), StyString('LITERAL', '*', [(509, 14, 509, 15)]))], [(509, 8, 509, 17)]), StyString('LITERAL', 'if$', [(510, 6, 510, 9)]))], [(500, 4, 511, 5)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      bst__formatZocrossrefZoeditor($context, StyString('LITERAL', 'format.crossref.editor', [(512, 6, 512, 28)])); 
      builtin__Za($context, StyString('LITERAL', '*', [(512, 29, 512, 30)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'format.crossref.editor', [(512, 6, 512, 28)]), StyString('LITERAL', '*', [(512, 29, 512, 30)]))], [(512, 4, 512, 32)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(513, 2, 513, 5)])); 
    pushString($context, ' \\cite{', StyString('QUOTE', ' \\cite{', [(514, 2, 514, 11)])); 
    builtin__Za($context, StyString('LITERAL', '*', [(514, 12, 514, 13)])); 
    pushEntryField($context, 'crossref', StyString('LITERAL', 'crossref', [(514, 14, 514, 22)])); 
    builtin__Za($context, StyString('LITERAL', '*', [(514, 23, 514, 24)])); 
    pushString($context, '}', StyString('QUOTE', '}', [(514, 25, 514, 28)])); 
    builtin__Za($context, StyString('LITERAL', '*', [(514, 29, 514, 30)])); 
  }
  sub bst__formatZoincollZoinprocZocrossref { 
    my ($context) = @_; 
    pushEntryField($context, 'editor', StyString('LITERAL', 'editor', [(518, 2, 518, 8)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(518, 9, 518, 15)])); 
    pushEntryField($context, 'editor', StyString('LITERAL', 'editor', [(519, 2, 519, 8)])); 
    bst__fieldZoorZonull($context, StyString('LITERAL', 'field.or.null', [(519, 9, 519, 22)])); 
    pushEntryField($context, 'author', StyString('LITERAL', 'author', [(519, 23, 519, 29)])); 
    bst__fieldZoorZonull($context, StyString('LITERAL', 'field.or.null', [(519, 30, 519, 43)])); 
    builtin__Ze($context, StyString('LITERAL', '=', [(519, 44, 519, 45)])); 
    bst__or($context, StyString('LITERAL', 'or', [(520, 2, 520, 4)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushEntryField($context, 'key', StyString('LITERAL', 'key', [(521, 6, 521, 9)])); 
      builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(521, 10, 521, 16)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushEntryField($context, 'booktitle', StyString('LITERAL', 'booktitle', [(522, 10, 522, 19)])); 
        builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(522, 20, 522, 26)])); 
        pushFunction($context, sub { 
          my ($context) = @_; 
          pushString($context, 'need editor, key, or booktitle for ', StyString('QUOTE', 'need editor, key, or booktitle for ', [(523, 14, 523, 51)])); 
          builtin__citeZs($context, StyString('LITERAL', 'cite$', [(523, 52, 523, 57)])); 
          builtin__Za($context, StyString('LITERAL', '*', [(523, 58, 523, 59)])); 
          pushString($context, ' to crossref ', StyString('QUOTE', ' to crossref ', [(523, 60, 523, 75)])); 
          builtin__Za($context, StyString('LITERAL', '*', [(523, 76, 523, 77)])); 
          pushEntryField($context, 'crossref', StyString('LITERAL', 'crossref', [(524, 14, 524, 22)])); 
          builtin__Za($context, StyString('LITERAL', '*', [(524, 23, 524, 24)])); 
          builtin__warningZs($context, StyString('LITERAL', 'warning$', [(524, 25, 524, 33)])); 
          pushString($context, '', StyString('QUOTE', '', [(525, 14, 525, 16)])); 
        }, StyString('BLOCK', [(StyString('QUOTE', 'need editor, key, or booktitle for ', [(523, 14, 523, 51)]), StyString('LITERAL', 'cite$', [(523, 52, 523, 57)]), StyString('LITERAL', '*', [(523, 58, 523, 59)]), StyString('QUOTE', ' to crossref ', [(523, 60, 523, 75)]), StyString('LITERAL', '*', [(523, 76, 523, 77)]), StyString('LITERAL', 'crossref', [(524, 14, 524, 22)]), StyString('LITERAL', '*', [(524, 23, 524, 24)]), StyString('LITERAL', 'warning$', [(524, 25, 524, 33)]), StyString('QUOTE', '', [(525, 14, 525, 16)]))], [(523, 12, 526, 13)])); 
        pushFunction($context, sub { 
          my ($context) = @_; 
          pushString($context, 'In {\\em ', StyString('QUOTE', 'In {\\em ', [(527, 14, 527, 24)])); 
          pushEntryField($context, 'booktitle', StyString('LITERAL', 'booktitle', [(527, 25, 527, 34)])); 
          builtin__Za($context, StyString('LITERAL', '*', [(527, 35, 527, 36)])); 
          pushString($context, '\\/}', StyString('QUOTE', '\\/}', [(527, 37, 527, 42)])); 
          builtin__Za($context, StyString('LITERAL', '*', [(527, 43, 527, 44)])); 
        }, StyString('BLOCK', [(StyString('QUOTE', 'In {\\em ', [(527, 14, 527, 24)]), StyString('LITERAL', 'booktitle', [(527, 25, 527, 34)]), StyString('LITERAL', '*', [(527, 35, 527, 36)]), StyString('QUOTE', '\\/}', [(527, 37, 527, 42)]), StyString('LITERAL', '*', [(527, 43, 527, 44)]))], [(527, 12, 527, 46)])); 
        builtin__ifZs($context, StyString('LITERAL', 'if$', [(528, 10, 528, 13)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'booktitle', [(522, 10, 522, 19)]), StyString('LITERAL', 'empty$', [(522, 20, 522, 26)]), StyString('BLOCK', [(StyString('QUOTE', 'need editor, key, or booktitle for ', [(523, 14, 523, 51)]), StyString('LITERAL', 'cite$', [(523, 52, 523, 57)]), StyString('LITERAL', '*', [(523, 58, 523, 59)]), StyString('QUOTE', ' to crossref ', [(523, 60, 523, 75)]), StyString('LITERAL', '*', [(523, 76, 523, 77)]), StyString('LITERAL', 'crossref', [(524, 14, 524, 22)]), StyString('LITERAL', '*', [(524, 23, 524, 24)]), StyString('LITERAL', 'warning$', [(524, 25, 524, 33)]), StyString('QUOTE', '', [(525, 14, 525, 16)]))], [(523, 12, 526, 13)]), StyString('BLOCK', [(StyString('QUOTE', 'In {\\em ', [(527, 14, 527, 24)]), StyString('LITERAL', 'booktitle', [(527, 25, 527, 34)]), StyString('LITERAL', '*', [(527, 35, 527, 36)]), StyString('QUOTE', '\\/}', [(527, 37, 527, 42)]), StyString('LITERAL', '*', [(527, 43, 527, 44)]))], [(527, 12, 527, 46)]), StyString('LITERAL', 'if$', [(528, 10, 528, 13)]))], [(522, 8, 529, 9)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushString($context, 'In ', StyString('QUOTE', 'In ', [(530, 10, 530, 15)])); 
        pushEntryField($context, 'key', StyString('LITERAL', 'key', [(530, 16, 530, 19)])); 
        builtin__Za($context, StyString('LITERAL', '*', [(530, 20, 530, 21)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', 'In ', [(530, 10, 530, 15)]), StyString('LITERAL', 'key', [(530, 16, 530, 19)]), StyString('LITERAL', '*', [(530, 20, 530, 21)]))], [(530, 8, 530, 23)])); 
      builtin__ifZs($context, StyString('LITERAL', 'if$', [(531, 6, 531, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'key', [(521, 6, 521, 9)]), StyString('LITERAL', 'empty$', [(521, 10, 521, 16)]), StyString('BLOCK', [(StyString('LITERAL', 'booktitle', [(522, 10, 522, 19)]), StyString('LITERAL', 'empty$', [(522, 20, 522, 26)]), StyString('BLOCK', [(StyString('QUOTE', 'need editor, key, or booktitle for ', [(523, 14, 523, 51)]), StyString('LITERAL', 'cite$', [(523, 52, 523, 57)]), StyString('LITERAL', '*', [(523, 58, 523, 59)]), StyString('QUOTE', ' to crossref ', [(523, 60, 523, 75)]), StyString('LITERAL', '*', [(523, 76, 523, 77)]), StyString('LITERAL', 'crossref', [(524, 14, 524, 22)]), StyString('LITERAL', '*', [(524, 23, 524, 24)]), StyString('LITERAL', 'warning$', [(524, 25, 524, 33)]), StyString('QUOTE', '', [(525, 14, 525, 16)]))], [(523, 12, 526, 13)]), StyString('BLOCK', [(StyString('QUOTE', 'In {\\em ', [(527, 14, 527, 24)]), StyString('LITERAL', 'booktitle', [(527, 25, 527, 34)]), StyString('LITERAL', '*', [(527, 35, 527, 36)]), StyString('QUOTE', '\\/}', [(527, 37, 527, 42)]), StyString('LITERAL', '*', [(527, 43, 527, 44)]))], [(527, 12, 527, 46)]), StyString('LITERAL', 'if$', [(528, 10, 528, 13)]))], [(522, 8, 529, 9)]), StyString('BLOCK', [(StyString('QUOTE', 'In ', [(530, 10, 530, 15)]), StyString('LITERAL', 'key', [(530, 16, 530, 19)]), StyString('LITERAL', '*', [(530, 20, 530, 21)]))], [(530, 8, 530, 23)]), StyString('LITERAL', 'if$', [(531, 6, 531, 9)]))], [(521, 4, 532, 5)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushString($context, 'In ', StyString('QUOTE', 'In ', [(533, 6, 533, 11)])); 
      bst__formatZocrossrefZoeditor($context, StyString('LITERAL', 'format.crossref.editor', [(533, 12, 533, 34)])); 
      builtin__Za($context, StyString('LITERAL', '*', [(533, 35, 533, 36)])); 
    }, StyString('BLOCK', [(StyString('QUOTE', 'In ', [(533, 6, 533, 11)]), StyString('LITERAL', 'format.crossref.editor', [(533, 12, 533, 34)]), StyString('LITERAL', '*', [(533, 35, 533, 36)]))], [(533, 4, 533, 38)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(534, 2, 534, 5)])); 
    pushString($context, ' \\cite{', StyString('QUOTE', ' \\cite{', [(535, 2, 535, 11)])); 
    builtin__Za($context, StyString('LITERAL', '*', [(535, 12, 535, 13)])); 
    pushEntryField($context, 'crossref', StyString('LITERAL', 'crossref', [(535, 14, 535, 22)])); 
    builtin__Za($context, StyString('LITERAL', '*', [(535, 23, 535, 24)])); 
    pushString($context, '}', StyString('QUOTE', '}', [(535, 25, 535, 28)])); 
    builtin__Za($context, StyString('LITERAL', '*', [(535, 29, 535, 30)])); 
  }
  sub bst__article { 
    my ($context) = @_; 
    bst__outputZobibitem($context, StyString('LITERAL', 'output.bibitem', [(539, 2, 539, 16)])); 
    bst__formatZoauthors($context, StyString('LITERAL', 'format.authors', [(540, 2, 540, 16)])); 
    pushString($context, 'author', StyString('QUOTE', 'author', [(540, 17, 540, 25)])); 
    bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(540, 26, 540, 38)])); 
    bst__newZoblock($context, StyString('LITERAL', 'new.block', [(541, 2, 541, 11)])); 
    bst__formatZotitle($context, StyString('LITERAL', 'format.title', [(542, 2, 542, 14)])); 
    pushString($context, 'title', StyString('QUOTE', 'title', [(542, 15, 542, 22)])); 
    bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(542, 23, 542, 35)])); 
    bst__newZoblock($context, StyString('LITERAL', 'new.block', [(543, 2, 543, 11)])); 
    pushEntryField($context, 'crossref', StyString('LITERAL', 'crossref', [(544, 2, 544, 10)])); 
    builtin__missingZs($context, StyString('LITERAL', 'missing$', [(544, 11, 544, 19)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushEntryField($context, 'journal', StyString('LITERAL', 'journal', [(545, 6, 545, 13)])); 
      bst__emphasizze($context, StyString('LITERAL', 'emphasize', [(545, 14, 545, 23)])); 
      pushString($context, 'journal', StyString('QUOTE', 'journal', [(545, 24, 545, 33)])); 
      bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(545, 34, 545, 46)])); 
      bst__formatZovolZonumZopages($context, StyString('LITERAL', 'format.vol.num.pages', [(546, 6, 546, 26)])); 
      bst__output($context, StyString('LITERAL', 'output', [(546, 27, 546, 33)])); 
      bst__formatZodate($context, StyString('LITERAL', 'format.date', [(547, 6, 547, 17)])); 
      pushString($context, 'year', StyString('QUOTE', 'year', [(547, 18, 547, 24)])); 
      bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(547, 25, 547, 37)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'journal', [(545, 6, 545, 13)]), StyString('LITERAL', 'emphasize', [(545, 14, 545, 23)]), StyString('QUOTE', 'journal', [(545, 24, 545, 33)]), StyString('LITERAL', 'output.check', [(545, 34, 545, 46)]), StyString('LITERAL', 'format.vol.num.pages', [(546, 6, 546, 26)]), StyString('LITERAL', 'output', [(546, 27, 546, 33)]), StyString('LITERAL', 'format.date', [(547, 6, 547, 17)]), StyString('QUOTE', 'year', [(547, 18, 547, 24)]), StyString('LITERAL', 'output.check', [(547, 25, 547, 37)]))], [(545, 4, 548, 5)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      bst__formatZoarticleZocrossref($context, StyString('LITERAL', 'format.article.crossref', [(549, 6, 549, 29)])); 
      bst__outputZononnull($context, StyString('LITERAL', 'output.nonnull', [(549, 30, 549, 44)])); 
      bst__formatZopages($context, StyString('LITERAL', 'format.pages', [(550, 6, 550, 18)])); 
      bst__output($context, StyString('LITERAL', 'output', [(550, 19, 550, 25)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'format.article.crossref', [(549, 6, 549, 29)]), StyString('LITERAL', 'output.nonnull', [(549, 30, 549, 44)]), StyString('LITERAL', 'format.pages', [(550, 6, 550, 18)]), StyString('LITERAL', 'output', [(550, 19, 550, 25)]))], [(549, 4, 551, 5)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(552, 2, 552, 5)])); 
    bst__newZoblock($context, StyString('LITERAL', 'new.block', [(553, 2, 553, 11)])); 
    pushEntryField($context, 'note', StyString('LITERAL', 'note', [(554, 2, 554, 6)])); 
    bst__output($context, StyString('LITERAL', 'output', [(554, 7, 554, 13)])); 
    bst__finZoentry($context, StyString('LITERAL', 'fin.entry', [(555, 2, 555, 11)])); 
  }
  sub bst__book { 
    my ($context) = @_; 
    bst__outputZobibitem($context, StyString('LITERAL', 'output.bibitem', [(559, 2, 559, 16)])); 
    pushEntryField($context, 'author', StyString('LITERAL', 'author', [(560, 2, 560, 8)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(560, 9, 560, 15)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      bst__formatZoeditors($context, StyString('LITERAL', 'format.editors', [(561, 6, 561, 20)])); 
      pushString($context, 'author and editor', StyString('QUOTE', 'author and editor', [(561, 21, 561, 40)])); 
      bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(561, 41, 561, 53)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'format.editors', [(561, 6, 561, 20)]), StyString('QUOTE', 'author and editor', [(561, 21, 561, 40)]), StyString('LITERAL', 'output.check', [(561, 41, 561, 53)]))], [(561, 4, 561, 55)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      bst__formatZoauthors($context, StyString('LITERAL', 'format.authors', [(562, 6, 562, 20)])); 
      bst__outputZononnull($context, StyString('LITERAL', 'output.nonnull', [(562, 21, 562, 35)])); 
      pushEntryField($context, 'crossref', StyString('LITERAL', 'crossref', [(563, 6, 563, 14)])); 
      builtin__missingZs($context, StyString('LITERAL', 'missing$', [(563, 15, 563, 23)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushString($context, 'author and editor', StyString('QUOTE', 'author and editor', [(564, 10, 564, 29)])); 
        pushEntryField($context, 'editor', StyString('LITERAL', 'editor', [(564, 30, 564, 36)])); 
        bst__eitherZoorZocheck($context, StyString('LITERAL', 'either.or.check', [(564, 37, 564, 52)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', 'author and editor', [(564, 10, 564, 29)]), StyString('LITERAL', 'editor', [(564, 30, 564, 36)]), StyString('LITERAL', 'either.or.check', [(564, 37, 564, 52)]))], [(564, 8, 564, 54)])); 
      lookupFunction($context, \&builtin__skipZs, StyString('REFERENCE', 'skip$', [(565, 8, 565, 14)])); 
      builtin__ifZs($context, StyString('LITERAL', 'if$', [(566, 6, 566, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'format.authors', [(562, 6, 562, 20)]), StyString('LITERAL', 'output.nonnull', [(562, 21, 562, 35)]), StyString('LITERAL', 'crossref', [(563, 6, 563, 14)]), StyString('LITERAL', 'missing$', [(563, 15, 563, 23)]), StyString('BLOCK', [(StyString('QUOTE', 'author and editor', [(564, 10, 564, 29)]), StyString('LITERAL', 'editor', [(564, 30, 564, 36)]), StyString('LITERAL', 'either.or.check', [(564, 37, 564, 52)]))], [(564, 8, 564, 54)]), StyString('REFERENCE', 'skip$', [(565, 8, 565, 14)]), StyString('LITERAL', 'if$', [(566, 6, 566, 9)]))], [(562, 4, 567, 5)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(568, 2, 568, 5)])); 
    bst__newZoblock($context, StyString('LITERAL', 'new.block', [(569, 2, 569, 11)])); 
    bst__formatZobtitle($context, StyString('LITERAL', 'format.btitle', [(570, 2, 570, 15)])); 
    pushString($context, 'title', StyString('QUOTE', 'title', [(570, 16, 570, 23)])); 
    bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(570, 24, 570, 36)])); 
    pushEntryField($context, 'crossref', StyString('LITERAL', 'crossref', [(571, 2, 571, 10)])); 
    builtin__missingZs($context, StyString('LITERAL', 'missing$', [(571, 11, 571, 19)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      bst__formatZobvolume($context, StyString('LITERAL', 'format.bvolume', [(572, 6, 572, 20)])); 
      bst__output($context, StyString('LITERAL', 'output', [(572, 21, 572, 27)])); 
      bst__newZoblock($context, StyString('LITERAL', 'new.block', [(573, 6, 573, 15)])); 
      bst__formatZonumberZoseries($context, StyString('LITERAL', 'format.number.series', [(574, 6, 574, 26)])); 
      bst__output($context, StyString('LITERAL', 'output', [(574, 27, 574, 33)])); 
      bst__newZosentence($context, StyString('LITERAL', 'new.sentence', [(575, 6, 575, 18)])); 
      pushEntryField($context, 'publisher', StyString('LITERAL', 'publisher', [(576, 6, 576, 15)])); 
      pushString($context, 'publisher', StyString('QUOTE', 'publisher', [(576, 16, 576, 27)])); 
      bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(576, 28, 576, 40)])); 
      pushEntryField($context, 'address', StyString('LITERAL', 'address', [(577, 6, 577, 13)])); 
      bst__output($context, StyString('LITERAL', 'output', [(577, 14, 577, 20)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'format.bvolume', [(572, 6, 572, 20)]), StyString('LITERAL', 'output', [(572, 21, 572, 27)]), StyString('LITERAL', 'new.block', [(573, 6, 573, 15)]), StyString('LITERAL', 'format.number.series', [(574, 6, 574, 26)]), StyString('LITERAL', 'output', [(574, 27, 574, 33)]), StyString('LITERAL', 'new.sentence', [(575, 6, 575, 18)]), StyString('LITERAL', 'publisher', [(576, 6, 576, 15)]), StyString('QUOTE', 'publisher', [(576, 16, 576, 27)]), StyString('LITERAL', 'output.check', [(576, 28, 576, 40)]), StyString('LITERAL', 'address', [(577, 6, 577, 13)]), StyString('LITERAL', 'output', [(577, 14, 577, 20)]))], [(572, 4, 578, 5)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      bst__newZoblock($context, StyString('LITERAL', 'new.block', [(579, 6, 579, 15)])); 
      bst__formatZobookZocrossref($context, StyString('LITERAL', 'format.book.crossref', [(580, 6, 580, 26)])); 
      bst__outputZononnull($context, StyString('LITERAL', 'output.nonnull', [(580, 27, 580, 41)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'new.block', [(579, 6, 579, 15)]), StyString('LITERAL', 'format.book.crossref', [(580, 6, 580, 26)]), StyString('LITERAL', 'output.nonnull', [(580, 27, 580, 41)]))], [(579, 4, 581, 5)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(582, 2, 582, 5)])); 
    bst__formatZoedition($context, StyString('LITERAL', 'format.edition', [(583, 2, 583, 16)])); 
    bst__output($context, StyString('LITERAL', 'output', [(583, 17, 583, 23)])); 
    bst__formatZodate($context, StyString('LITERAL', 'format.date', [(584, 2, 584, 13)])); 
    pushString($context, 'year', StyString('QUOTE', 'year', [(584, 14, 584, 20)])); 
    bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(584, 21, 584, 33)])); 
    bst__newZoblock($context, StyString('LITERAL', 'new.block', [(585, 2, 585, 11)])); 
    pushEntryField($context, 'note', StyString('LITERAL', 'note', [(586, 2, 586, 6)])); 
    bst__output($context, StyString('LITERAL', 'output', [(586, 7, 586, 13)])); 
    bst__finZoentry($context, StyString('LITERAL', 'fin.entry', [(587, 2, 587, 11)])); 
  }
  sub bst__booklet { 
    my ($context) = @_; 
    bst__outputZobibitem($context, StyString('LITERAL', 'output.bibitem', [(591, 2, 591, 16)])); 
    bst__formatZoauthors($context, StyString('LITERAL', 'format.authors', [(592, 2, 592, 16)])); 
    bst__output($context, StyString('LITERAL', 'output', [(592, 17, 592, 23)])); 
    bst__newZoblock($context, StyString('LITERAL', 'new.block', [(593, 2, 593, 11)])); 
    bst__formatZotitle($context, StyString('LITERAL', 'format.title', [(594, 2, 594, 14)])); 
    pushString($context, 'title', StyString('QUOTE', 'title', [(594, 15, 594, 22)])); 
    bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(594, 23, 594, 35)])); 
    pushEntryField($context, 'howpublished', StyString('LITERAL', 'howpublished', [(595, 2, 595, 14)])); 
    pushEntryField($context, 'address', StyString('LITERAL', 'address', [(595, 15, 595, 22)])); 
    bst__newZoblockZocheckb($context, StyString('LITERAL', 'new.block.checkb', [(595, 23, 595, 39)])); 
    pushEntryField($context, 'howpublished', StyString('LITERAL', 'howpublished', [(596, 2, 596, 14)])); 
    bst__output($context, StyString('LITERAL', 'output', [(596, 15, 596, 21)])); 
    pushEntryField($context, 'address', StyString('LITERAL', 'address', [(597, 2, 597, 9)])); 
    bst__output($context, StyString('LITERAL', 'output', [(597, 10, 597, 16)])); 
    bst__formatZodate($context, StyString('LITERAL', 'format.date', [(598, 2, 598, 13)])); 
    bst__output($context, StyString('LITERAL', 'output', [(598, 14, 598, 20)])); 
    bst__newZoblock($context, StyString('LITERAL', 'new.block', [(599, 2, 599, 11)])); 
    pushEntryField($context, 'note', StyString('LITERAL', 'note', [(600, 2, 600, 6)])); 
    bst__output($context, StyString('LITERAL', 'output', [(600, 7, 600, 13)])); 
    bst__finZoentry($context, StyString('LITERAL', 'fin.entry', [(601, 2, 601, 11)])); 
  }
  sub bst__inbook { 
    my ($context) = @_; 
    bst__outputZobibitem($context, StyString('LITERAL', 'output.bibitem', [(605, 2, 605, 16)])); 
    pushEntryField($context, 'author', StyString('LITERAL', 'author', [(606, 2, 606, 8)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(606, 9, 606, 15)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      bst__formatZoeditors($context, StyString('LITERAL', 'format.editors', [(607, 6, 607, 20)])); 
      pushString($context, 'author and editor', StyString('QUOTE', 'author and editor', [(607, 21, 607, 40)])); 
      bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(607, 41, 607, 53)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'format.editors', [(607, 6, 607, 20)]), StyString('QUOTE', 'author and editor', [(607, 21, 607, 40)]), StyString('LITERAL', 'output.check', [(607, 41, 607, 53)]))], [(607, 4, 607, 55)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      bst__formatZoauthors($context, StyString('LITERAL', 'format.authors', [(608, 6, 608, 20)])); 
      bst__outputZononnull($context, StyString('LITERAL', 'output.nonnull', [(608, 21, 608, 35)])); 
      pushEntryField($context, 'crossref', StyString('LITERAL', 'crossref', [(609, 6, 609, 14)])); 
      builtin__missingZs($context, StyString('LITERAL', 'missing$', [(609, 15, 609, 23)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushString($context, 'author and editor', StyString('QUOTE', 'author and editor', [(610, 10, 610, 29)])); 
        pushEntryField($context, 'editor', StyString('LITERAL', 'editor', [(610, 30, 610, 36)])); 
        bst__eitherZoorZocheck($context, StyString('LITERAL', 'either.or.check', [(610, 37, 610, 52)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', 'author and editor', [(610, 10, 610, 29)]), StyString('LITERAL', 'editor', [(610, 30, 610, 36)]), StyString('LITERAL', 'either.or.check', [(610, 37, 610, 52)]))], [(610, 8, 610, 54)])); 
      lookupFunction($context, \&builtin__skipZs, StyString('REFERENCE', 'skip$', [(611, 8, 611, 14)])); 
      builtin__ifZs($context, StyString('LITERAL', 'if$', [(612, 6, 612, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'format.authors', [(608, 6, 608, 20)]), StyString('LITERAL', 'output.nonnull', [(608, 21, 608, 35)]), StyString('LITERAL', 'crossref', [(609, 6, 609, 14)]), StyString('LITERAL', 'missing$', [(609, 15, 609, 23)]), StyString('BLOCK', [(StyString('QUOTE', 'author and editor', [(610, 10, 610, 29)]), StyString('LITERAL', 'editor', [(610, 30, 610, 36)]), StyString('LITERAL', 'either.or.check', [(610, 37, 610, 52)]))], [(610, 8, 610, 54)]), StyString('REFERENCE', 'skip$', [(611, 8, 611, 14)]), StyString('LITERAL', 'if$', [(612, 6, 612, 9)]))], [(608, 4, 613, 5)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(614, 2, 614, 5)])); 
    bst__newZoblock($context, StyString('LITERAL', 'new.block', [(615, 2, 615, 11)])); 
    bst__formatZobtitle($context, StyString('LITERAL', 'format.btitle', [(616, 2, 616, 15)])); 
    pushString($context, 'title', StyString('QUOTE', 'title', [(616, 16, 616, 23)])); 
    bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(616, 24, 616, 36)])); 
    pushEntryField($context, 'crossref', StyString('LITERAL', 'crossref', [(617, 2, 617, 10)])); 
    builtin__missingZs($context, StyString('LITERAL', 'missing$', [(617, 11, 617, 19)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      bst__formatZobvolume($context, StyString('LITERAL', 'format.bvolume', [(618, 6, 618, 20)])); 
      bst__output($context, StyString('LITERAL', 'output', [(618, 21, 618, 27)])); 
      bst__formatZochapterZopages($context, StyString('LITERAL', 'format.chapter.pages', [(619, 6, 619, 26)])); 
      pushString($context, 'chapter and pages', StyString('QUOTE', 'chapter and pages', [(619, 27, 619, 46)])); 
      bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(619, 47, 619, 59)])); 
      bst__newZoblock($context, StyString('LITERAL', 'new.block', [(620, 6, 620, 15)])); 
      bst__formatZonumberZoseries($context, StyString('LITERAL', 'format.number.series', [(621, 6, 621, 26)])); 
      bst__output($context, StyString('LITERAL', 'output', [(621, 27, 621, 33)])); 
      bst__newZosentence($context, StyString('LITERAL', 'new.sentence', [(622, 6, 622, 18)])); 
      pushEntryField($context, 'publisher', StyString('LITERAL', 'publisher', [(623, 6, 623, 15)])); 
      pushString($context, 'publisher', StyString('QUOTE', 'publisher', [(623, 16, 623, 27)])); 
      bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(623, 28, 623, 40)])); 
      pushEntryField($context, 'address', StyString('LITERAL', 'address', [(624, 6, 624, 13)])); 
      bst__output($context, StyString('LITERAL', 'output', [(624, 14, 624, 20)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'format.bvolume', [(618, 6, 618, 20)]), StyString('LITERAL', 'output', [(618, 21, 618, 27)]), StyString('LITERAL', 'format.chapter.pages', [(619, 6, 619, 26)]), StyString('QUOTE', 'chapter and pages', [(619, 27, 619, 46)]), StyString('LITERAL', 'output.check', [(619, 47, 619, 59)]), StyString('LITERAL', 'new.block', [(620, 6, 620, 15)]), StyString('LITERAL', 'format.number.series', [(621, 6, 621, 26)]), StyString('LITERAL', 'output', [(621, 27, 621, 33)]), StyString('LITERAL', 'new.sentence', [(622, 6, 622, 18)]), StyString('LITERAL', 'publisher', [(623, 6, 623, 15)]), StyString('QUOTE', 'publisher', [(623, 16, 623, 27)]), StyString('LITERAL', 'output.check', [(623, 28, 623, 40)]), StyString('LITERAL', 'address', [(624, 6, 624, 13)]), StyString('LITERAL', 'output', [(624, 14, 624, 20)]))], [(618, 4, 625, 5)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      bst__formatZochapterZopages($context, StyString('LITERAL', 'format.chapter.pages', [(626, 6, 626, 26)])); 
      pushString($context, 'chapter and pages', StyString('QUOTE', 'chapter and pages', [(626, 27, 626, 46)])); 
      bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(626, 47, 626, 59)])); 
      bst__newZoblock($context, StyString('LITERAL', 'new.block', [(627, 6, 627, 15)])); 
      bst__formatZobookZocrossref($context, StyString('LITERAL', 'format.book.crossref', [(628, 6, 628, 26)])); 
      bst__outputZononnull($context, StyString('LITERAL', 'output.nonnull', [(628, 27, 628, 41)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'format.chapter.pages', [(626, 6, 626, 26)]), StyString('QUOTE', 'chapter and pages', [(626, 27, 626, 46)]), StyString('LITERAL', 'output.check', [(626, 47, 626, 59)]), StyString('LITERAL', 'new.block', [(627, 6, 627, 15)]), StyString('LITERAL', 'format.book.crossref', [(628, 6, 628, 26)]), StyString('LITERAL', 'output.nonnull', [(628, 27, 628, 41)]))], [(626, 4, 629, 5)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(630, 2, 630, 5)])); 
    bst__formatZoedition($context, StyString('LITERAL', 'format.edition', [(631, 2, 631, 16)])); 
    bst__output($context, StyString('LITERAL', 'output', [(631, 17, 631, 23)])); 
    bst__formatZodate($context, StyString('LITERAL', 'format.date', [(632, 2, 632, 13)])); 
    pushString($context, 'year', StyString('QUOTE', 'year', [(632, 14, 632, 20)])); 
    bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(632, 21, 632, 33)])); 
    bst__newZoblock($context, StyString('LITERAL', 'new.block', [(633, 2, 633, 11)])); 
    pushEntryField($context, 'note', StyString('LITERAL', 'note', [(634, 2, 634, 6)])); 
    bst__output($context, StyString('LITERAL', 'output', [(634, 7, 634, 13)])); 
    bst__finZoentry($context, StyString('LITERAL', 'fin.entry', [(635, 2, 635, 11)])); 
  }
  sub bst__incollection { 
    my ($context) = @_; 
    bst__outputZobibitem($context, StyString('LITERAL', 'output.bibitem', [(639, 2, 639, 16)])); 
    bst__formatZoauthors($context, StyString('LITERAL', 'format.authors', [(640, 2, 640, 16)])); 
    pushString($context, 'author', StyString('QUOTE', 'author', [(640, 17, 640, 25)])); 
    bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(640, 26, 640, 38)])); 
    bst__newZoblock($context, StyString('LITERAL', 'new.block', [(641, 2, 641, 11)])); 
    bst__formatZotitle($context, StyString('LITERAL', 'format.title', [(642, 2, 642, 14)])); 
    pushString($context, 'title', StyString('QUOTE', 'title', [(642, 15, 642, 22)])); 
    bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(642, 23, 642, 35)])); 
    bst__newZoblock($context, StyString('LITERAL', 'new.block', [(643, 2, 643, 11)])); 
    pushEntryField($context, 'crossref', StyString('LITERAL', 'crossref', [(644, 2, 644, 10)])); 
    builtin__missingZs($context, StyString('LITERAL', 'missing$', [(644, 11, 644, 19)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      bst__formatZoinZoedZobooktitle($context, StyString('LITERAL', 'format.in.ed.booktitle', [(645, 6, 645, 28)])); 
      pushString($context, 'booktitle', StyString('QUOTE', 'booktitle', [(645, 29, 645, 40)])); 
      bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(645, 41, 645, 53)])); 
      bst__formatZobvolume($context, StyString('LITERAL', 'format.bvolume', [(646, 6, 646, 20)])); 
      bst__output($context, StyString('LITERAL', 'output', [(646, 21, 646, 27)])); 
      bst__formatZonumberZoseries($context, StyString('LITERAL', 'format.number.series', [(647, 6, 647, 26)])); 
      bst__output($context, StyString('LITERAL', 'output', [(647, 27, 647, 33)])); 
      bst__formatZochapterZopages($context, StyString('LITERAL', 'format.chapter.pages', [(648, 6, 648, 26)])); 
      bst__output($context, StyString('LITERAL', 'output', [(648, 27, 648, 33)])); 
      bst__newZosentence($context, StyString('LITERAL', 'new.sentence', [(649, 6, 649, 18)])); 
      pushEntryField($context, 'publisher', StyString('LITERAL', 'publisher', [(650, 6, 650, 15)])); 
      pushString($context, 'publisher', StyString('QUOTE', 'publisher', [(650, 16, 650, 27)])); 
      bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(650, 28, 650, 40)])); 
      pushEntryField($context, 'address', StyString('LITERAL', 'address', [(651, 6, 651, 13)])); 
      bst__output($context, StyString('LITERAL', 'output', [(651, 14, 651, 20)])); 
      bst__formatZoedition($context, StyString('LITERAL', 'format.edition', [(652, 6, 652, 20)])); 
      bst__output($context, StyString('LITERAL', 'output', [(652, 21, 652, 27)])); 
      bst__formatZodate($context, StyString('LITERAL', 'format.date', [(653, 6, 653, 17)])); 
      pushString($context, 'year', StyString('QUOTE', 'year', [(653, 18, 653, 24)])); 
      bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(653, 25, 653, 37)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'format.in.ed.booktitle', [(645, 6, 645, 28)]), StyString('QUOTE', 'booktitle', [(645, 29, 645, 40)]), StyString('LITERAL', 'output.check', [(645, 41, 645, 53)]), StyString('LITERAL', 'format.bvolume', [(646, 6, 646, 20)]), StyString('LITERAL', 'output', [(646, 21, 646, 27)]), StyString('LITERAL', 'format.number.series', [(647, 6, 647, 26)]), StyString('LITERAL', 'output', [(647, 27, 647, 33)]), StyString('LITERAL', 'format.chapter.pages', [(648, 6, 648, 26)]), StyString('LITERAL', 'output', [(648, 27, 648, 33)]), StyString('LITERAL', 'new.sentence', [(649, 6, 649, 18)]), StyString('LITERAL', 'publisher', [(650, 6, 650, 15)]), StyString('QUOTE', 'publisher', [(650, 16, 650, 27)]), StyString('LITERAL', 'output.check', [(650, 28, 650, 40)]), StyString('LITERAL', 'address', [(651, 6, 651, 13)]), StyString('LITERAL', 'output', [(651, 14, 651, 20)]), StyString('LITERAL', 'format.edition', [(652, 6, 652, 20)]), StyString('LITERAL', 'output', [(652, 21, 652, 27)]), StyString('LITERAL', 'format.date', [(653, 6, 653, 17)]), StyString('QUOTE', 'year', [(653, 18, 653, 24)]), StyString('LITERAL', 'output.check', [(653, 25, 653, 37)]))], [(645, 4, 654, 5)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      bst__formatZoincollZoinprocZocrossref($context, StyString('LITERAL', 'format.incoll.inproc.crossref', [(655, 6, 655, 35)])); 
      bst__outputZononnull($context, StyString('LITERAL', 'output.nonnull', [(655, 36, 655, 50)])); 
      bst__formatZochapterZopages($context, StyString('LITERAL', 'format.chapter.pages', [(656, 6, 656, 26)])); 
      bst__output($context, StyString('LITERAL', 'output', [(656, 27, 656, 33)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'format.incoll.inproc.crossref', [(655, 6, 655, 35)]), StyString('LITERAL', 'output.nonnull', [(655, 36, 655, 50)]), StyString('LITERAL', 'format.chapter.pages', [(656, 6, 656, 26)]), StyString('LITERAL', 'output', [(656, 27, 656, 33)]))], [(655, 4, 657, 5)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(658, 2, 658, 5)])); 
    bst__newZoblock($context, StyString('LITERAL', 'new.block', [(659, 2, 659, 11)])); 
    pushEntryField($context, 'note', StyString('LITERAL', 'note', [(660, 2, 660, 6)])); 
    bst__output($context, StyString('LITERAL', 'output', [(660, 7, 660, 13)])); 
    bst__finZoentry($context, StyString('LITERAL', 'fin.entry', [(661, 2, 661, 11)])); 
  }
  sub bst__inproceedings { 
    my ($context) = @_; 
    bst__outputZobibitem($context, StyString('LITERAL', 'output.bibitem', [(665, 2, 665, 16)])); 
    bst__formatZoauthors($context, StyString('LITERAL', 'format.authors', [(666, 2, 666, 16)])); 
    pushString($context, 'author', StyString('QUOTE', 'author', [(666, 17, 666, 25)])); 
    bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(666, 26, 666, 38)])); 
    bst__newZoblock($context, StyString('LITERAL', 'new.block', [(667, 2, 667, 11)])); 
    bst__formatZotitle($context, StyString('LITERAL', 'format.title', [(668, 2, 668, 14)])); 
    pushString($context, 'title', StyString('QUOTE', 'title', [(668, 15, 668, 22)])); 
    bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(668, 23, 668, 35)])); 
    bst__newZoblock($context, StyString('LITERAL', 'new.block', [(669, 2, 669, 11)])); 
    pushEntryField($context, 'crossref', StyString('LITERAL', 'crossref', [(670, 2, 670, 10)])); 
    builtin__missingZs($context, StyString('LITERAL', 'missing$', [(670, 11, 670, 19)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      bst__formatZoinZoedZobooktitle($context, StyString('LITERAL', 'format.in.ed.booktitle', [(671, 6, 671, 28)])); 
      pushString($context, 'booktitle', StyString('QUOTE', 'booktitle', [(671, 29, 671, 40)])); 
      bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(671, 41, 671, 53)])); 
      bst__formatZobvolume($context, StyString('LITERAL', 'format.bvolume', [(672, 6, 672, 20)])); 
      bst__output($context, StyString('LITERAL', 'output', [(672, 21, 672, 27)])); 
      bst__formatZonumberZoseries($context, StyString('LITERAL', 'format.number.series', [(673, 6, 673, 26)])); 
      bst__output($context, StyString('LITERAL', 'output', [(673, 27, 673, 33)])); 
      bst__formatZopages($context, StyString('LITERAL', 'format.pages', [(674, 6, 674, 18)])); 
      bst__output($context, StyString('LITERAL', 'output', [(674, 19, 674, 25)])); 
      pushEntryField($context, 'address', StyString('LITERAL', 'address', [(675, 6, 675, 13)])); 
      builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(675, 14, 675, 20)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushEntryField($context, 'organization', StyString('LITERAL', 'organization', [(676, 10, 676, 22)])); 
        pushEntryField($context, 'publisher', StyString('LITERAL', 'publisher', [(676, 23, 676, 32)])); 
        bst__newZosentenceZocheckb($context, StyString('LITERAL', 'new.sentence.checkb', [(676, 33, 676, 52)])); 
        pushEntryField($context, 'organization', StyString('LITERAL', 'organization', [(677, 10, 677, 22)])); 
        bst__output($context, StyString('LITERAL', 'output', [(677, 23, 677, 29)])); 
        pushEntryField($context, 'publisher', StyString('LITERAL', 'publisher', [(678, 10, 678, 19)])); 
        bst__output($context, StyString('LITERAL', 'output', [(678, 20, 678, 26)])); 
        bst__formatZodate($context, StyString('LITERAL', 'format.date', [(679, 10, 679, 21)])); 
        pushString($context, 'year', StyString('QUOTE', 'year', [(679, 22, 679, 28)])); 
        bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(679, 29, 679, 41)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'organization', [(676, 10, 676, 22)]), StyString('LITERAL', 'publisher', [(676, 23, 676, 32)]), StyString('LITERAL', 'new.sentence.checkb', [(676, 33, 676, 52)]), StyString('LITERAL', 'organization', [(677, 10, 677, 22)]), StyString('LITERAL', 'output', [(677, 23, 677, 29)]), StyString('LITERAL', 'publisher', [(678, 10, 678, 19)]), StyString('LITERAL', 'output', [(678, 20, 678, 26)]), StyString('LITERAL', 'format.date', [(679, 10, 679, 21)]), StyString('QUOTE', 'year', [(679, 22, 679, 28)]), StyString('LITERAL', 'output.check', [(679, 29, 679, 41)]))], [(676, 8, 680, 9)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushEntryField($context, 'address', StyString('LITERAL', 'address', [(681, 10, 681, 17)])); 
        bst__outputZononnull($context, StyString('LITERAL', 'output.nonnull', [(681, 18, 681, 32)])); 
        bst__formatZodate($context, StyString('LITERAL', 'format.date', [(682, 10, 682, 21)])); 
        pushString($context, 'year', StyString('QUOTE', 'year', [(682, 22, 682, 28)])); 
        bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(682, 29, 682, 41)])); 
        bst__newZosentence($context, StyString('LITERAL', 'new.sentence', [(683, 10, 683, 22)])); 
        pushEntryField($context, 'organization', StyString('LITERAL', 'organization', [(684, 10, 684, 22)])); 
        bst__output($context, StyString('LITERAL', 'output', [(684, 23, 684, 29)])); 
        pushEntryField($context, 'publisher', StyString('LITERAL', 'publisher', [(685, 10, 685, 19)])); 
        bst__output($context, StyString('LITERAL', 'output', [(685, 20, 685, 26)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'address', [(681, 10, 681, 17)]), StyString('LITERAL', 'output.nonnull', [(681, 18, 681, 32)]), StyString('LITERAL', 'format.date', [(682, 10, 682, 21)]), StyString('QUOTE', 'year', [(682, 22, 682, 28)]), StyString('LITERAL', 'output.check', [(682, 29, 682, 41)]), StyString('LITERAL', 'new.sentence', [(683, 10, 683, 22)]), StyString('LITERAL', 'organization', [(684, 10, 684, 22)]), StyString('LITERAL', 'output', [(684, 23, 684, 29)]), StyString('LITERAL', 'publisher', [(685, 10, 685, 19)]), StyString('LITERAL', 'output', [(685, 20, 685, 26)]))], [(681, 8, 686, 9)])); 
      builtin__ifZs($context, StyString('LITERAL', 'if$', [(687, 6, 687, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'format.in.ed.booktitle', [(671, 6, 671, 28)]), StyString('QUOTE', 'booktitle', [(671, 29, 671, 40)]), StyString('LITERAL', 'output.check', [(671, 41, 671, 53)]), StyString('LITERAL', 'format.bvolume', [(672, 6, 672, 20)]), StyString('LITERAL', 'output', [(672, 21, 672, 27)]), StyString('LITERAL', 'format.number.series', [(673, 6, 673, 26)]), StyString('LITERAL', 'output', [(673, 27, 673, 33)]), StyString('LITERAL', 'format.pages', [(674, 6, 674, 18)]), StyString('LITERAL', 'output', [(674, 19, 674, 25)]), StyString('LITERAL', 'address', [(675, 6, 675, 13)]), StyString('LITERAL', 'empty$', [(675, 14, 675, 20)]), StyString('BLOCK', [(StyString('LITERAL', 'organization', [(676, 10, 676, 22)]), StyString('LITERAL', 'publisher', [(676, 23, 676, 32)]), StyString('LITERAL', 'new.sentence.checkb', [(676, 33, 676, 52)]), StyString('LITERAL', 'organization', [(677, 10, 677, 22)]), StyString('LITERAL', 'output', [(677, 23, 677, 29)]), StyString('LITERAL', 'publisher', [(678, 10, 678, 19)]), StyString('LITERAL', 'output', [(678, 20, 678, 26)]), StyString('LITERAL', 'format.date', [(679, 10, 679, 21)]), StyString('QUOTE', 'year', [(679, 22, 679, 28)]), StyString('LITERAL', 'output.check', [(679, 29, 679, 41)]))], [(676, 8, 680, 9)]), StyString('BLOCK', [(StyString('LITERAL', 'address', [(681, 10, 681, 17)]), StyString('LITERAL', 'output.nonnull', [(681, 18, 681, 32)]), StyString('LITERAL', 'format.date', [(682, 10, 682, 21)]), StyString('QUOTE', 'year', [(682, 22, 682, 28)]), StyString('LITERAL', 'output.check', [(682, 29, 682, 41)]), StyString('LITERAL', 'new.sentence', [(683, 10, 683, 22)]), StyString('LITERAL', 'organization', [(684, 10, 684, 22)]), StyString('LITERAL', 'output', [(684, 23, 684, 29)]), StyString('LITERAL', 'publisher', [(685, 10, 685, 19)]), StyString('LITERAL', 'output', [(685, 20, 685, 26)]))], [(681, 8, 686, 9)]), StyString('LITERAL', 'if$', [(687, 6, 687, 9)]))], [(671, 4, 688, 5)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      bst__formatZoincollZoinprocZocrossref($context, StyString('LITERAL', 'format.incoll.inproc.crossref', [(689, 6, 689, 35)])); 
      bst__outputZononnull($context, StyString('LITERAL', 'output.nonnull', [(689, 36, 689, 50)])); 
      bst__formatZopages($context, StyString('LITERAL', 'format.pages', [(690, 6, 690, 18)])); 
      bst__output($context, StyString('LITERAL', 'output', [(690, 19, 690, 25)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'format.incoll.inproc.crossref', [(689, 6, 689, 35)]), StyString('LITERAL', 'output.nonnull', [(689, 36, 689, 50)]), StyString('LITERAL', 'format.pages', [(690, 6, 690, 18)]), StyString('LITERAL', 'output', [(690, 19, 690, 25)]))], [(689, 4, 691, 5)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(692, 2, 692, 5)])); 
    bst__newZoblock($context, StyString('LITERAL', 'new.block', [(693, 2, 693, 11)])); 
    pushEntryField($context, 'note', StyString('LITERAL', 'note', [(694, 2, 694, 6)])); 
    bst__output($context, StyString('LITERAL', 'output', [(694, 7, 694, 13)])); 
    bst__finZoentry($context, StyString('LITERAL', 'fin.entry', [(695, 2, 695, 11)])); 
  }
  sub bst__conference { 
    my ($context) = @_; 
    bst__inproceedings($context, StyString('LITERAL', 'inproceedings', [(698, 24, 698, 37)])); 
  }
  sub bst__manual { 
    my ($context) = @_; 
    bst__outputZobibitem($context, StyString('LITERAL', 'output.bibitem', [(701, 2, 701, 16)])); 
    pushEntryField($context, 'author', StyString('LITERAL', 'author', [(702, 2, 702, 8)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(702, 9, 702, 15)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushEntryField($context, 'organization', StyString('LITERAL', 'organization', [(703, 6, 703, 18)])); 
      builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(703, 19, 703, 25)])); 
      lookupFunction($context, \&builtin__skipZs, StyString('REFERENCE', 'skip$', [(704, 8, 704, 14)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushEntryField($context, 'organization', StyString('LITERAL', 'organization', [(705, 10, 705, 22)])); 
        bst__outputZononnull($context, StyString('LITERAL', 'output.nonnull', [(705, 23, 705, 37)])); 
        pushEntryField($context, 'address', StyString('LITERAL', 'address', [(706, 10, 706, 17)])); 
        bst__output($context, StyString('LITERAL', 'output', [(706, 18, 706, 24)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'organization', [(705, 10, 705, 22)]), StyString('LITERAL', 'output.nonnull', [(705, 23, 705, 37)]), StyString('LITERAL', 'address', [(706, 10, 706, 17)]), StyString('LITERAL', 'output', [(706, 18, 706, 24)]))], [(705, 8, 707, 9)])); 
      builtin__ifZs($context, StyString('LITERAL', 'if$', [(708, 6, 708, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'organization', [(703, 6, 703, 18)]), StyString('LITERAL', 'empty$', [(703, 19, 703, 25)]), StyString('REFERENCE', 'skip$', [(704, 8, 704, 14)]), StyString('BLOCK', [(StyString('LITERAL', 'organization', [(705, 10, 705, 22)]), StyString('LITERAL', 'output.nonnull', [(705, 23, 705, 37)]), StyString('LITERAL', 'address', [(706, 10, 706, 17)]), StyString('LITERAL', 'output', [(706, 18, 706, 24)]))], [(705, 8, 707, 9)]), StyString('LITERAL', 'if$', [(708, 6, 708, 9)]))], [(703, 4, 709, 5)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      bst__formatZoauthors($context, StyString('LITERAL', 'format.authors', [(710, 6, 710, 20)])); 
      bst__outputZononnull($context, StyString('LITERAL', 'output.nonnull', [(710, 21, 710, 35)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'format.authors', [(710, 6, 710, 20)]), StyString('LITERAL', 'output.nonnull', [(710, 21, 710, 35)]))], [(710, 4, 710, 37)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(711, 2, 711, 5)])); 
    bst__newZoblock($context, StyString('LITERAL', 'new.block', [(712, 2, 712, 11)])); 
    bst__formatZobtitle($context, StyString('LITERAL', 'format.btitle', [(713, 2, 713, 15)])); 
    pushString($context, 'title', StyString('QUOTE', 'title', [(713, 16, 713, 23)])); 
    bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(713, 24, 713, 36)])); 
    pushEntryField($context, 'author', StyString('LITERAL', 'author', [(714, 2, 714, 8)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(714, 9, 714, 15)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushEntryField($context, 'organization', StyString('LITERAL', 'organization', [(715, 6, 715, 18)])); 
      builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(715, 19, 715, 25)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushEntryField($context, 'address', StyString('LITERAL', 'address', [(716, 10, 716, 17)])); 
        bst__newZoblockZochecka($context, StyString('LITERAL', 'new.block.checka', [(716, 18, 716, 34)])); 
        pushEntryField($context, 'address', StyString('LITERAL', 'address', [(717, 10, 717, 17)])); 
        bst__output($context, StyString('LITERAL', 'output', [(717, 18, 717, 24)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'address', [(716, 10, 716, 17)]), StyString('LITERAL', 'new.block.checka', [(716, 18, 716, 34)]), StyString('LITERAL', 'address', [(717, 10, 717, 17)]), StyString('LITERAL', 'output', [(717, 18, 717, 24)]))], [(716, 8, 718, 9)])); 
      lookupFunction($context, \&builtin__skipZs, StyString('REFERENCE', 'skip$', [(719, 8, 719, 14)])); 
      builtin__ifZs($context, StyString('LITERAL', 'if$', [(720, 6, 720, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'organization', [(715, 6, 715, 18)]), StyString('LITERAL', 'empty$', [(715, 19, 715, 25)]), StyString('BLOCK', [(StyString('LITERAL', 'address', [(716, 10, 716, 17)]), StyString('LITERAL', 'new.block.checka', [(716, 18, 716, 34)]), StyString('LITERAL', 'address', [(717, 10, 717, 17)]), StyString('LITERAL', 'output', [(717, 18, 717, 24)]))], [(716, 8, 718, 9)]), StyString('REFERENCE', 'skip$', [(719, 8, 719, 14)]), StyString('LITERAL', 'if$', [(720, 6, 720, 9)]))], [(715, 4, 721, 5)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushEntryField($context, 'organization', StyString('LITERAL', 'organization', [(722, 6, 722, 18)])); 
      pushEntryField($context, 'address', StyString('LITERAL', 'address', [(722, 19, 722, 26)])); 
      bst__newZoblockZocheckb($context, StyString('LITERAL', 'new.block.checkb', [(722, 27, 722, 43)])); 
      pushEntryField($context, 'organization', StyString('LITERAL', 'organization', [(723, 6, 723, 18)])); 
      bst__output($context, StyString('LITERAL', 'output', [(723, 19, 723, 25)])); 
      pushEntryField($context, 'address', StyString('LITERAL', 'address', [(724, 6, 724, 13)])); 
      bst__output($context, StyString('LITERAL', 'output', [(724, 14, 724, 20)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'organization', [(722, 6, 722, 18)]), StyString('LITERAL', 'address', [(722, 19, 722, 26)]), StyString('LITERAL', 'new.block.checkb', [(722, 27, 722, 43)]), StyString('LITERAL', 'organization', [(723, 6, 723, 18)]), StyString('LITERAL', 'output', [(723, 19, 723, 25)]), StyString('LITERAL', 'address', [(724, 6, 724, 13)]), StyString('LITERAL', 'output', [(724, 14, 724, 20)]))], [(722, 4, 725, 5)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(726, 2, 726, 5)])); 
    bst__formatZoedition($context, StyString('LITERAL', 'format.edition', [(727, 2, 727, 16)])); 
    bst__output($context, StyString('LITERAL', 'output', [(727, 17, 727, 23)])); 
    bst__formatZodate($context, StyString('LITERAL', 'format.date', [(728, 2, 728, 13)])); 
    bst__output($context, StyString('LITERAL', 'output', [(728, 14, 728, 20)])); 
    bst__newZoblock($context, StyString('LITERAL', 'new.block', [(729, 2, 729, 11)])); 
    pushEntryField($context, 'note', StyString('LITERAL', 'note', [(730, 2, 730, 6)])); 
    bst__output($context, StyString('LITERAL', 'output', [(730, 7, 730, 13)])); 
    bst__finZoentry($context, StyString('LITERAL', 'fin.entry', [(731, 2, 731, 11)])); 
  }
  sub bst__mastersthesis { 
    my ($context) = @_; 
    bst__outputZobibitem($context, StyString('LITERAL', 'output.bibitem', [(735, 2, 735, 16)])); 
    bst__formatZoauthors($context, StyString('LITERAL', 'format.authors', [(736, 2, 736, 16)])); 
    pushString($context, 'author', StyString('QUOTE', 'author', [(736, 17, 736, 25)])); 
    bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(736, 26, 736, 38)])); 
    bst__newZoblock($context, StyString('LITERAL', 'new.block', [(737, 2, 737, 11)])); 
    bst__formatZotitle($context, StyString('LITERAL', 'format.title', [(738, 2, 738, 14)])); 
    pushString($context, 'title', StyString('QUOTE', 'title', [(738, 15, 738, 22)])); 
    bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(738, 23, 738, 35)])); 
    bst__newZoblock($context, StyString('LITERAL', 'new.block', [(739, 2, 739, 11)])); 
    pushString($context, 'Master\'s thesis', StyString('QUOTE', 'Master\'s thesis', [(740, 2, 740, 19)])); 
    bst__formatZothesisZotype($context, StyString('LITERAL', 'format.thesis.type', [(740, 20, 740, 38)])); 
    bst__outputZononnull($context, StyString('LITERAL', 'output.nonnull', [(740, 39, 740, 53)])); 
    pushEntryField($context, 'school', StyString('LITERAL', 'school', [(741, 2, 741, 8)])); 
    pushString($context, 'school', StyString('QUOTE', 'school', [(741, 9, 741, 17)])); 
    bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(741, 18, 741, 30)])); 
    pushEntryField($context, 'address', StyString('LITERAL', 'address', [(742, 2, 742, 9)])); 
    bst__output($context, StyString('LITERAL', 'output', [(742, 10, 742, 16)])); 
    bst__formatZodate($context, StyString('LITERAL', 'format.date', [(743, 2, 743, 13)])); 
    pushString($context, 'year', StyString('QUOTE', 'year', [(743, 14, 743, 20)])); 
    bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(743, 21, 743, 33)])); 
    bst__newZoblock($context, StyString('LITERAL', 'new.block', [(744, 2, 744, 11)])); 
    pushEntryField($context, 'note', StyString('LITERAL', 'note', [(745, 2, 745, 6)])); 
    bst__output($context, StyString('LITERAL', 'output', [(745, 7, 745, 13)])); 
    bst__finZoentry($context, StyString('LITERAL', 'fin.entry', [(746, 2, 746, 11)])); 
  }
  sub bst__misc { 
    my ($context) = @_; 
    bst__outputZobibitem($context, StyString('LITERAL', 'output.bibitem', [(750, 2, 750, 16)])); 
    bst__formatZoauthors($context, StyString('LITERAL', 'format.authors', [(751, 2, 751, 16)])); 
    bst__output($context, StyString('LITERAL', 'output', [(751, 17, 751, 23)])); 
    pushEntryField($context, 'title', StyString('LITERAL', 'title', [(752, 2, 752, 7)])); 
    pushEntryField($context, 'howpublished', StyString('LITERAL', 'howpublished', [(752, 8, 752, 20)])); 
    bst__newZoblockZocheckb($context, StyString('LITERAL', 'new.block.checkb', [(752, 21, 752, 37)])); 
    bst__formatZotitle($context, StyString('LITERAL', 'format.title', [(753, 2, 753, 14)])); 
    bst__output($context, StyString('LITERAL', 'output', [(753, 15, 753, 21)])); 
    pushEntryField($context, 'howpublished', StyString('LITERAL', 'howpublished', [(754, 2, 754, 14)])); 
    bst__newZoblockZochecka($context, StyString('LITERAL', 'new.block.checka', [(754, 15, 754, 31)])); 
    pushEntryField($context, 'howpublished', StyString('LITERAL', 'howpublished', [(755, 2, 755, 14)])); 
    bst__output($context, StyString('LITERAL', 'output', [(755, 15, 755, 21)])); 
    bst__formatZodate($context, StyString('LITERAL', 'format.date', [(756, 2, 756, 13)])); 
    bst__output($context, StyString('LITERAL', 'output', [(756, 14, 756, 20)])); 
    bst__newZoblock($context, StyString('LITERAL', 'new.block', [(757, 2, 757, 11)])); 
    pushEntryField($context, 'note', StyString('LITERAL', 'note', [(758, 2, 758, 6)])); 
    bst__output($context, StyString('LITERAL', 'output', [(758, 7, 758, 13)])); 
    bst__finZoentry($context, StyString('LITERAL', 'fin.entry', [(759, 2, 759, 11)])); 
    bst__emptyZomiscZocheck($context, StyString('LITERAL', 'empty.misc.check', [(760, 2, 760, 18)])); 
  }
  sub bst__phdthesis { 
    my ($context) = @_; 
    bst__outputZobibitem($context, StyString('LITERAL', 'output.bibitem', [(764, 2, 764, 16)])); 
    bst__formatZoauthors($context, StyString('LITERAL', 'format.authors', [(765, 2, 765, 16)])); 
    pushString($context, 'author', StyString('QUOTE', 'author', [(765, 17, 765, 25)])); 
    bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(765, 26, 765, 38)])); 
    bst__newZoblock($context, StyString('LITERAL', 'new.block', [(766, 2, 766, 11)])); 
    bst__formatZobtitle($context, StyString('LITERAL', 'format.btitle', [(767, 2, 767, 15)])); 
    pushString($context, 'title', StyString('QUOTE', 'title', [(767, 16, 767, 23)])); 
    bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(767, 24, 767, 36)])); 
    bst__newZoblock($context, StyString('LITERAL', 'new.block', [(768, 2, 768, 11)])); 
    pushString($context, 'PhD thesis', StyString('QUOTE', 'PhD thesis', [(769, 2, 769, 14)])); 
    bst__formatZothesisZotype($context, StyString('LITERAL', 'format.thesis.type', [(769, 15, 769, 33)])); 
    bst__outputZononnull($context, StyString('LITERAL', 'output.nonnull', [(769, 34, 769, 48)])); 
    pushEntryField($context, 'school', StyString('LITERAL', 'school', [(770, 2, 770, 8)])); 
    pushString($context, 'school', StyString('QUOTE', 'school', [(770, 9, 770, 17)])); 
    bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(770, 18, 770, 30)])); 
    pushEntryField($context, 'address', StyString('LITERAL', 'address', [(771, 2, 771, 9)])); 
    bst__output($context, StyString('LITERAL', 'output', [(771, 10, 771, 16)])); 
    bst__formatZodate($context, StyString('LITERAL', 'format.date', [(772, 2, 772, 13)])); 
    pushString($context, 'year', StyString('QUOTE', 'year', [(772, 14, 772, 20)])); 
    bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(772, 21, 772, 33)])); 
    bst__newZoblock($context, StyString('LITERAL', 'new.block', [(773, 2, 773, 11)])); 
    pushEntryField($context, 'note', StyString('LITERAL', 'note', [(774, 2, 774, 6)])); 
    bst__output($context, StyString('LITERAL', 'output', [(774, 7, 774, 13)])); 
    bst__finZoentry($context, StyString('LITERAL', 'fin.entry', [(775, 2, 775, 11)])); 
  }
  sub bst__proceedings { 
    my ($context) = @_; 
    bst__outputZobibitem($context, StyString('LITERAL', 'output.bibitem', [(779, 2, 779, 16)])); 
    pushEntryField($context, 'editor', StyString('LITERAL', 'editor', [(780, 2, 780, 8)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(780, 9, 780, 15)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushEntryField($context, 'organization', StyString('LITERAL', 'organization', [(781, 6, 781, 18)])); 
      bst__output($context, StyString('LITERAL', 'output', [(781, 19, 781, 25)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'organization', [(781, 6, 781, 18)]), StyString('LITERAL', 'output', [(781, 19, 781, 25)]))], [(781, 4, 781, 27)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      bst__formatZoeditors($context, StyString('LITERAL', 'format.editors', [(782, 6, 782, 20)])); 
      bst__outputZononnull($context, StyString('LITERAL', 'output.nonnull', [(782, 21, 782, 35)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'format.editors', [(782, 6, 782, 20)]), StyString('LITERAL', 'output.nonnull', [(782, 21, 782, 35)]))], [(782, 4, 782, 37)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(783, 2, 783, 5)])); 
    bst__newZoblock($context, StyString('LITERAL', 'new.block', [(784, 2, 784, 11)])); 
    bst__formatZobtitle($context, StyString('LITERAL', 'format.btitle', [(785, 2, 785, 15)])); 
    pushString($context, 'title', StyString('QUOTE', 'title', [(785, 16, 785, 23)])); 
    bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(785, 24, 785, 36)])); 
    bst__formatZobvolume($context, StyString('LITERAL', 'format.bvolume', [(786, 2, 786, 16)])); 
    bst__output($context, StyString('LITERAL', 'output', [(786, 17, 786, 23)])); 
    bst__formatZonumberZoseries($context, StyString('LITERAL', 'format.number.series', [(787, 2, 787, 22)])); 
    bst__output($context, StyString('LITERAL', 'output', [(787, 23, 787, 29)])); 
    pushEntryField($context, 'address', StyString('LITERAL', 'address', [(788, 2, 788, 9)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(788, 10, 788, 16)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushEntryField($context, 'editor', StyString('LITERAL', 'editor', [(789, 6, 789, 12)])); 
      builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(789, 13, 789, 19)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushEntryField($context, 'publisher', StyString('LITERAL', 'publisher', [(790, 10, 790, 19)])); 
        bst__newZosentenceZochecka($context, StyString('LITERAL', 'new.sentence.checka', [(790, 20, 790, 39)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'publisher', [(790, 10, 790, 19)]), StyString('LITERAL', 'new.sentence.checka', [(790, 20, 790, 39)]))], [(790, 8, 790, 41)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushEntryField($context, 'organization', StyString('LITERAL', 'organization', [(791, 10, 791, 22)])); 
        pushEntryField($context, 'publisher', StyString('LITERAL', 'publisher', [(791, 23, 791, 32)])); 
        bst__newZosentenceZocheckb($context, StyString('LITERAL', 'new.sentence.checkb', [(791, 33, 791, 52)])); 
        pushEntryField($context, 'organization', StyString('LITERAL', 'organization', [(792, 10, 792, 22)])); 
        bst__output($context, StyString('LITERAL', 'output', [(792, 23, 792, 29)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'organization', [(791, 10, 791, 22)]), StyString('LITERAL', 'publisher', [(791, 23, 791, 32)]), StyString('LITERAL', 'new.sentence.checkb', [(791, 33, 791, 52)]), StyString('LITERAL', 'organization', [(792, 10, 792, 22)]), StyString('LITERAL', 'output', [(792, 23, 792, 29)]))], [(791, 8, 793, 9)])); 
      builtin__ifZs($context, StyString('LITERAL', 'if$', [(794, 6, 794, 9)])); 
      pushEntryField($context, 'publisher', StyString('LITERAL', 'publisher', [(795, 6, 795, 15)])); 
      bst__output($context, StyString('LITERAL', 'output', [(795, 16, 795, 22)])); 
      bst__formatZodate($context, StyString('LITERAL', 'format.date', [(796, 6, 796, 17)])); 
      pushString($context, 'year', StyString('QUOTE', 'year', [(796, 18, 796, 24)])); 
      bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(796, 25, 796, 37)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'editor', [(789, 6, 789, 12)]), StyString('LITERAL', 'empty$', [(789, 13, 789, 19)]), StyString('BLOCK', [(StyString('LITERAL', 'publisher', [(790, 10, 790, 19)]), StyString('LITERAL', 'new.sentence.checka', [(790, 20, 790, 39)]))], [(790, 8, 790, 41)]), StyString('BLOCK', [(StyString('LITERAL', 'organization', [(791, 10, 791, 22)]), StyString('LITERAL', 'publisher', [(791, 23, 791, 32)]), StyString('LITERAL', 'new.sentence.checkb', [(791, 33, 791, 52)]), StyString('LITERAL', 'organization', [(792, 10, 792, 22)]), StyString('LITERAL', 'output', [(792, 23, 792, 29)]))], [(791, 8, 793, 9)]), StyString('LITERAL', 'if$', [(794, 6, 794, 9)]), StyString('LITERAL', 'publisher', [(795, 6, 795, 15)]), StyString('LITERAL', 'output', [(795, 16, 795, 22)]), StyString('LITERAL', 'format.date', [(796, 6, 796, 17)]), StyString('QUOTE', 'year', [(796, 18, 796, 24)]), StyString('LITERAL', 'output.check', [(796, 25, 796, 37)]))], [(789, 4, 797, 5)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushEntryField($context, 'address', StyString('LITERAL', 'address', [(798, 6, 798, 13)])); 
      bst__outputZononnull($context, StyString('LITERAL', 'output.nonnull', [(798, 14, 798, 28)])); 
      bst__formatZodate($context, StyString('LITERAL', 'format.date', [(799, 6, 799, 17)])); 
      pushString($context, 'year', StyString('QUOTE', 'year', [(799, 18, 799, 24)])); 
      bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(799, 25, 799, 37)])); 
      bst__newZosentence($context, StyString('LITERAL', 'new.sentence', [(800, 6, 800, 18)])); 
      pushEntryField($context, 'editor', StyString('LITERAL', 'editor', [(801, 6, 801, 12)])); 
      builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(801, 13, 801, 19)])); 
      lookupFunction($context, \&builtin__skipZs, StyString('REFERENCE', 'skip$', [(802, 8, 802, 14)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushEntryField($context, 'organization', StyString('LITERAL', 'organization', [(803, 10, 803, 22)])); 
        bst__output($context, StyString('LITERAL', 'output', [(803, 23, 803, 29)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'organization', [(803, 10, 803, 22)]), StyString('LITERAL', 'output', [(803, 23, 803, 29)]))], [(803, 8, 803, 31)])); 
      builtin__ifZs($context, StyString('LITERAL', 'if$', [(804, 6, 804, 9)])); 
      pushEntryField($context, 'publisher', StyString('LITERAL', 'publisher', [(805, 6, 805, 15)])); 
      bst__output($context, StyString('LITERAL', 'output', [(805, 16, 805, 22)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'address', [(798, 6, 798, 13)]), StyString('LITERAL', 'output.nonnull', [(798, 14, 798, 28)]), StyString('LITERAL', 'format.date', [(799, 6, 799, 17)]), StyString('QUOTE', 'year', [(799, 18, 799, 24)]), StyString('LITERAL', 'output.check', [(799, 25, 799, 37)]), StyString('LITERAL', 'new.sentence', [(800, 6, 800, 18)]), StyString('LITERAL', 'editor', [(801, 6, 801, 12)]), StyString('LITERAL', 'empty$', [(801, 13, 801, 19)]), StyString('REFERENCE', 'skip$', [(802, 8, 802, 14)]), StyString('BLOCK', [(StyString('LITERAL', 'organization', [(803, 10, 803, 22)]), StyString('LITERAL', 'output', [(803, 23, 803, 29)]))], [(803, 8, 803, 31)]), StyString('LITERAL', 'if$', [(804, 6, 804, 9)]), StyString('LITERAL', 'publisher', [(805, 6, 805, 15)]), StyString('LITERAL', 'output', [(805, 16, 805, 22)]))], [(798, 4, 806, 5)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(807, 2, 807, 5)])); 
    bst__newZoblock($context, StyString('LITERAL', 'new.block', [(808, 2, 808, 11)])); 
    pushEntryField($context, 'note', StyString('LITERAL', 'note', [(809, 2, 809, 6)])); 
    bst__output($context, StyString('LITERAL', 'output', [(809, 7, 809, 13)])); 
    bst__finZoentry($context, StyString('LITERAL', 'fin.entry', [(810, 2, 810, 11)])); 
  }
  sub bst__techreport { 
    my ($context) = @_; 
    bst__outputZobibitem($context, StyString('LITERAL', 'output.bibitem', [(814, 2, 814, 16)])); 
    bst__formatZoauthors($context, StyString('LITERAL', 'format.authors', [(815, 2, 815, 16)])); 
    pushString($context, 'author', StyString('QUOTE', 'author', [(815, 17, 815, 25)])); 
    bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(815, 26, 815, 38)])); 
    bst__newZoblock($context, StyString('LITERAL', 'new.block', [(816, 2, 816, 11)])); 
    bst__formatZotitle($context, StyString('LITERAL', 'format.title', [(817, 2, 817, 14)])); 
    pushString($context, 'title', StyString('QUOTE', 'title', [(817, 15, 817, 22)])); 
    bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(817, 23, 817, 35)])); 
    bst__newZoblock($context, StyString('LITERAL', 'new.block', [(818, 2, 818, 11)])); 
    bst__formatZotrZonumber($context, StyString('LITERAL', 'format.tr.number', [(819, 2, 819, 18)])); 
    bst__outputZononnull($context, StyString('LITERAL', 'output.nonnull', [(819, 19, 819, 33)])); 
    pushEntryField($context, 'institution', StyString('LITERAL', 'institution', [(820, 2, 820, 13)])); 
    pushString($context, 'institution', StyString('QUOTE', 'institution', [(820, 14, 820, 27)])); 
    bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(820, 28, 820, 40)])); 
    pushEntryField($context, 'address', StyString('LITERAL', 'address', [(821, 2, 821, 9)])); 
    bst__output($context, StyString('LITERAL', 'output', [(821, 10, 821, 16)])); 
    bst__formatZodate($context, StyString('LITERAL', 'format.date', [(822, 2, 822, 13)])); 
    pushString($context, 'year', StyString('QUOTE', 'year', [(822, 14, 822, 20)])); 
    bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(822, 21, 822, 33)])); 
    bst__newZoblock($context, StyString('LITERAL', 'new.block', [(823, 2, 823, 11)])); 
    pushEntryField($context, 'note', StyString('LITERAL', 'note', [(824, 2, 824, 6)])); 
    bst__output($context, StyString('LITERAL', 'output', [(824, 7, 824, 13)])); 
    bst__finZoentry($context, StyString('LITERAL', 'fin.entry', [(825, 2, 825, 11)])); 
  }
  sub bst__unpublished { 
    my ($context) = @_; 
    bst__outputZobibitem($context, StyString('LITERAL', 'output.bibitem', [(829, 2, 829, 16)])); 
    bst__formatZoauthors($context, StyString('LITERAL', 'format.authors', [(830, 2, 830, 16)])); 
    pushString($context, 'author', StyString('QUOTE', 'author', [(830, 17, 830, 25)])); 
    bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(830, 26, 830, 38)])); 
    bst__newZoblock($context, StyString('LITERAL', 'new.block', [(831, 2, 831, 11)])); 
    bst__formatZotitle($context, StyString('LITERAL', 'format.title', [(832, 2, 832, 14)])); 
    pushString($context, 'title', StyString('QUOTE', 'title', [(832, 15, 832, 22)])); 
    bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(832, 23, 832, 35)])); 
    bst__newZoblock($context, StyString('LITERAL', 'new.block', [(833, 2, 833, 11)])); 
    pushEntryField($context, 'note', StyString('LITERAL', 'note', [(834, 2, 834, 6)])); 
    pushString($context, 'note', StyString('QUOTE', 'note', [(834, 7, 834, 13)])); 
    bst__outputZocheck($context, StyString('LITERAL', 'output.check', [(834, 14, 834, 26)])); 
    bst__formatZodate($context, StyString('LITERAL', 'format.date', [(835, 2, 835, 13)])); 
    bst__output($context, StyString('LITERAL', 'output', [(835, 14, 835, 20)])); 
    bst__finZoentry($context, StyString('LITERAL', 'fin.entry', [(836, 2, 836, 11)])); 
  }
  sub bst__defaultZotype { 
    my ($context) = @_; 
    bst__misc($context, StyString('LITERAL', 'misc', [(839, 26, 839, 30)])); 
  }
  defineMacro($context, 'jan', 'January', StyString('LITERAL', 'jan', [(841, 7, 841, 10)]));   defineMacro($context, 'feb', 'February', StyString('LITERAL', 'feb', [(843, 7, 843, 10)]));   defineMacro($context, 'mar', 'March', StyString('LITERAL', 'mar', [(845, 7, 845, 10)]));   defineMacro($context, 'apr', 'April', StyString('LITERAL', 'apr', [(847, 7, 847, 10)]));   defineMacro($context, 'may', 'May', StyString('LITERAL', 'may', [(849, 7, 849, 10)]));   defineMacro($context, 'jun', 'June', StyString('LITERAL', 'jun', [(851, 7, 851, 10)]));   defineMacro($context, 'jul', 'July', StyString('LITERAL', 'jul', [(853, 7, 853, 10)]));   defineMacro($context, 'aug', 'August', StyString('LITERAL', 'aug', [(855, 7, 855, 10)]));   defineMacro($context, 'sep', 'September', StyString('LITERAL', 'sep', [(857, 7, 857, 10)]));   defineMacro($context, 'oct', 'October', StyString('LITERAL', 'oct', [(859, 7, 859, 10)]));   defineMacro($context, 'nov', 'November', StyString('LITERAL', 'nov', [(861, 7, 861, 10)]));   defineMacro($context, 'dec', 'December', StyString('LITERAL', 'dec', [(863, 7, 863, 10)]));   defineMacro($context, 'acmcs', 'ACM Computing Surveys', StyString('LITERAL', 'acmcs', [(865, 7, 865, 12)]));   defineMacro($context, 'acta', 'Acta Informatica', StyString('LITERAL', 'acta', [(867, 7, 867, 11)]));   defineMacro($context, 'cacm', 'Communications of the ACM', StyString('LITERAL', 'cacm', [(869, 7, 869, 11)]));   defineMacro($context, 'ibmjrd', 'IBM Journal of Research and Development', StyString('LITERAL', 'ibmjrd', [(871, 7, 871, 13)]));   defineMacro($context, 'ibmsj', 'IBM Systems Journal', StyString('LITERAL', 'ibmsj', [(873, 7, 873, 12)]));   defineMacro($context, 'ieeese', 'IEEE Transactions on Software Engineering', StyString('LITERAL', 'ieeese', [(875, 7, 875, 13)]));   defineMacro($context, 'ieeetc', 'IEEE Transactions on Computers', StyString('LITERAL', 'ieeetc', [(877, 7, 877, 13)]));   defineMacro($context, 'ieeetcad', 'IEEE Transactions on Computer-Aided Design of Integrated Circuits', StyString('LITERAL', 'ieeetcad', [(879, 7, 879, 15)]));   defineMacro($context, 'ipl', 'Information Processing Letters', StyString('LITERAL', 'ipl', [(882, 7, 882, 10)]));   defineMacro($context, 'jacm', 'Journal of the ACM', StyString('LITERAL', 'jacm', [(884, 7, 884, 11)]));   defineMacro($context, 'jcss', 'Journal of Computer and System Sciences', StyString('LITERAL', 'jcss', [(886, 7, 886, 11)]));   defineMacro($context, 'scp', 'Science of Computer Programming', StyString('LITERAL', 'scp', [(888, 7, 888, 10)]));   defineMacro($context, 'sicomp', 'SIAM Journal on Computing', StyString('LITERAL', 'sicomp', [(890, 7, 890, 13)]));   defineMacro($context, 'tocs', 'ACM Transactions on Computer Systems', StyString('LITERAL', 'tocs', [(892, 7, 892, 11)]));   defineMacro($context, 'tods', 'ACM Transactions on Database Systems', StyString('LITERAL', 'tods', [(894, 7, 894, 11)]));   defineMacro($context, 'tog', 'ACM Transactions on Graphics', StyString('LITERAL', 'tog', [(896, 7, 896, 10)]));   defineMacro($context, 'toms', 'ACM Transactions on Mathematical Software', StyString('LITERAL', 'toms', [(898, 7, 898, 11)]));   defineMacro($context, 'toois', 'ACM Transactions on Office Information Systems', StyString('LITERAL', 'toois', [(900, 7, 900, 12)]));   defineMacro($context, 'toplas', 'ACM Transactions on Programming Languages and Systems', StyString('LITERAL', 'toplas', [(902, 7, 902, 13)]));   defineMacro($context, 'tcs', 'Theoretical Computer Science', StyString('LITERAL', 'tcs', [(904, 7, 904, 10)]));   readEntries($context, StyCommand(StyString('LITERAL', 'READ', [(905, 1, 906, 4)]), [()], [(905, 1, 906, 4)])); 
  sub bst__sortify { 
    my ($context) = @_; 
    builtin__purifyZs($context, StyString('LITERAL', 'purify$', [(909, 2, 909, 9)])); 
    pushString($context, 'l', StyString('QUOTE', 'l', [(910, 2, 910, 5)])); 
    builtin__changeZocaseZs($context, StyString('LITERAL', 'change.case$', [(910, 6, 910, 18)])); 
  }
  defineGlobalInteger($context, 'len', StyString('LITERAL', 'len', [(913, 11, 913, 14)])); 
  sub bst__chopZoword { 
    my ($context) = @_; 
    lookupGlobalString($context, 's', StyString('REFERENCE', 's', [(916, 2, 916, 4)])); 
    builtin__ZcZe($context, StyString('LITERAL', ':=', [(916, 5, 916, 7)])); 
    lookupGlobalInteger($context, 'len', StyString('REFERENCE', 'len', [(917, 2, 917, 6)])); 
    builtin__ZcZe($context, StyString('LITERAL', ':=', [(917, 7, 917, 9)])); 
    pushGlobalString($context, 's', StyString('LITERAL', 's', [(918, 2, 918, 3)])); 
    pushInteger($context, 1, StyString('NUMBER', 1, [(918, 4, 918, 6)])); 
    pushGlobalInteger($context, 'len', StyString('LITERAL', 'len', [(918, 7, 918, 10)])); 
    builtin__substringZs($context, StyString('LITERAL', 'substring$', [(918, 11, 918, 21)])); 
    builtin__Ze($context, StyString('LITERAL', '=', [(918, 22, 918, 23)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushGlobalString($context, 's', StyString('LITERAL', 's', [(919, 6, 919, 7)])); 
      pushGlobalInteger($context, 'len', StyString('LITERAL', 'len', [(919, 8, 919, 11)])); 
      pushInteger($context, 1, StyString('NUMBER', 1, [(919, 12, 919, 14)])); 
      builtin__Zp($context, StyString('LITERAL', '+', [(919, 15, 919, 16)])); 
      pushGlobalInteger($context, 'global.max$', StyString('LITERAL', 'global.max$', [(919, 17, 919, 28)])); 
      builtin__substringZs($context, StyString('LITERAL', 'substring$', [(919, 29, 919, 39)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 's', [(919, 6, 919, 7)]), StyString('LITERAL', 'len', [(919, 8, 919, 11)]), StyString('NUMBER', 1, [(919, 12, 919, 14)]), StyString('LITERAL', '+', [(919, 15, 919, 16)]), StyString('LITERAL', 'global.max$', [(919, 17, 919, 28)]), StyString('LITERAL', 'substring$', [(919, 29, 919, 39)]))], [(919, 4, 919, 41)])); 
    lookupGlobalString($context, 's', StyString('REFERENCE', 's', [(920, 4, 920, 6)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(921, 2, 921, 5)])); 
  }
  sub bst__sortZoformatZonames { 
    my ($context) = @_; 
    lookupGlobalString($context, 's', StyString('REFERENCE', 's', [(925, 2, 925, 4)])); 
    builtin__ZcZe($context, StyString('LITERAL', ':=', [(925, 5, 925, 7)])); 
    pushInteger($context, 1, StyString('NUMBER', 1, [(926, 2, 926, 4)])); 
    lookupGlobalInteger($context, 'nameptr', StyString('REFERENCE', 'nameptr', [(926, 5, 926, 13)])); 
    builtin__ZcZe($context, StyString('LITERAL', ':=', [(926, 14, 926, 16)])); 
    pushString($context, '', StyString('QUOTE', '', [(927, 2, 927, 4)])); 
    pushGlobalString($context, 's', StyString('LITERAL', 's', [(928, 2, 928, 3)])); 
    builtin__numZonamesZs($context, StyString('LITERAL', 'num.names$', [(928, 4, 928, 14)])); 
    lookupGlobalInteger($context, 'numnames', StyString('REFERENCE', 'numnames', [(928, 15, 928, 24)])); 
    builtin__ZcZe($context, StyString('LITERAL', ':=', [(928, 25, 928, 27)])); 
    pushGlobalInteger($context, 'numnames', StyString('LITERAL', 'numnames', [(929, 2, 929, 10)])); 
    lookupGlobalInteger($context, 'namesleft', StyString('REFERENCE', 'namesleft', [(929, 11, 929, 21)])); 
    builtin__ZcZe($context, StyString('LITERAL', ':=', [(929, 22, 929, 24)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushGlobalInteger($context, 'namesleft', StyString('LITERAL', 'namesleft', [(930, 6, 930, 15)])); 
      pushInteger($context, 0, StyString('NUMBER', 0, [(930, 16, 930, 18)])); 
      builtin__Zg($context, StyString('LITERAL', '>', [(930, 19, 930, 20)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'namesleft', [(930, 6, 930, 15)]), StyString('NUMBER', 0, [(930, 16, 930, 18)]), StyString('LITERAL', '>', [(930, 19, 930, 20)]))], [(930, 4, 930, 22)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushGlobalInteger($context, 'nameptr', StyString('LITERAL', 'nameptr', [(931, 6, 931, 13)])); 
      pushInteger($context, 1, StyString('NUMBER', 1, [(931, 14, 931, 16)])); 
      builtin__Zg($context, StyString('LITERAL', '>', [(931, 17, 931, 18)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushString($context, '   ', StyString('QUOTE', '   ', [(932, 10, 932, 15)])); 
        builtin__Za($context, StyString('LITERAL', '*', [(932, 16, 932, 17)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', '   ', [(932, 10, 932, 15)]), StyString('LITERAL', '*', [(932, 16, 932, 17)]))], [(932, 8, 932, 19)])); 
      lookupFunction($context, \&builtin__skipZs, StyString('REFERENCE', 'skip$', [(933, 8, 933, 14)])); 
      builtin__ifZs($context, StyString('LITERAL', 'if$', [(934, 6, 934, 9)])); 
      pushGlobalString($context, 's', StyString('LITERAL', 's', [(935, 6, 935, 7)])); 
      pushGlobalInteger($context, 'nameptr', StyString('LITERAL', 'nameptr', [(935, 8, 935, 15)])); 
      pushString($context, '{vv{ } }{ll{ }}{  ff{ }}{  jj{ }}', StyString('QUOTE', '{vv{ } }{ll{ }}{  ff{ }}{  jj{ }}', [(935, 16, 935, 51)])); 
      builtin__formatZonameZs($context, StyString('LITERAL', 'format.name$', [(935, 52, 935, 64)])); 
      lookupGlobalString($context, 't', StyString('REFERENCE', 't', [(935, 65, 935, 67)])); 
      builtin__ZcZe($context, StyString('LITERAL', ':=', [(935, 68, 935, 70)])); 
      pushGlobalInteger($context, 'nameptr', StyString('LITERAL', 'nameptr', [(936, 6, 936, 13)])); 
      pushGlobalInteger($context, 'numnames', StyString('LITERAL', 'numnames', [(936, 14, 936, 22)])); 
      builtin__Ze($context, StyString('LITERAL', '=', [(936, 23, 936, 24)])); 
      pushGlobalString($context, 't', StyString('LITERAL', 't', [(936, 25, 936, 26)])); 
      pushString($context, 'others', StyString('QUOTE', 'others', [(936, 27, 936, 35)])); 
      builtin__Ze($context, StyString('LITERAL', '=', [(936, 36, 936, 37)])); 
      bst__and($context, StyString('LITERAL', 'and', [(936, 38, 936, 41)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushString($context, 'et al', StyString('QUOTE', 'et al', [(937, 10, 937, 17)])); 
        builtin__Za($context, StyString('LITERAL', '*', [(937, 18, 937, 19)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', 'et al', [(937, 10, 937, 17)]), StyString('LITERAL', '*', [(937, 18, 937, 19)]))], [(937, 8, 937, 21)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushGlobalString($context, 't', StyString('LITERAL', 't', [(938, 10, 938, 11)])); 
        bst__sortify($context, StyString('LITERAL', 'sortify', [(938, 12, 938, 19)])); 
        builtin__Za($context, StyString('LITERAL', '*', [(938, 20, 938, 21)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 't', [(938, 10, 938, 11)]), StyString('LITERAL', 'sortify', [(938, 12, 938, 19)]), StyString('LITERAL', '*', [(938, 20, 938, 21)]))], [(938, 8, 938, 23)])); 
      builtin__ifZs($context, StyString('LITERAL', 'if$', [(939, 6, 939, 9)])); 
      pushGlobalInteger($context, 'nameptr', StyString('LITERAL', 'nameptr', [(940, 6, 940, 13)])); 
      pushInteger($context, 1, StyString('NUMBER', 1, [(940, 14, 940, 16)])); 
      builtin__Zp($context, StyString('LITERAL', '+', [(940, 17, 940, 18)])); 
      lookupGlobalInteger($context, 'nameptr', StyString('REFERENCE', 'nameptr', [(940, 19, 940, 27)])); 
      builtin__ZcZe($context, StyString('LITERAL', ':=', [(940, 28, 940, 30)])); 
      pushGlobalInteger($context, 'namesleft', StyString('LITERAL', 'namesleft', [(941, 6, 941, 15)])); 
      pushInteger($context, 1, StyString('NUMBER', 1, [(941, 16, 941, 18)])); 
      builtin__Zm($context, StyString('LITERAL', '-', [(941, 19, 941, 20)])); 
      lookupGlobalInteger($context, 'namesleft', StyString('REFERENCE', 'namesleft', [(941, 21, 941, 31)])); 
      builtin__ZcZe($context, StyString('LITERAL', ':=', [(941, 32, 941, 34)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'nameptr', [(931, 6, 931, 13)]), StyString('NUMBER', 1, [(931, 14, 931, 16)]), StyString('LITERAL', '>', [(931, 17, 931, 18)]), StyString('BLOCK', [(StyString('QUOTE', '   ', [(932, 10, 932, 15)]), StyString('LITERAL', '*', [(932, 16, 932, 17)]))], [(932, 8, 932, 19)]), StyString('REFERENCE', 'skip$', [(933, 8, 933, 14)]), StyString('LITERAL', 'if$', [(934, 6, 934, 9)]), StyString('LITERAL', 's', [(935, 6, 935, 7)]), StyString('LITERAL', 'nameptr', [(935, 8, 935, 15)]), StyString('QUOTE', '{vv{ } }{ll{ }}{  ff{ }}{  jj{ }}', [(935, 16, 935, 51)]), StyString('LITERAL', 'format.name$', [(935, 52, 935, 64)]), StyString('REFERENCE', 't', [(935, 65, 935, 67)]), StyString('LITERAL', ':=', [(935, 68, 935, 70)]), StyString('LITERAL', 'nameptr', [(936, 6, 936, 13)]), StyString('LITERAL', 'numnames', [(936, 14, 936, 22)]), StyString('LITERAL', '=', [(936, 23, 936, 24)]), StyString('LITERAL', 't', [(936, 25, 936, 26)]), StyString('QUOTE', 'others', [(936, 27, 936, 35)]), StyString('LITERAL', '=', [(936, 36, 936, 37)]), StyString('LITERAL', 'and', [(936, 38, 936, 41)]), StyString('BLOCK', [(StyString('QUOTE', 'et al', [(937, 10, 937, 17)]), StyString('LITERAL', '*', [(937, 18, 937, 19)]))], [(937, 8, 937, 21)]), StyString('BLOCK', [(StyString('LITERAL', 't', [(938, 10, 938, 11)]), StyString('LITERAL', 'sortify', [(938, 12, 938, 19)]), StyString('LITERAL', '*', [(938, 20, 938, 21)]))], [(938, 8, 938, 23)]), StyString('LITERAL', 'if$', [(939, 6, 939, 9)]), StyString('LITERAL', 'nameptr', [(940, 6, 940, 13)]), StyString('NUMBER', 1, [(940, 14, 940, 16)]), StyString('LITERAL', '+', [(940, 17, 940, 18)]), StyString('REFERENCE', 'nameptr', [(940, 19, 940, 27)]), StyString('LITERAL', ':=', [(940, 28, 940, 30)]), StyString('LITERAL', 'namesleft', [(941, 6, 941, 15)]), StyString('NUMBER', 1, [(941, 16, 941, 18)]), StyString('LITERAL', '-', [(941, 19, 941, 20)]), StyString('REFERENCE', 'namesleft', [(941, 21, 941, 31)]), StyString('LITERAL', ':=', [(941, 32, 941, 34)]))], [(931, 4, 942, 5)])); 
    builtin__whileZs($context, StyString('LITERAL', 'while$', [(943, 2, 943, 8)])); 
  }
  sub bst__sortZoformatZotitle { 
    my ($context) = @_; 
    lookupGlobalString($context, 't', StyString('REFERENCE', 't', [(947, 2, 947, 4)])); 
    builtin__ZcZe($context, StyString('LITERAL', ':=', [(947, 5, 947, 7)])); 
    pushString($context, 'A ', StyString('QUOTE', 'A ', [(948, 2, 948, 6)])); 
    pushInteger($context, 2, StyString('NUMBER', 2, [(948, 7, 948, 9)])); 
    pushString($context, 'An ', StyString('QUOTE', 'An ', [(949, 4, 949, 9)])); 
    pushInteger($context, 3, StyString('NUMBER', 3, [(949, 10, 949, 12)])); 
    pushString($context, 'The ', StyString('QUOTE', 'The ', [(950, 6, 950, 12)])); 
    pushInteger($context, 4, StyString('NUMBER', 4, [(950, 13, 950, 15)])); 
    pushGlobalString($context, 't', StyString('LITERAL', 't', [(950, 16, 950, 17)])); 
    bst__chopZoword($context, StyString('LITERAL', 'chop.word', [(950, 18, 950, 27)])); 
    bst__chopZoword($context, StyString('LITERAL', 'chop.word', [(951, 4, 951, 13)])); 
    bst__chopZoword($context, StyString('LITERAL', 'chop.word', [(952, 2, 952, 11)])); 
    bst__sortify($context, StyString('LITERAL', 'sortify', [(953, 2, 953, 9)])); 
    pushInteger($context, 1, StyString('NUMBER', 1, [(954, 2, 954, 4)])); 
    pushGlobalInteger($context, 'global.max$', StyString('LITERAL', 'global.max$', [(954, 5, 954, 16)])); 
    builtin__substringZs($context, StyString('LITERAL', 'substring$', [(954, 17, 954, 27)])); 
  }
  sub bst__authorZosort { 
    my ($context) = @_; 
    pushEntryField($context, 'author', StyString('LITERAL', 'author', [(958, 2, 958, 8)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(958, 9, 958, 15)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushEntryField($context, 'key', StyString('LITERAL', 'key', [(959, 6, 959, 9)])); 
      builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(959, 10, 959, 16)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushString($context, 'to sort, need author or key in ', StyString('QUOTE', 'to sort, need author or key in ', [(960, 10, 960, 43)])); 
        builtin__citeZs($context, StyString('LITERAL', 'cite$', [(960, 44, 960, 49)])); 
        builtin__Za($context, StyString('LITERAL', '*', [(960, 50, 960, 51)])); 
        builtin__warningZs($context, StyString('LITERAL', 'warning$', [(960, 52, 960, 60)])); 
        pushString($context, '', StyString('QUOTE', '', [(961, 10, 961, 12)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', 'to sort, need author or key in ', [(960, 10, 960, 43)]), StyString('LITERAL', 'cite$', [(960, 44, 960, 49)]), StyString('LITERAL', '*', [(960, 50, 960, 51)]), StyString('LITERAL', 'warning$', [(960, 52, 960, 60)]), StyString('QUOTE', '', [(961, 10, 961, 12)]))], [(960, 8, 962, 9)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushEntryField($context, 'key', StyString('LITERAL', 'key', [(963, 10, 963, 13)])); 
        bst__sortify($context, StyString('LITERAL', 'sortify', [(963, 14, 963, 21)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'key', [(963, 10, 963, 13)]), StyString('LITERAL', 'sortify', [(963, 14, 963, 21)]))], [(963, 8, 963, 23)])); 
      builtin__ifZs($context, StyString('LITERAL', 'if$', [(964, 6, 964, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'key', [(959, 6, 959, 9)]), StyString('LITERAL', 'empty$', [(959, 10, 959, 16)]), StyString('BLOCK', [(StyString('QUOTE', 'to sort, need author or key in ', [(960, 10, 960, 43)]), StyString('LITERAL', 'cite$', [(960, 44, 960, 49)]), StyString('LITERAL', '*', [(960, 50, 960, 51)]), StyString('LITERAL', 'warning$', [(960, 52, 960, 60)]), StyString('QUOTE', '', [(961, 10, 961, 12)]))], [(960, 8, 962, 9)]), StyString('BLOCK', [(StyString('LITERAL', 'key', [(963, 10, 963, 13)]), StyString('LITERAL', 'sortify', [(963, 14, 963, 21)]))], [(963, 8, 963, 23)]), StyString('LITERAL', 'if$', [(964, 6, 964, 9)]))], [(959, 4, 965, 5)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushEntryField($context, 'author', StyString('LITERAL', 'author', [(966, 6, 966, 12)])); 
      bst__sortZoformatZonames($context, StyString('LITERAL', 'sort.format.names', [(966, 13, 966, 30)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'author', [(966, 6, 966, 12)]), StyString('LITERAL', 'sort.format.names', [(966, 13, 966, 30)]))], [(966, 4, 966, 32)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(967, 2, 967, 5)])); 
  }
  sub bst__authorZoeditorZosort { 
    my ($context) = @_; 
    pushEntryField($context, 'author', StyString('LITERAL', 'author', [(971, 2, 971, 8)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(971, 9, 971, 15)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushEntryField($context, 'editor', StyString('LITERAL', 'editor', [(972, 6, 972, 12)])); 
      builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(972, 13, 972, 19)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushEntryField($context, 'key', StyString('LITERAL', 'key', [(973, 10, 973, 13)])); 
        builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(973, 14, 973, 20)])); 
        pushFunction($context, sub { 
          my ($context) = @_; 
          pushString($context, 'to sort, need author, editor, or key in ', StyString('QUOTE', 'to sort, need author, editor, or key in ', [(974, 14, 974, 56)])); 
          builtin__citeZs($context, StyString('LITERAL', 'cite$', [(974, 57, 974, 62)])); 
          builtin__Za($context, StyString('LITERAL', '*', [(974, 63, 974, 64)])); 
          builtin__warningZs($context, StyString('LITERAL', 'warning$', [(974, 65, 974, 73)])); 
          pushString($context, '', StyString('QUOTE', '', [(975, 14, 975, 16)])); 
        }, StyString('BLOCK', [(StyString('QUOTE', 'to sort, need author, editor, or key in ', [(974, 14, 974, 56)]), StyString('LITERAL', 'cite$', [(974, 57, 974, 62)]), StyString('LITERAL', '*', [(974, 63, 974, 64)]), StyString('LITERAL', 'warning$', [(974, 65, 974, 73)]), StyString('QUOTE', '', [(975, 14, 975, 16)]))], [(974, 12, 976, 13)])); 
        pushFunction($context, sub { 
          my ($context) = @_; 
          pushEntryField($context, 'key', StyString('LITERAL', 'key', [(977, 14, 977, 17)])); 
          bst__sortify($context, StyString('LITERAL', 'sortify', [(977, 18, 977, 25)])); 
        }, StyString('BLOCK', [(StyString('LITERAL', 'key', [(977, 14, 977, 17)]), StyString('LITERAL', 'sortify', [(977, 18, 977, 25)]))], [(977, 12, 977, 27)])); 
        builtin__ifZs($context, StyString('LITERAL', 'if$', [(978, 10, 978, 13)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'key', [(973, 10, 973, 13)]), StyString('LITERAL', 'empty$', [(973, 14, 973, 20)]), StyString('BLOCK', [(StyString('QUOTE', 'to sort, need author, editor, or key in ', [(974, 14, 974, 56)]), StyString('LITERAL', 'cite$', [(974, 57, 974, 62)]), StyString('LITERAL', '*', [(974, 63, 974, 64)]), StyString('LITERAL', 'warning$', [(974, 65, 974, 73)]), StyString('QUOTE', '', [(975, 14, 975, 16)]))], [(974, 12, 976, 13)]), StyString('BLOCK', [(StyString('LITERAL', 'key', [(977, 14, 977, 17)]), StyString('LITERAL', 'sortify', [(977, 18, 977, 25)]))], [(977, 12, 977, 27)]), StyString('LITERAL', 'if$', [(978, 10, 978, 13)]))], [(973, 8, 979, 9)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushEntryField($context, 'editor', StyString('LITERAL', 'editor', [(980, 10, 980, 16)])); 
        bst__sortZoformatZonames($context, StyString('LITERAL', 'sort.format.names', [(980, 17, 980, 34)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'editor', [(980, 10, 980, 16)]), StyString('LITERAL', 'sort.format.names', [(980, 17, 980, 34)]))], [(980, 8, 980, 36)])); 
      builtin__ifZs($context, StyString('LITERAL', 'if$', [(981, 6, 981, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'editor', [(972, 6, 972, 12)]), StyString('LITERAL', 'empty$', [(972, 13, 972, 19)]), StyString('BLOCK', [(StyString('LITERAL', 'key', [(973, 10, 973, 13)]), StyString('LITERAL', 'empty$', [(973, 14, 973, 20)]), StyString('BLOCK', [(StyString('QUOTE', 'to sort, need author, editor, or key in ', [(974, 14, 974, 56)]), StyString('LITERAL', 'cite$', [(974, 57, 974, 62)]), StyString('LITERAL', '*', [(974, 63, 974, 64)]), StyString('LITERAL', 'warning$', [(974, 65, 974, 73)]), StyString('QUOTE', '', [(975, 14, 975, 16)]))], [(974, 12, 976, 13)]), StyString('BLOCK', [(StyString('LITERAL', 'key', [(977, 14, 977, 17)]), StyString('LITERAL', 'sortify', [(977, 18, 977, 25)]))], [(977, 12, 977, 27)]), StyString('LITERAL', 'if$', [(978, 10, 978, 13)]))], [(973, 8, 979, 9)]), StyString('BLOCK', [(StyString('LITERAL', 'editor', [(980, 10, 980, 16)]), StyString('LITERAL', 'sort.format.names', [(980, 17, 980, 34)]))], [(980, 8, 980, 36)]), StyString('LITERAL', 'if$', [(981, 6, 981, 9)]))], [(972, 4, 982, 5)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushEntryField($context, 'author', StyString('LITERAL', 'author', [(983, 6, 983, 12)])); 
      bst__sortZoformatZonames($context, StyString('LITERAL', 'sort.format.names', [(983, 13, 983, 30)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'author', [(983, 6, 983, 12)]), StyString('LITERAL', 'sort.format.names', [(983, 13, 983, 30)]))], [(983, 4, 983, 32)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(984, 2, 984, 5)])); 
  }
  sub bst__authorZoorganizzationZosort { 
    my ($context) = @_; 
    pushEntryField($context, 'author', StyString('LITERAL', 'author', [(988, 2, 988, 8)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(988, 9, 988, 15)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushEntryField($context, 'organization', StyString('LITERAL', 'organization', [(989, 6, 989, 18)])); 
      builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(989, 19, 989, 25)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushEntryField($context, 'key', StyString('LITERAL', 'key', [(990, 10, 990, 13)])); 
        builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(990, 14, 990, 20)])); 
        pushFunction($context, sub { 
          my ($context) = @_; 
          pushString($context, 'to sort, need author, organization, or key in ', StyString('QUOTE', 'to sort, need author, organization, or key in ', [(991, 14, 991, 62)])); 
          builtin__citeZs($context, StyString('LITERAL', 'cite$', [(991, 63, 991, 68)])); 
          builtin__Za($context, StyString('LITERAL', '*', [(991, 69, 991, 70)])); 
          builtin__warningZs($context, StyString('LITERAL', 'warning$', [(991, 71, 991, 79)])); 
          pushString($context, '', StyString('QUOTE', '', [(992, 14, 992, 16)])); 
        }, StyString('BLOCK', [(StyString('QUOTE', 'to sort, need author, organization, or key in ', [(991, 14, 991, 62)]), StyString('LITERAL', 'cite$', [(991, 63, 991, 68)]), StyString('LITERAL', '*', [(991, 69, 991, 70)]), StyString('LITERAL', 'warning$', [(991, 71, 991, 79)]), StyString('QUOTE', '', [(992, 14, 992, 16)]))], [(991, 12, 993, 13)])); 
        pushFunction($context, sub { 
          my ($context) = @_; 
          pushEntryField($context, 'key', StyString('LITERAL', 'key', [(994, 14, 994, 17)])); 
          bst__sortify($context, StyString('LITERAL', 'sortify', [(994, 18, 994, 25)])); 
        }, StyString('BLOCK', [(StyString('LITERAL', 'key', [(994, 14, 994, 17)]), StyString('LITERAL', 'sortify', [(994, 18, 994, 25)]))], [(994, 12, 994, 27)])); 
        builtin__ifZs($context, StyString('LITERAL', 'if$', [(995, 10, 995, 13)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'key', [(990, 10, 990, 13)]), StyString('LITERAL', 'empty$', [(990, 14, 990, 20)]), StyString('BLOCK', [(StyString('QUOTE', 'to sort, need author, organization, or key in ', [(991, 14, 991, 62)]), StyString('LITERAL', 'cite$', [(991, 63, 991, 68)]), StyString('LITERAL', '*', [(991, 69, 991, 70)]), StyString('LITERAL', 'warning$', [(991, 71, 991, 79)]), StyString('QUOTE', '', [(992, 14, 992, 16)]))], [(991, 12, 993, 13)]), StyString('BLOCK', [(StyString('LITERAL', 'key', [(994, 14, 994, 17)]), StyString('LITERAL', 'sortify', [(994, 18, 994, 25)]))], [(994, 12, 994, 27)]), StyString('LITERAL', 'if$', [(995, 10, 995, 13)]))], [(990, 8, 996, 9)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushString($context, 'The ', StyString('QUOTE', 'The ', [(997, 10, 997, 16)])); 
        pushInteger($context, 4, StyString('NUMBER', 4, [(997, 17, 997, 19)])); 
        pushEntryField($context, 'organization', StyString('LITERAL', 'organization', [(997, 20, 997, 32)])); 
        bst__chopZoword($context, StyString('LITERAL', 'chop.word', [(997, 33, 997, 42)])); 
        bst__sortify($context, StyString('LITERAL', 'sortify', [(997, 43, 997, 50)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', 'The ', [(997, 10, 997, 16)]), StyString('NUMBER', 4, [(997, 17, 997, 19)]), StyString('LITERAL', 'organization', [(997, 20, 997, 32)]), StyString('LITERAL', 'chop.word', [(997, 33, 997, 42)]), StyString('LITERAL', 'sortify', [(997, 43, 997, 50)]))], [(997, 8, 997, 52)])); 
      builtin__ifZs($context, StyString('LITERAL', 'if$', [(998, 6, 998, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'organization', [(989, 6, 989, 18)]), StyString('LITERAL', 'empty$', [(989, 19, 989, 25)]), StyString('BLOCK', [(StyString('LITERAL', 'key', [(990, 10, 990, 13)]), StyString('LITERAL', 'empty$', [(990, 14, 990, 20)]), StyString('BLOCK', [(StyString('QUOTE', 'to sort, need author, organization, or key in ', [(991, 14, 991, 62)]), StyString('LITERAL', 'cite$', [(991, 63, 991, 68)]), StyString('LITERAL', '*', [(991, 69, 991, 70)]), StyString('LITERAL', 'warning$', [(991, 71, 991, 79)]), StyString('QUOTE', '', [(992, 14, 992, 16)]))], [(991, 12, 993, 13)]), StyString('BLOCK', [(StyString('LITERAL', 'key', [(994, 14, 994, 17)]), StyString('LITERAL', 'sortify', [(994, 18, 994, 25)]))], [(994, 12, 994, 27)]), StyString('LITERAL', 'if$', [(995, 10, 995, 13)]))], [(990, 8, 996, 9)]), StyString('BLOCK', [(StyString('QUOTE', 'The ', [(997, 10, 997, 16)]), StyString('NUMBER', 4, [(997, 17, 997, 19)]), StyString('LITERAL', 'organization', [(997, 20, 997, 32)]), StyString('LITERAL', 'chop.word', [(997, 33, 997, 42)]), StyString('LITERAL', 'sortify', [(997, 43, 997, 50)]))], [(997, 8, 997, 52)]), StyString('LITERAL', 'if$', [(998, 6, 998, 9)]))], [(989, 4, 999, 5)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushEntryField($context, 'author', StyString('LITERAL', 'author', [(1000, 6, 1000, 12)])); 
      bst__sortZoformatZonames($context, StyString('LITERAL', 'sort.format.names', [(1000, 13, 1000, 30)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'author', [(1000, 6, 1000, 12)]), StyString('LITERAL', 'sort.format.names', [(1000, 13, 1000, 30)]))], [(1000, 4, 1000, 32)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(1001, 2, 1001, 5)])); 
  }
  sub bst__editorZoorganizzationZosort { 
    my ($context) = @_; 
    pushEntryField($context, 'editor', StyString('LITERAL', 'editor', [(1005, 2, 1005, 8)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(1005, 9, 1005, 15)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushEntryField($context, 'organization', StyString('LITERAL', 'organization', [(1006, 6, 1006, 18)])); 
      builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(1006, 19, 1006, 25)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushEntryField($context, 'key', StyString('LITERAL', 'key', [(1007, 10, 1007, 13)])); 
        builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(1007, 14, 1007, 20)])); 
        pushFunction($context, sub { 
          my ($context) = @_; 
          pushString($context, 'to sort, need editor, organization, or key in ', StyString('QUOTE', 'to sort, need editor, organization, or key in ', [(1008, 14, 1008, 62)])); 
          builtin__citeZs($context, StyString('LITERAL', 'cite$', [(1008, 63, 1008, 68)])); 
          builtin__Za($context, StyString('LITERAL', '*', [(1008, 69, 1008, 70)])); 
          builtin__warningZs($context, StyString('LITERAL', 'warning$', [(1008, 71, 1008, 79)])); 
          pushString($context, '', StyString('QUOTE', '', [(1009, 14, 1009, 16)])); 
        }, StyString('BLOCK', [(StyString('QUOTE', 'to sort, need editor, organization, or key in ', [(1008, 14, 1008, 62)]), StyString('LITERAL', 'cite$', [(1008, 63, 1008, 68)]), StyString('LITERAL', '*', [(1008, 69, 1008, 70)]), StyString('LITERAL', 'warning$', [(1008, 71, 1008, 79)]), StyString('QUOTE', '', [(1009, 14, 1009, 16)]))], [(1008, 12, 1010, 13)])); 
        pushFunction($context, sub { 
          my ($context) = @_; 
          pushEntryField($context, 'key', StyString('LITERAL', 'key', [(1011, 14, 1011, 17)])); 
          bst__sortify($context, StyString('LITERAL', 'sortify', [(1011, 18, 1011, 25)])); 
        }, StyString('BLOCK', [(StyString('LITERAL', 'key', [(1011, 14, 1011, 17)]), StyString('LITERAL', 'sortify', [(1011, 18, 1011, 25)]))], [(1011, 12, 1011, 27)])); 
        builtin__ifZs($context, StyString('LITERAL', 'if$', [(1012, 10, 1012, 13)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'key', [(1007, 10, 1007, 13)]), StyString('LITERAL', 'empty$', [(1007, 14, 1007, 20)]), StyString('BLOCK', [(StyString('QUOTE', 'to sort, need editor, organization, or key in ', [(1008, 14, 1008, 62)]), StyString('LITERAL', 'cite$', [(1008, 63, 1008, 68)]), StyString('LITERAL', '*', [(1008, 69, 1008, 70)]), StyString('LITERAL', 'warning$', [(1008, 71, 1008, 79)]), StyString('QUOTE', '', [(1009, 14, 1009, 16)]))], [(1008, 12, 1010, 13)]), StyString('BLOCK', [(StyString('LITERAL', 'key', [(1011, 14, 1011, 17)]), StyString('LITERAL', 'sortify', [(1011, 18, 1011, 25)]))], [(1011, 12, 1011, 27)]), StyString('LITERAL', 'if$', [(1012, 10, 1012, 13)]))], [(1007, 8, 1013, 9)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        pushString($context, 'The ', StyString('QUOTE', 'The ', [(1014, 10, 1014, 16)])); 
        pushInteger($context, 4, StyString('NUMBER', 4, [(1014, 17, 1014, 19)])); 
        pushEntryField($context, 'organization', StyString('LITERAL', 'organization', [(1014, 20, 1014, 32)])); 
        bst__chopZoword($context, StyString('LITERAL', 'chop.word', [(1014, 33, 1014, 42)])); 
        bst__sortify($context, StyString('LITERAL', 'sortify', [(1014, 43, 1014, 50)])); 
      }, StyString('BLOCK', [(StyString('QUOTE', 'The ', [(1014, 10, 1014, 16)]), StyString('NUMBER', 4, [(1014, 17, 1014, 19)]), StyString('LITERAL', 'organization', [(1014, 20, 1014, 32)]), StyString('LITERAL', 'chop.word', [(1014, 33, 1014, 42)]), StyString('LITERAL', 'sortify', [(1014, 43, 1014, 50)]))], [(1014, 8, 1014, 52)])); 
      builtin__ifZs($context, StyString('LITERAL', 'if$', [(1015, 6, 1015, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'organization', [(1006, 6, 1006, 18)]), StyString('LITERAL', 'empty$', [(1006, 19, 1006, 25)]), StyString('BLOCK', [(StyString('LITERAL', 'key', [(1007, 10, 1007, 13)]), StyString('LITERAL', 'empty$', [(1007, 14, 1007, 20)]), StyString('BLOCK', [(StyString('QUOTE', 'to sort, need editor, organization, or key in ', [(1008, 14, 1008, 62)]), StyString('LITERAL', 'cite$', [(1008, 63, 1008, 68)]), StyString('LITERAL', '*', [(1008, 69, 1008, 70)]), StyString('LITERAL', 'warning$', [(1008, 71, 1008, 79)]), StyString('QUOTE', '', [(1009, 14, 1009, 16)]))], [(1008, 12, 1010, 13)]), StyString('BLOCK', [(StyString('LITERAL', 'key', [(1011, 14, 1011, 17)]), StyString('LITERAL', 'sortify', [(1011, 18, 1011, 25)]))], [(1011, 12, 1011, 27)]), StyString('LITERAL', 'if$', [(1012, 10, 1012, 13)]))], [(1007, 8, 1013, 9)]), StyString('BLOCK', [(StyString('QUOTE', 'The ', [(1014, 10, 1014, 16)]), StyString('NUMBER', 4, [(1014, 17, 1014, 19)]), StyString('LITERAL', 'organization', [(1014, 20, 1014, 32)]), StyString('LITERAL', 'chop.word', [(1014, 33, 1014, 42)]), StyString('LITERAL', 'sortify', [(1014, 43, 1014, 50)]))], [(1014, 8, 1014, 52)]), StyString('LITERAL', 'if$', [(1015, 6, 1015, 9)]))], [(1006, 4, 1016, 5)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushEntryField($context, 'editor', StyString('LITERAL', 'editor', [(1017, 6, 1017, 12)])); 
      bst__sortZoformatZonames($context, StyString('LITERAL', 'sort.format.names', [(1017, 13, 1017, 30)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'editor', [(1017, 6, 1017, 12)]), StyString('LITERAL', 'sort.format.names', [(1017, 13, 1017, 30)]))], [(1017, 4, 1017, 32)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(1018, 2, 1018, 5)])); 
  }
  sub bst__presort { 
    my ($context) = @_; 
    builtin__typeZs($context, StyString('LITERAL', 'type$', [(1022, 2, 1022, 7)])); 
    pushString($context, 'book', StyString('QUOTE', 'book', [(1022, 8, 1022, 14)])); 
    builtin__Ze($context, StyString('LITERAL', '=', [(1022, 15, 1022, 16)])); 
    builtin__typeZs($context, StyString('LITERAL', 'type$', [(1023, 2, 1023, 7)])); 
    pushString($context, 'inbook', StyString('QUOTE', 'inbook', [(1023, 8, 1023, 16)])); 
    builtin__Ze($context, StyString('LITERAL', '=', [(1023, 17, 1023, 18)])); 
    bst__or($context, StyString('LITERAL', 'or', [(1024, 2, 1024, 4)])); 
    lookupFunction($context, \&bst__authorZoeditorZosort, StyString('REFERENCE', 'author.editor.sort', [(1025, 4, 1025, 23)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      builtin__typeZs($context, StyString('LITERAL', 'type$', [(1026, 6, 1026, 11)])); 
      pushString($context, 'proceedings', StyString('QUOTE', 'proceedings', [(1026, 12, 1026, 25)])); 
      builtin__Ze($context, StyString('LITERAL', '=', [(1026, 26, 1026, 27)])); 
      lookupFunction($context, \&bst__editorZoorganizzationZosort, StyString('REFERENCE', 'editor.organization.sort', [(1027, 8, 1027, 33)])); 
      pushFunction($context, sub { 
        my ($context) = @_; 
        builtin__typeZs($context, StyString('LITERAL', 'type$', [(1028, 10, 1028, 15)])); 
        pushString($context, 'manual', StyString('QUOTE', 'manual', [(1028, 16, 1028, 24)])); 
        builtin__Ze($context, StyString('LITERAL', '=', [(1028, 25, 1028, 26)])); 
        lookupFunction($context, \&bst__authorZoorganizzationZosort, StyString('REFERENCE', 'author.organization.sort', [(1029, 12, 1029, 37)])); 
        lookupFunction($context, \&bst__authorZosort, StyString('REFERENCE', 'author.sort', [(1030, 12, 1030, 24)])); 
        builtin__ifZs($context, StyString('LITERAL', 'if$', [(1031, 10, 1031, 13)])); 
      }, StyString('BLOCK', [(StyString('LITERAL', 'type$', [(1028, 10, 1028, 15)]), StyString('QUOTE', 'manual', [(1028, 16, 1028, 24)]), StyString('LITERAL', '=', [(1028, 25, 1028, 26)]), StyString('REFERENCE', 'author.organization.sort', [(1029, 12, 1029, 37)]), StyString('REFERENCE', 'author.sort', [(1030, 12, 1030, 24)]), StyString('LITERAL', 'if$', [(1031, 10, 1031, 13)]))], [(1028, 8, 1032, 9)])); 
      builtin__ifZs($context, StyString('LITERAL', 'if$', [(1033, 6, 1033, 9)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'type$', [(1026, 6, 1026, 11)]), StyString('QUOTE', 'proceedings', [(1026, 12, 1026, 25)]), StyString('LITERAL', '=', [(1026, 26, 1026, 27)]), StyString('REFERENCE', 'editor.organization.sort', [(1027, 8, 1027, 33)]), StyString('BLOCK', [(StyString('LITERAL', 'type$', [(1028, 10, 1028, 15)]), StyString('QUOTE', 'manual', [(1028, 16, 1028, 24)]), StyString('LITERAL', '=', [(1028, 25, 1028, 26)]), StyString('REFERENCE', 'author.organization.sort', [(1029, 12, 1029, 37)]), StyString('REFERENCE', 'author.sort', [(1030, 12, 1030, 24)]), StyString('LITERAL', 'if$', [(1031, 10, 1031, 13)]))], [(1028, 8, 1032, 9)]), StyString('LITERAL', 'if$', [(1033, 6, 1033, 9)]))], [(1026, 4, 1034, 5)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(1035, 2, 1035, 5)])); 
    pushString($context, '    ', StyString('QUOTE', '    ', [(1036, 2, 1036, 8)])); 
    builtin__Za($context, StyString('LITERAL', '*', [(1037, 2, 1037, 3)])); 
    pushEntryField($context, 'year', StyString('LITERAL', 'year', [(1038, 2, 1038, 6)])); 
    bst__fieldZoorZonull($context, StyString('LITERAL', 'field.or.null', [(1038, 7, 1038, 20)])); 
    bst__sortify($context, StyString('LITERAL', 'sortify', [(1038, 21, 1038, 28)])); 
    builtin__Za($context, StyString('LITERAL', '*', [(1039, 2, 1039, 3)])); 
    pushString($context, '    ', StyString('QUOTE', '    ', [(1040, 2, 1040, 8)])); 
    builtin__Za($context, StyString('LITERAL', '*', [(1041, 2, 1041, 3)])); 
    pushEntryField($context, 'title', StyString('LITERAL', 'title', [(1042, 2, 1042, 7)])); 
    bst__fieldZoorZonull($context, StyString('LITERAL', 'field.or.null', [(1042, 8, 1042, 21)])); 
    bst__sortZoformatZotitle($context, StyString('LITERAL', 'sort.format.title', [(1043, 2, 1043, 19)])); 
    builtin__Za($context, StyString('LITERAL', '*', [(1044, 2, 1044, 3)])); 
    pushInteger($context, 1, StyString('NUMBER', 1, [(1045, 2, 1045, 4)])); 
    pushGlobalInteger($context, 'entry.max$', StyString('LITERAL', 'entry.max$', [(1045, 5, 1045, 15)])); 
    builtin__substringZs($context, StyString('LITERAL', 'substring$', [(1045, 16, 1045, 26)])); 
    lookupEntryString($context, 'sort.key$', StyString('REFERENCE', 'sort.key$', [(1046, 2, 1046, 12)])); 
    builtin__ZcZe($context, StyString('LITERAL', ':=', [(1046, 13, 1046, 15)])); 
  }
  iterateFunction($context, \&bst__presort, StyString('LITERAL', 'presort', [(1049, 9, 1049, 16)])); 
  sortEntries($context, StyCommand(StyString('LITERAL', 'SORT', [(1050, 1, 1051, 4)]), [()], [(1050, 1, 1051, 4)])); 
  defineGlobalString($context, 'longest.label', StyString('LITERAL', 'longest.label', [(1053, 10, 1053, 23)])); 
  defineGlobalInteger($context, 'number.label', StyString('LITERAL', 'number.label', [(1055, 11, 1055, 23)])); 
  defineGlobalInteger($context, 'longest.label.width', StyString('LITERAL', 'longest.label.width', [(1055, 24, 1055, 43)])); 
  sub bst__initializzeZolongestZolabel { 
    my ($context) = @_; 
    pushString($context, '', StyString('QUOTE', '', [(1058, 2, 1058, 4)])); 
    lookupGlobalString($context, 'longest.label', StyString('REFERENCE', 'longest.label', [(1058, 5, 1058, 19)])); 
    builtin__ZcZe($context, StyString('LITERAL', ':=', [(1058, 20, 1058, 22)])); 
    pushInteger($context, 1, StyString('NUMBER', 1, [(1059, 2, 1059, 4)])); 
    lookupGlobalInteger($context, 'number.label', StyString('REFERENCE', 'number.label', [(1059, 5, 1059, 18)])); 
    builtin__ZcZe($context, StyString('LITERAL', ':=', [(1059, 19, 1059, 21)])); 
    pushInteger($context, 0, StyString('NUMBER', 0, [(1060, 2, 1060, 4)])); 
    lookupGlobalInteger($context, 'longest.label.width', StyString('REFERENCE', 'longest.label.width', [(1060, 5, 1060, 25)])); 
    builtin__ZcZe($context, StyString('LITERAL', ':=', [(1060, 26, 1060, 28)])); 
  }
  sub bst__longestZolabelZopass { 
    my ($context) = @_; 
    pushGlobalInteger($context, 'number.label', StyString('LITERAL', 'number.label', [(1064, 2, 1064, 14)])); 
    builtin__intZotoZostrZs($context, StyString('LITERAL', 'int.to.str$', [(1064, 15, 1064, 26)])); 
    lookupEntryString($context, 'label', StyString('REFERENCE', 'label', [(1064, 27, 1064, 33)])); 
    builtin__ZcZe($context, StyString('LITERAL', ':=', [(1064, 34, 1064, 36)])); 
    pushGlobalInteger($context, 'number.label', StyString('LITERAL', 'number.label', [(1065, 2, 1065, 14)])); 
    pushInteger($context, 1, StyString('NUMBER', 1, [(1065, 15, 1065, 17)])); 
    builtin__Zp($context, StyString('LITERAL', '+', [(1065, 18, 1065, 19)])); 
    lookupGlobalInteger($context, 'number.label', StyString('REFERENCE', 'number.label', [(1065, 20, 1065, 33)])); 
    builtin__ZcZe($context, StyString('LITERAL', ':=', [(1065, 34, 1065, 36)])); 
    pushEntryString($context, 'label', StyString('LITERAL', 'label', [(1066, 2, 1066, 7)])); 
    builtin__widthZs($context, StyString('LITERAL', 'width$', [(1066, 8, 1066, 14)])); 
    pushGlobalInteger($context, 'longest.label.width', StyString('LITERAL', 'longest.label.width', [(1066, 15, 1066, 34)])); 
    builtin__Zg($context, StyString('LITERAL', '>', [(1066, 35, 1066, 36)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      pushEntryString($context, 'label', StyString('LITERAL', 'label', [(1067, 6, 1067, 11)])); 
      lookupGlobalString($context, 'longest.label', StyString('REFERENCE', 'longest.label', [(1067, 12, 1067, 26)])); 
      builtin__ZcZe($context, StyString('LITERAL', ':=', [(1067, 27, 1067, 29)])); 
      pushEntryString($context, 'label', StyString('LITERAL', 'label', [(1068, 6, 1068, 11)])); 
      builtin__widthZs($context, StyString('LITERAL', 'width$', [(1068, 12, 1068, 18)])); 
      lookupGlobalInteger($context, 'longest.label.width', StyString('REFERENCE', 'longest.label.width', [(1068, 19, 1068, 39)])); 
      builtin__ZcZe($context, StyString('LITERAL', ':=', [(1068, 40, 1068, 42)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'label', [(1067, 6, 1067, 11)]), StyString('REFERENCE', 'longest.label', [(1067, 12, 1067, 26)]), StyString('LITERAL', ':=', [(1067, 27, 1067, 29)]), StyString('LITERAL', 'label', [(1068, 6, 1068, 11)]), StyString('LITERAL', 'width$', [(1068, 12, 1068, 18)]), StyString('REFERENCE', 'longest.label.width', [(1068, 19, 1068, 39)]), StyString('LITERAL', ':=', [(1068, 40, 1068, 42)]))], [(1067, 4, 1069, 5)])); 
    lookupFunction($context, \&builtin__skipZs, StyString('REFERENCE', 'skip$', [(1070, 4, 1070, 10)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(1071, 2, 1071, 5)])); 
  }
  bst__initializzeZolongestZolabel($context, StyString('LITERAL', 'initialize.longest.label', [(1074, 9, 1074, 33)])); 
  iterateFunction($context, \&bst__longestZolabelZopass, StyString('LITERAL', 'longest.label.pass', [(1076, 9, 1076, 27)])); 
  sub bst__beginZobib { 
    my ($context) = @_; 
    builtin__preambleZs($context, StyString('LITERAL', 'preamble$', [(1079, 2, 1079, 11)])); 
    builtin__emptyZs($context, StyString('LITERAL', 'empty$', [(1079, 12, 1079, 18)])); 
    lookupFunction($context, \&builtin__skipZs, StyString('REFERENCE', 'skip$', [(1080, 4, 1080, 10)])); 
    pushFunction($context, sub { 
      my ($context) = @_; 
      builtin__preambleZs($context, StyString('LITERAL', 'preamble$', [(1081, 6, 1081, 15)])); 
      builtin__writeZs($context, StyString('LITERAL', 'write$', [(1081, 16, 1081, 22)])); 
      builtin__newlineZs($context, StyString('LITERAL', 'newline$', [(1081, 23, 1081, 31)])); 
    }, StyString('BLOCK', [(StyString('LITERAL', 'preamble$', [(1081, 6, 1081, 15)]), StyString('LITERAL', 'write$', [(1081, 16, 1081, 22)]), StyString('LITERAL', 'newline$', [(1081, 23, 1081, 31)]))], [(1081, 4, 1081, 33)])); 
    builtin__ifZs($context, StyString('LITERAL', 'if$', [(1082, 2, 1082, 5)])); 
    pushString($context, '\\begin{thebibliography}{', StyString('QUOTE', '\\begin{thebibliography}{', [(1083, 2, 1083, 28)])); 
    pushGlobalString($context, 'longest.label', StyString('LITERAL', 'longest.label', [(1083, 30, 1083, 43)])); 
    builtin__Za($context, StyString('LITERAL', '*', [(1083, 45, 1083, 46)])); 
    pushString($context, '}', StyString('QUOTE', '}', [(1083, 47, 1083, 50)])); 
    builtin__Za($context, StyString('LITERAL', '*', [(1083, 51, 1083, 52)])); 
    builtin__writeZs($context, StyString('LITERAL', 'write$', [(1083, 53, 1083, 59)])); 
    builtin__newlineZs($context, StyString('LITERAL', 'newline$', [(1083, 60, 1083, 68)])); 
  }
  bst__beginZobib($context, StyString('LITERAL', 'begin.bib', [(1086, 9, 1086, 18)])); 
  bst__initZostateZoconsts($context, StyString('LITERAL', 'init.state.consts', [(1088, 9, 1088, 26)])); 
  iterateFunction($context, \&builtin__callZotypeZs, StyString('LITERAL', 'call.type$', [(1090, 9, 1090, 19)])); 
  sub bst__endZobib { 
    my ($context) = @_; 
    builtin__newlineZs($context, StyString('LITERAL', 'newline$', [(1093, 2, 1093, 10)])); 
    pushString($context, '\\end{thebibliography}', StyString('QUOTE', '\\end{thebibliography}', [(1094, 2, 1094, 25)])); 
    builtin__writeZs($context, StyString('LITERAL', 'write$', [(1094, 26, 1094, 32)])); 
    builtin__newlineZs($context, StyString('LITERAL', 'newline$', [(1094, 33, 1094, 41)])); 
  }
  bst__endZobib($context, StyString('LITERAL', 'end.bib', [(1097, 9, 1097, 16)])); 


  return $context; 
  # end of automatically generated code 
}